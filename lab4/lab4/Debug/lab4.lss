
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002154  000021e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037c  00800130  00800130  00002218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e2c  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001439  00000000  00000000  0000636c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ac7  00000000  00000000  000077a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dac  00000000  00000000  0000926c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a9d  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b74  00000000  00000000  0000aab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  0000e629  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_1>
       8:	0c 94 96 04 	jmp	0x92c	; 0x92c <__vector_2>
       c:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_3>
      10:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_4>
      14:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_9>
      28:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__vector_10>
      2c:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_11>
      30:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_12>
      34:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__vector_13>
      38:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_14>
      3c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_15>
      40:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_16>
      44:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_17>
      48:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_18>
      4c:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_19>
      50:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__vector_20>
      54:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_21>
      58:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e5       	ldi	r30, 0x54	; 84
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a0 33       	cpi	r26, 0x30	; 48
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a0 e3       	ldi	r26, 0x30	; 48
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ac 3a       	cpi	r26, 0xAC	; 172
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <main>
      92:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <left_right_handeler>:
// pin a is right
// pin d is left
// pin A and B and DOWN are port b 6 and 7 4
// pin C and D are port e 2 and 3 
// Handles left, right
volatile void left_right_handeler(button_object *self,int arg){
      9a:	cf 93       	push	r28
      9c:	df 93       	push	r29
      9e:	00 d0       	rcall	.+0      	; 0xa0 <left_right_handeler+0x6>
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
      a4:	fc 01       	movw	r30, r24
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      a6:	2c b1       	in	r18, 0x0c	; 12
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
      a8:	24 70       	andi	r18, 0x04	; 4
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	35 95       	asr	r19
      ae:	27 95       	ror	r18
      b0:	35 95       	asr	r19
      b2:	27 95       	ror	r18
      b4:	29 83       	std	Y+1, r18	; 0x01
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      b6:	2c b1       	in	r18, 0x0c	; 12
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
      b8:	28 70       	andi	r18, 0x08	; 8
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	35 95       	asr	r19
      be:	27 95       	ror	r18
      c0:	35 95       	asr	r19
      c2:	27 95       	ror	r18
      c4:	35 95       	asr	r19
      c6:	27 95       	ror	r18
      c8:	2a 83       	std	Y+2, r18	; 0x02
	volatile uint8_t left,right;
	read_8_field(&PINE,&left,1,2);
	read_8_field(&PINE,&right,1,3);
	if(right == 0){
      ca:	9a 81       	ldd	r25, Y+2	; 0x02
      cc:	91 11       	cpse	r25, r1
      ce:	09 c0       	rjmp	.+18     	; 0xe2 <left_right_handeler+0x48>
		SYNC(self->app,change_pulse_gen,1);
      d0:	41 e0       	ldi	r20, 0x01	; 1
      d2:	50 e0       	ldi	r21, 0x00	; 0
      d4:	6d e7       	ldi	r22, 0x7D	; 125
      d6:	7f e0       	ldi	r23, 0x0F	; 15
      d8:	84 81       	ldd	r24, Z+4	; 0x04
      da:	95 81       	ldd	r25, Z+5	; 0x05
      dc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
      e0:	0b c0       	rjmp	.+22     	; 0xf8 <left_right_handeler+0x5e>
	}
	else if(left == 0){
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	81 11       	cpse	r24, r1
      e6:	08 c0       	rjmp	.+16     	; 0xf8 <left_right_handeler+0x5e>
		SYNC(self->app,change_pulse_gen,0);
      e8:	40 e0       	ldi	r20, 0x00	; 0
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	6d e7       	ldi	r22, 0x7D	; 125
      ee:	7f e0       	ldi	r23, 0x0F	; 15
      f0:	84 81       	ldd	r24, Z+4	; 0x04
      f2:	95 81       	ldd	r25, Z+5	; 0x05
      f4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
	}
	
}
      f8:	0f 90       	pop	r0
      fa:	0f 90       	pop	r0
      fc:	df 91       	pop	r29
      fe:	cf 91       	pop	r28
     100:	08 95       	ret

00000102 <upp_down_press_handeler>:
// pin a is right
// pin d is left
// pin A and B and DOWN are port b 6 and 7 4
// pin C and D are port e 2 and 3 
// Handles up, down, and press
volatile void upp_down_press_handeler(button_object *self, int arg){
     102:	8f 92       	push	r8
     104:	9f 92       	push	r9
     106:	af 92       	push	r10
     108:	bf 92       	push	r11
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	0f 93       	push	r16
     114:	1f 93       	push	r17
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
     11a:	00 d0       	rcall	.+0      	; 0x11c <upp_down_press_handeler+0x1a>
     11c:	1f 92       	push	r1
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
     122:	5c 01       	movw	r10, r24
     124:	4b 01       	movw	r8, r22
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     126:	83 b1       	in	r24, 0x03	; 3
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
     128:	80 71       	andi	r24, 0x10	; 16
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	95 95       	asr	r25
     12e:	87 95       	ror	r24
     130:	95 95       	asr	r25
     132:	87 95       	ror	r24
     134:	95 95       	asr	r25
     136:	87 95       	ror	r24
     138:	95 95       	asr	r25
     13a:	87 95       	ror	r24
     13c:	8b 83       	std	Y+3, r24	; 0x03
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     13e:	83 b1       	in	r24, 0x03	; 3
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
     140:	80 78       	andi	r24, 0x80	; 128
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	88 0f       	add	r24, r24
     146:	89 2f       	mov	r24, r25
     148:	88 1f       	adc	r24, r24
     14a:	99 0b       	sbc	r25, r25
     14c:	8a 83       	std	Y+2, r24	; 0x02
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     14e:	83 b1       	in	r24, 0x03	; 3
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
     150:	80 74       	andi	r24, 0x40	; 64
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	08 2e       	mov	r0, r24
     156:	89 2f       	mov	r24, r25
     158:	00 0c       	add	r0, r0
     15a:	88 1f       	adc	r24, r24
     15c:	99 0b       	sbc	r25, r25
     15e:	00 0c       	add	r0, r0
     160:	88 1f       	adc	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t up,down,press;
	read_8_field(&PINB,&press,1,4);
	read_8_field(&PINB,&down,1,7);
	read_8_field(&PINB,&up,1,6);
	if(up == 0)
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	81 11       	cpse	r24, r1
     16a:	15 c0       	rjmp	.+42     	; 0x196 <upp_down_press_handeler+0x94>
		ASYNC(self->app,itterate_freq,1);
     16c:	f5 01       	movw	r30, r10
     16e:	04 81       	ldd	r16, Z+4	; 0x04
     170:	15 81       	ldd	r17, Z+5	; 0x05
     172:	cc 24       	eor	r12, r12
     174:	c3 94       	inc	r12
     176:	d1 2c       	mov	r13, r1
     178:	0f 2e       	mov	r0, r31
     17a:	f0 e8       	ldi	r31, 0x80	; 128
     17c:	ef 2e       	mov	r14, r31
     17e:	ff e0       	ldi	r31, 0x0F	; 15
     180:	ff 2e       	mov	r15, r31
     182:	f0 2d       	mov	r31, r0
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	a9 01       	movw	r20, r18
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	cb 01       	movw	r24, r22
     190:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
     194:	24 c0       	rjmp	.+72     	; 0x1de <upp_down_press_handeler+0xdc>
	else if(down == 0)
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	81 11       	cpse	r24, r1
     19a:	15 c0       	rjmp	.+42     	; 0x1c6 <upp_down_press_handeler+0xc4>
		ASYNC(self->app,itterate_freq,-1);
     19c:	f5 01       	movw	r30, r10
     19e:	04 81       	ldd	r16, Z+4	; 0x04
     1a0:	15 81       	ldd	r17, Z+5	; 0x05
     1a2:	cc 24       	eor	r12, r12
     1a4:	ca 94       	dec	r12
     1a6:	dc 2c       	mov	r13, r12
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f0 e8       	ldi	r31, 0x80	; 128
     1ac:	ef 2e       	mov	r14, r31
     1ae:	ff e0       	ldi	r31, 0x0F	; 15
     1b0:	ff 2e       	mov	r15, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	a9 01       	movw	r20, r18
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	cb 01       	movw	r24, r22
     1c0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
     1c4:	0c c0       	rjmp	.+24     	; 0x1de <upp_down_press_handeler+0xdc>
	else if(press == 0){
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	81 11       	cpse	r24, r1
     1ca:	09 c0       	rjmp	.+18     	; 0x1de <upp_down_press_handeler+0xdc>
		SYNC(self->app,commit_freq,0);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	62 e9       	ldi	r22, 0x92	; 146
     1d2:	7f e0       	ldi	r23, 0x0F	; 15
     1d4:	f5 01       	movw	r30, r10
     1d6:	84 81       	ldd	r24, Z+4	; 0x04
     1d8:	95 81       	ldd	r25, Z+5	; 0x05
     1da:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
	}
	
	if(up == 0 || down == 0 ){
     1de:	89 81       	ldd	r24, Y+1	; 0x01
     1e0:	88 23       	and	r24, r24
     1e2:	19 f0       	breq	.+6      	; 0x1ea <upp_down_press_handeler+0xe8>
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	81 11       	cpse	r24, r1
     1e8:	11 c0       	rjmp	.+34     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		AFTER(MSEC(cool_delay),self,upp_down_press_handeler,arg);
     1ea:	64 01       	movw	r12, r8
     1ec:	0f 2e       	mov	r0, r31
     1ee:	f1 e8       	ldi	r31, 0x81	; 129
     1f0:	ef 2e       	mov	r14, r31
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ff 2e       	mov	r15, r31
     1f6:	f0 2d       	mov	r31, r0
     1f8:	85 01       	movw	r16, r10
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	a9 01       	movw	r20, r18
     200:	64 e8       	ldi	r22, 0x84	; 132
     202:	7e e1       	ldi	r23, 0x1E	; 30
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
	}
	
	
     20c:	0f 90       	pop	r0
     20e:	0f 90       	pop	r0
     210:	0f 90       	pop	r0
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	ff 90       	pop	r15
     21c:	ef 90       	pop	r14
     21e:	df 90       	pop	r13
     220:	cf 90       	pop	r12
     222:	bf 90       	pop	r11
     224:	af 90       	pop	r10
     226:	9f 90       	pop	r9
     228:	8f 90       	pop	r8
     22a:	08 95       	ret

0000022c <init_button>:
// pin d is left
// pin A and B are port b 6 and 7
// pin C and D are port e 2 and 3 
// Two interrupt handelers, 
#include "../include/button.h"
void init_button(button_object *self, app_object *app){
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
     236:	8b 01       	movw	r16, r22
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     238:	85 b1       	in	r24, 0x05	; 5
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     23a:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     23c:	85 b9       	out	0x05, r24	; 5
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     23e:	8e b1       	in	r24, 0x0e	; 14
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     240:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     242:	8e b9       	out	0x0e, r24	; 14
	// Set all the relevant regs, this is not run as a task so it should be ok to assume that no interrupts can occur
	// Setting pullup enabled for pin b
	write_8_field(&PORTB,3,2,6); // Set portb 6,7 to pullup enabled
	write_8_field(&PORTB,1,1,4); // Set port b 4 to input pullup enabled
	write_8_field(&PORTE,3,2,2); // Set porte 2,3 to pullup enabled
	EIMSK = (1<<PCIE1) | (1<<PCIE0) | EIMSK;
     244:	8d b3       	in	r24, 0x1d	; 29
     246:	80 6c       	ori	r24, 0xC0	; 192
     248:	8d bb       	out	0x1d, r24	; 29
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     24a:	eb e6       	ldi	r30, 0x6B	; 107
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     250:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     252:	80 83       	st	Z, r24
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     254:	ec e6       	ldi	r30, 0x6C	; 108
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     25a:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     25c:	80 83       	st	Z, r24
	write_8_field(&PCMSK1,0b11,2,6); // Enable intrrupts PCINT15,14
	write_8_field(&PCMSK1,1,1,4);
	
	// int 15,14,12,3,2
	
	INSTALL(self,left_right_handeler,IRQ_PCINT0);
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	6d e4       	ldi	r22, 0x4D	; 77
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	ce 01       	movw	r24, r28
     266:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <install>
	INSTALL(self,upp_down_press_handeler,IRQ_PCINT1);
     26a:	42 e0       	ldi	r20, 0x02	; 2
     26c:	61 e8       	ldi	r22, 0x81	; 129
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	ce 01       	movw	r24, r28
     272:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <install>
	self->super.ownedBy = NULL;
     276:	19 82       	std	Y+1, r1	; 0x01
     278:	18 82       	st	Y, r1
	self->super.wantedBy = NULL;
     27a:	1b 82       	std	Y+3, r1	; 0x03
     27c:	1a 82       	std	Y+2, r1	; 0x02
	self->app = app;
     27e:	1d 83       	std	Y+5, r17	; 0x05
     280:	0c 83       	std	Y+4, r16	; 0x04
	//INSTALL(self,upp_handeler)
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	08 95       	ret

0000028c <init_io>:
     28c:	fc 01       	movw	r30, r24
     28e:	11 82       	std	Z+1, r1	; 0x01
     290:	10 82       	st	Z, r1
     292:	13 82       	std	Z+3, r1	; 0x03
     294:	12 82       	std	Z+2, r1	; 0x02
     296:	75 83       	std	Z+5, r23	; 0x05
     298:	64 83       	std	Z+4, r22	; 0x04
     29a:	08 95       	ret

0000029c <set_high>:
		return;
	write_8_field(&PINE,1,1,offset);
	
}
void set_high(io_object *self,uint8_t offset){
	if (offset >7)
     29c:	68 30       	cpi	r22, 0x08	; 8
     29e:	50 f4       	brcc	.+20     	; 0x2b4 <set_high+0x18>
		return;
	PINE = PINE|(1<<offset);
     2a0:	2c b1       	in	r18, 0x0c	; 12
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <set_high+0x10>
     2a8:	88 0f       	add	r24, r24
     2aa:	99 1f       	adc	r25, r25
     2ac:	6a 95       	dec	r22
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <set_high+0xc>
     2b0:	82 2b       	or	r24, r18
     2b2:	8c b9       	out	0x0c, r24	; 12
     2b4:	08 95       	ret

000002b6 <set_low>:
	
}
void set_low(io_object *self,uint8_t offset){
	if (offset >7)
     2b6:	68 30       	cpi	r22, 0x08	; 8
     2b8:	58 f4       	brcc	.+22     	; 0x2d0 <set_low+0x1a>
		return;
	PINE = PINE&(~(1<<offset));
     2ba:	2c b1       	in	r18, 0x0c	; 12
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <set_low+0x10>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	6a 95       	dec	r22
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <set_low+0xc>
     2ca:	80 95       	com	r24
     2cc:	82 23       	and	r24, r18
     2ce:	8c b9       	out	0x0c, r24	; 12
     2d0:	08 95       	ret

000002d2 <init_lcd>:
/************************************************************************/

void swap_segment(void){
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
     2d2:	e4 ee       	ldi	r30, 0xE4	; 228
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	80 6c       	ori	r24, 0xC0	; 192
     2da:	8e 7e       	andi	r24, 0xEE	; 238
     2dc:	80 83       	st	Z, r24
     2de:	e5 ee       	ldi	r30, 0xE5	; 229
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	87 6b       	ori	r24, 0xB7	; 183
     2e6:	80 83       	st	Z, r24
     2e8:	e6 ee       	ldi	r30, 0xE6	; 230
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	88 78       	andi	r24, 0x88	; 136
     2f0:	87 60       	ori	r24, 0x07	; 7
     2f2:	80 83       	st	Z, r24
     2f4:	e7 ee       	ldi	r30, 0xE7	; 231
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	80 71       	andi	r24, 0x10	; 16
     2fc:	8f 60       	ori	r24, 0x0F	; 15
     2fe:	80 83       	st	Z, r24
     300:	08 95       	ret

00000302 <write_char>:
     302:	cf 93       	push	r28
     304:	c6 2f       	mov	r28, r22
     306:	66 30       	cpi	r22, 0x06	; 6
     308:	71 05       	cpc	r23, r1
     30a:	c0 f5       	brcc	.+112    	; 0x37c <write_char+0x7a>
     30c:	75 95       	asr	r23
     30e:	67 95       	ror	r22
     310:	fb 01       	movw	r30, r22
     312:	e4 51       	subi	r30, 0x14	; 20
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	90 ed       	ldi	r25, 0xD0	; 208
     318:	98 0f       	add	r25, r24
     31a:	9a 30       	cpi	r25, 0x0A	; 10
     31c:	60 f4       	brcc	.+24     	; 0x336 <write_char+0x34>
     31e:	a8 2f       	mov	r26, r24
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	d0 97       	sbiw	r26, 0x30	; 48
     324:	aa 0f       	add	r26, r26
     326:	bb 1f       	adc	r27, r27
     328:	aa 0f       	add	r26, r26
     32a:	bb 1f       	adc	r27, r27
     32c:	a0 50       	subi	r26, 0x00	; 0
     32e:	bf 4f       	sbci	r27, 0xFF	; 255
     330:	4d 91       	ld	r20, X+
     332:	5c 91       	ld	r21, X
     334:	02 c0       	rjmp	.+4      	; 0x33a <write_char+0x38>
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	1b c0       	rjmp	.+54     	; 0x376 <write_char+0x74>
     340:	94 2f       	mov	r25, r20
     342:	9f 70       	andi	r25, 0x0F	; 15
     344:	52 95       	swap	r21
     346:	42 95       	swap	r20
     348:	4f 70       	andi	r20, 0x0F	; 15
     34a:	45 27       	eor	r20, r21
     34c:	5f 70       	andi	r21, 0x0F	; 15
     34e:	45 27       	eor	r20, r21
     350:	c0 fd       	sbrc	r28, 0
     352:	05 c0       	rjmp	.+10     	; 0x35e <write_char+0x5c>
     354:	80 81       	ld	r24, Z
     356:	80 7f       	andi	r24, 0xF0	; 240
     358:	89 2b       	or	r24, r25
     35a:	80 83       	st	Z, r24
     35c:	09 c0       	rjmp	.+18     	; 0x370 <write_char+0x6e>
     35e:	80 81       	ld	r24, Z
     360:	68 2f       	mov	r22, r24
     362:	6f 70       	andi	r22, 0x0F	; 15
     364:	70 e1       	ldi	r23, 0x10	; 16
     366:	97 9f       	mul	r25, r23
     368:	c0 01       	movw	r24, r0
     36a:	11 24       	eor	r1, r1
     36c:	86 2b       	or	r24, r22
     36e:	80 83       	st	Z, r24
     370:	35 96       	adiw	r30, 0x05	; 5
     372:	2f 5f       	subi	r18, 0xFF	; 255
     374:	3f 4f       	sbci	r19, 0xFF	; 255
     376:	24 30       	cpi	r18, 0x04	; 4
     378:	31 05       	cpc	r19, r1
     37a:	14 f3       	brlt	.-60     	; 0x340 <write_char+0x3e>
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <print_at>:
}
void print_at(uint8_t num, uint8_t pos, uint8_t width){
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	18 2f       	mov	r17, r24
     38a:	06 2f       	mov	r16, r22
	for(int i = width-1; i >= 0; i--){
     38c:	c4 2f       	mov	r28, r20
     38e:	d0 e0       	ldi	r29, 0x00	; 0
     390:	21 97       	sbiw	r28, 0x01	; 1
     392:	1a c0       	rjmp	.+52     	; 0x3c8 <print_at+0x48>
		uint8_t temp = num%10;
     394:	9d ec       	ldi	r25, 0xCD	; 205
     396:	19 9f       	mul	r17, r25
     398:	91 2d       	mov	r25, r1
     39a:	11 24       	eor	r1, r1
     39c:	89 2f       	mov	r24, r25
     39e:	86 95       	lsr	r24
     3a0:	86 95       	lsr	r24
     3a2:	86 95       	lsr	r24
     3a4:	88 0f       	add	r24, r24
     3a6:	28 2f       	mov	r18, r24
     3a8:	22 0f       	add	r18, r18
     3aa:	22 0f       	add	r18, r18
     3ac:	82 0f       	add	r24, r18
     3ae:	18 1b       	sub	r17, r24
     3b0:	81 2f       	mov	r24, r17
		num = num/10;
     3b2:	19 2f       	mov	r17, r25
     3b4:	16 95       	lsr	r17
     3b6:	16 95       	lsr	r17
     3b8:	16 95       	lsr	r17
		write_char(temp+48,pos+i);
     3ba:	be 01       	movw	r22, r28
     3bc:	60 0f       	add	r22, r16
     3be:	71 1d       	adc	r23, r1
     3c0:	80 5d       	subi	r24, 0xD0	; 208
     3c2:	0e 94 81 01 	call	0x302	; 0x302 <write_char>
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
}
void print_at(uint8_t num, uint8_t pos, uint8_t width){
	for(int i = width-1; i >= 0; i--){
     3c6:	21 97       	sbiw	r28, 0x01	; 1
     3c8:	dd 23       	and	r29, r29
     3ca:	24 f7       	brge	.-56     	; 0x394 <print_at+0x14>
		uint8_t temp = num%10;
		num = num/10;
		write_char(temp+48,pos+i);
	}
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <main>:
io_object io;
button_object button;

int main(void)
{
	init_io(&io,(uint8_t *)(0x2c));
     3d6:	6c e2       	ldi	r22, 0x2C	; 44
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	82 e5       	ldi	r24, 0x52	; 82
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 46 01 	call	0x28c	; 0x28c <init_io>
	init_pulse_gens(pulse_gens,1,4,&io);
     3e2:	22 e5       	ldi	r18, 0x52	; 82
     3e4:	31 e0       	ldi	r19, 0x01	; 1
     3e6:	44 e0       	ldi	r20, 0x04	; 4
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	8a e3       	ldi	r24, 0x3A	; 58
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 89 02 	call	0x512	; 0x512 <init_pulse_gens>
	init_pulse_gens(pulse_gens+1,3,6,&io);
     3f2:	22 e5       	ldi	r18, 0x52	; 82
     3f4:	31 e0       	ldi	r19, 0x01	; 1
     3f6:	46 e0       	ldi	r20, 0x06	; 6
     3f8:	63 e0       	ldi	r22, 0x03	; 3
     3fa:	83 e4       	ldi	r24, 0x43	; 67
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 89 02 	call	0x512	; 0x512 <init_pulse_gens>
	init_app(&app,pulse_gens,2);
     402:	42 e0       	ldi	r20, 0x02	; 2
     404:	6a e3       	ldi	r22, 0x3A	; 58
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	88 e5       	ldi	r24, 0x58	; 88
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <init_app>
	init_button(&button,&app);
     410:	68 e5       	ldi	r22, 0x58	; 88
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	8c e4       	ldi	r24, 0x4C	; 76
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 16 01 	call	0x22c	; 0x22c <init_button>
	return TINYTIMBER(&app,app_entry,0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	6b ec       	ldi	r22, 0xCB	; 203
     422:	7f e0       	ldi	r23, 0x0F	; 15
     424:	88 e5       	ldi	r24, 0x58	; 88
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <tinytimber>
}
     42c:	08 95       	ret

0000042e <pulse>:
	//write_8(&PORTE,0);
	DDRE = DDRE|0b1010000;
	PORTE = PORTE|0b1010000;
	//write_8_field(&PORTE,1,1,6);
}
void pulse(pulse_gen *self, uint8_t arg){
     42e:	bf 92       	push	r11
     430:	cf 92       	push	r12
     432:	df 92       	push	r13
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
	uint8_t delay = 1000/self->freq;
     442:	6c 81       	ldd	r22, Y+4	; 0x04
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	88 ee       	ldi	r24, 0xE8	; 232
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	0e 94 30 10 	call	0x2060	; 0x2060 <__divmodhi4>
     44e:	b6 2e       	mov	r11, r22
	AFTER(MSEC(delay),self,pulse,0);
     450:	26 2f       	mov	r18, r22
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	ad e7       	ldi	r26, 0x7D	; 125
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	0e 94 44 10 	call	0x2088	; 0x2088 <__umulhisi3>
     45c:	38 2f       	mov	r19, r24
     45e:	29 2f       	mov	r18, r25
     460:	86 2f       	mov	r24, r22
     462:	97 2f       	mov	r25, r23
     464:	a3 2f       	mov	r26, r19
     466:	b2 2f       	mov	r27, r18
     468:	bc 01       	movw	r22, r24
     46a:	cd 01       	movw	r24, r26
     46c:	95 95       	asr	r25
     46e:	87 95       	ror	r24
     470:	77 95       	ror	r23
     472:	67 95       	ror	r22
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	77 95       	ror	r23
     47a:	67 95       	ror	r22
     47c:	c1 2c       	mov	r12, r1
     47e:	d1 2c       	mov	r13, r1
     480:	0f 2e       	mov	r0, r31
     482:	f7 e1       	ldi	r31, 0x17	; 23
     484:	ef 2e       	mov	r14, r31
     486:	f2 e0       	ldi	r31, 0x02	; 2
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	8e 01       	movw	r16, r28
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	a9 01       	movw	r20, r18
     494:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
	SYNC(self->io_reg,set_low,self->bit_offset);
     498:	4d 81       	ldd	r20, Y+5	; 0x05
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	6b e5       	ldi	r22, 0x5B	; 91
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	8e 81       	ldd	r24, Y+6	; 0x06
     4a2:	9f 81       	ldd	r25, Y+7	; 0x07
     4a4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
	AFTER(MSEC(delay/2),self->io_reg,set_high,self->bit_offset);
     4a8:	cd 80       	ldd	r12, Y+5	; 0x05
     4aa:	0e 81       	ldd	r16, Y+6	; 0x06
     4ac:	1f 81       	ldd	r17, Y+7	; 0x07
     4ae:	b6 94       	lsr	r11
     4b0:	2b 2d       	mov	r18, r11
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	ad e7       	ldi	r26, 0x7D	; 125
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	0e 94 44 10 	call	0x2088	; 0x2088 <__umulhisi3>
     4bc:	38 2f       	mov	r19, r24
     4be:	29 2f       	mov	r18, r25
     4c0:	d1 2c       	mov	r13, r1
     4c2:	86 2f       	mov	r24, r22
     4c4:	97 2f       	mov	r25, r23
     4c6:	a3 2f       	mov	r26, r19
     4c8:	b2 2f       	mov	r27, r18
     4ca:	bc 01       	movw	r22, r24
     4cc:	cd 01       	movw	r24, r26
     4ce:	95 95       	asr	r25
     4d0:	87 95       	ror	r24
     4d2:	77 95       	ror	r23
     4d4:	67 95       	ror	r22
     4d6:	95 95       	asr	r25
     4d8:	87 95       	ror	r24
     4da:	77 95       	ror	r23
     4dc:	67 95       	ror	r22
     4de:	0f 2e       	mov	r0, r31
     4e0:	fe e4       	ldi	r31, 0x4E	; 78
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	ff 2e       	mov	r15, r31
     4e8:	f0 2d       	mov	r31, r0
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	a9 01       	movw	r20, r18
     4f0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
	if(self->running != 1)
     4f4:	88 85       	ldd	r24, Y+8	; 0x08
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	11 f0       	breq	.+4      	; 0x4fe <pulse+0xd0>
		self->running = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	88 87       	std	Y+8, r24	; 0x08
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	cf 90       	pop	r12
     50e:	bf 90       	pop	r11
     510:	08 95       	ret

00000512 <init_pulse_gens>:
 *
 * Created: 2022-02-22 14:27:18
 *  Author: ivarj
 */ 
#include "../include/puls_gen.h"
void init_pulse_gens(pulse_gen * self, uint8_t freq, uint8_t bit_offset,io_object * io_reg){
     512:	fc 01       	movw	r30, r24
	// set the first pulsgen
	self->super.ownedBy = NULL;
     514:	11 82       	std	Z+1, r1	; 0x01
     516:	10 82       	st	Z, r1
	self->super.wantedBy = NULL;
     518:	13 82       	std	Z+3, r1	; 0x03
     51a:	12 82       	std	Z+2, r1	; 0x02
	self->freq = freq;
     51c:	64 83       	std	Z+4, r22	; 0x04
	self->bit_offset = bit_offset;
     51e:	45 83       	std	Z+5, r20	; 0x05
	self->io_reg =  io_reg;
     520:	37 83       	std	Z+7, r19	; 0x07
     522:	26 83       	std	Z+6, r18	; 0x06
	self->running = 0;
     524:	10 86       	std	Z+8, r1	; 0x08
	//write_8(&PORTE,0);
	DDRE = DDRE|0b1010000;
     526:	8d b1       	in	r24, 0x0d	; 13
     528:	80 65       	ori	r24, 0x50	; 80
     52a:	8d b9       	out	0x0d, r24	; 13
	PORTE = PORTE|0b1010000;
     52c:	8e b1       	in	r24, 0x0e	; 14
     52e:	80 65       	ori	r24, 0x50	; 80
     530:	8e b9       	out	0x0e, r24	; 14
     532:	08 95       	ret

00000534 <change_freq>:
	if(self->running != 1)
		self->running = 1;
}
// Gets applied in the next cycle
void change_freq(pulse_gen *self,uint8_t freq){
	self->freq = freq;
     534:	fc 01       	movw	r30, r24
     536:	64 83       	std	Z+4, r22	; 0x04
     538:	08 95       	ret

0000053a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	00 d0       	rcall	.+0      	; 0x540 <initialize+0x6>
     540:	00 d0       	rcall	.+0      	; 0x542 <initialize+0x8>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	18 c0       	rjmp	.+48     	; 0x57c <initialize+0x42>
     54c:	ac 01       	movw	r20, r24
     54e:	4f 5f       	subi	r20, 0xFF	; 255
     550:	5f 4f       	sbci	r21, 0xFF	; 255
     552:	9a 01       	movw	r18, r20
     554:	22 95       	swap	r18
     556:	32 95       	swap	r19
     558:	30 7f       	andi	r19, 0xF0	; 240
     55a:	32 27       	eor	r19, r18
     55c:	20 7f       	andi	r18, 0xF0	; 240
     55e:	32 27       	eor	r19, r18
     560:	24 5c       	subi	r18, 0xC4	; 196
     562:	3d 4f       	sbci	r19, 0xFD	; 253
     564:	82 95       	swap	r24
     566:	92 95       	swap	r25
     568:	90 7f       	andi	r25, 0xF0	; 240
     56a:	98 27       	eor	r25, r24
     56c:	80 7f       	andi	r24, 0xF0	; 240
     56e:	98 27       	eor	r25, r24
     570:	fc 01       	movw	r30, r24
     572:	e4 5c       	subi	r30, 0xC4	; 196
     574:	fd 4f       	sbci	r31, 0xFD	; 253
     576:	31 83       	std	Z+1, r19	; 0x01
     578:	20 83       	st	Z, r18
     57a:	ca 01       	movw	r24, r20
     57c:	8e 30       	cpi	r24, 0x0E	; 14
     57e:	91 05       	cpc	r25, r1
     580:	2c f3       	brlt	.-54     	; 0x54c <initialize+0x12>
     582:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <messages+0xe1>
     586:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <messages+0xe0>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	15 c0       	rjmp	.+42     	; 0x5ba <initialize+0x80>
     590:	ac 01       	movw	r20, r24
     592:	4f 5f       	subi	r20, 0xFF	; 255
     594:	5f 4f       	sbci	r21, 0xFF	; 255
     596:	6d e1       	ldi	r22, 0x1D	; 29
     598:	64 9f       	mul	r22, r20
     59a:	90 01       	movw	r18, r0
     59c:	65 9f       	mul	r22, r21
     59e:	30 0d       	add	r19, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	29 57       	subi	r18, 0x79	; 121
     5a4:	3e 4f       	sbci	r19, 0xFE	; 254
     5a6:	68 9f       	mul	r22, r24
     5a8:	f0 01       	movw	r30, r0
     5aa:	69 9f       	mul	r22, r25
     5ac:	f0 0d       	add	r31, r0
     5ae:	11 24       	eor	r1, r1
     5b0:	e9 57       	subi	r30, 0x79	; 121
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	31 83       	std	Z+1, r19	; 0x01
     5b6:	20 83       	st	Z, r18
     5b8:	ca 01       	movw	r24, r20
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	91 05       	cpc	r25, r1
     5be:	44 f3       	brlt	.-48     	; 0x590 <initialize+0x56>
     5c0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <threads+0x58>
     5c4:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <threads+0x57>
     5c8:	1a 82       	std	Y+2, r1	; 0x02
     5ca:	19 82       	std	Y+1, r1	; 0x01
     5cc:	32 c0       	rjmp	.+100    	; 0x632 <initialize+0xf8>
     5ce:	2d e1       	ldi	r18, 0x1D	; 29
     5d0:	49 81       	ldd	r20, Y+1	; 0x01
     5d2:	5a 81       	ldd	r21, Y+2	; 0x02
     5d4:	24 9f       	mul	r18, r20
     5d6:	c0 01       	movw	r24, r0
     5d8:	25 9f       	mul	r18, r21
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	fc 01       	movw	r30, r24
     5e0:	e3 57       	subi	r30, 0x73	; 115
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	fc 83       	std	Y+4, r31	; 0x04
     5e6:	eb 83       	std	Y+3, r30	; 0x03
     5e8:	cf 01       	movw	r24, r30
     5ea:	0e 94 67 10 	call	0x20ce	; 0x20ce <setjmp>
     5ee:	20 e6       	ldi	r18, 0x60	; 96
     5f0:	49 81       	ldd	r20, Y+1	; 0x01
     5f2:	5a 81       	ldd	r21, Y+2	; 0x02
     5f4:	24 9f       	mul	r18, r20
     5f6:	c0 01       	movw	r24, r0
     5f8:	25 9f       	mul	r18, r21
     5fa:	90 0d       	add	r25, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	88 57       	subi	r24, 0x78	; 120
     600:	9c 4f       	sbci	r25, 0xFC	; 252
     602:	eb 81       	ldd	r30, Y+3	; 0x03
     604:	fc 81       	ldd	r31, Y+4	; 0x04
     606:	91 8b       	std	Z+17, r25	; 0x11
     608:	80 8b       	std	Z+16, r24	; 0x10
     60a:	93 8b       	std	Z+19, r25	; 0x13
     60c:	82 8b       	std	Z+18, r24	; 0x12
     60e:	89 e7       	ldi	r24, 0x79	; 121
     610:	9e e0       	ldi	r25, 0x0E	; 14
     612:	96 8b       	std	Z+22, r25	; 0x16
     614:	85 8b       	std	Z+21, r24	; 0x15
     616:	8d e1       	ldi	r24, 0x1D	; 29
     618:	84 9f       	mul	r24, r20
     61a:	f0 01       	movw	r30, r0
     61c:	85 9f       	mul	r24, r21
     61e:	f0 0d       	add	r31, r0
     620:	11 24       	eor	r1, r1
     622:	e9 57       	subi	r30, 0x79	; 121
     624:	fe 4f       	sbci	r31, 0xFE	; 254
     626:	15 82       	std	Z+5, r1	; 0x05
     628:	14 82       	std	Z+4, r1	; 0x04
     62a:	4f 5f       	subi	r20, 0xFF	; 255
     62c:	5f 4f       	sbci	r21, 0xFF	; 255
     62e:	5a 83       	std	Y+2, r21	; 0x02
     630:	49 83       	std	Y+1, r20	; 0x01
     632:	29 81       	ldd	r18, Y+1	; 0x01
     634:	3a 81       	ldd	r19, Y+2	; 0x02
     636:	24 30       	cpi	r18, 0x04	; 4
     638:	31 05       	cpc	r19, r1
     63a:	4c f2       	brlt	.-110    	; 0x5ce <initialize+0x94>
     63c:	ef e1       	ldi	r30, 0x1F	; 31
     63e:	f2 e0       	ldi	r31, 0x02	; 2
     640:	11 82       	std	Z+1, r1	; 0x01
     642:	10 82       	st	Z, r1
     644:	15 82       	std	Z+5, r1	; 0x05
     646:	14 82       	std	Z+4, r1	; 0x04
     648:	13 82       	std	Z+3, r1	; 0x03
     64a:	12 82       	std	Z+2, r1	; 0x02
     64c:	e1 e6       	ldi	r30, 0x61	; 97
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 e8       	ldi	r24, 0x80	; 128
     652:	80 83       	st	Z, r24
     654:	10 82       	st	Z, r1
     656:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     65a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <dispatch>:
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <dispatch+0x6>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
     68a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
     68e:	06 96       	adiw	r24, 0x06	; 6
     690:	0e 94 67 10 	call	0x20ce	; 0x20ce <setjmp>
     694:	89 2b       	or	r24, r25
     696:	59 f4       	brne	.+22     	; 0x6ae <dispatch+0x36>
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
     6a0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	06 96       	adiw	r24, 0x06	; 6
     6aa:	0e 94 87 10 	call	0x210e	; 0x210e <longjmp>
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <enqueueByDeadline>:
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	eb 01       	movw	r28, r22
     6c6:	e8 81       	ld	r30, Y
     6c8:	f9 81       	ldd	r31, Y+1	; 0x01
     6ca:	c0 e0       	ldi	r28, 0x00	; 0
     6cc:	d0 e0       	ldi	r29, 0x00	; 0
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <enqueueByDeadline+0x20>
     6d0:	ef 01       	movw	r28, r30
     6d2:	01 90       	ld	r0, Z+
     6d4:	f0 81       	ld	r31, Z
     6d6:	e0 2d       	mov	r30, r0
     6d8:	30 97       	sbiw	r30, 0x00	; 0
     6da:	79 f0       	breq	.+30     	; 0x6fa <enqueueByDeadline+0x42>
     6dc:	06 81       	ldd	r16, Z+6	; 0x06
     6de:	17 81       	ldd	r17, Z+7	; 0x07
     6e0:	20 85       	ldd	r18, Z+8	; 0x08
     6e2:	31 85       	ldd	r19, Z+9	; 0x09
     6e4:	16 96       	adiw	r26, 0x06	; 6
     6e6:	4d 91       	ld	r20, X+
     6e8:	5d 91       	ld	r21, X+
     6ea:	6d 91       	ld	r22, X+
     6ec:	7c 91       	ld	r23, X
     6ee:	19 97       	sbiw	r26, 0x09	; 9
     6f0:	40 17       	cp	r20, r16
     6f2:	51 07       	cpc	r21, r17
     6f4:	62 07       	cpc	r22, r18
     6f6:	73 07       	cpc	r23, r19
     6f8:	5c f7       	brge	.-42     	; 0x6d0 <enqueueByDeadline+0x18>
     6fa:	11 96       	adiw	r26, 0x01	; 1
     6fc:	fc 93       	st	X, r31
     6fe:	ee 93       	st	-X, r30
     700:	20 97       	sbiw	r28, 0x00	; 0
     702:	21 f4       	brne	.+8      	; 0x70c <enqueueByDeadline+0x54>
     704:	fc 01       	movw	r30, r24
     706:	b1 83       	std	Z+1, r27	; 0x01
     708:	a0 83       	st	Z, r26
     70a:	02 c0       	rjmp	.+4      	; 0x710 <enqueueByDeadline+0x58>
     70c:	b9 83       	std	Y+1, r27	; 0x01
     70e:	a8 83       	st	Y, r26
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <enqueueByBaseline>:
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	eb 01       	movw	r28, r22
     728:	e8 81       	ld	r30, Y
     72a:	f9 81       	ldd	r31, Y+1	; 0x01
     72c:	c0 e0       	ldi	r28, 0x00	; 0
     72e:	d0 e0       	ldi	r29, 0x00	; 0
     730:	04 c0       	rjmp	.+8      	; 0x73a <enqueueByBaseline+0x20>
     732:	ef 01       	movw	r28, r30
     734:	01 90       	ld	r0, Z+
     736:	f0 81       	ld	r31, Z
     738:	e0 2d       	mov	r30, r0
     73a:	30 97       	sbiw	r30, 0x00	; 0
     73c:	79 f0       	breq	.+30     	; 0x75c <enqueueByBaseline+0x42>
     73e:	02 81       	ldd	r16, Z+2	; 0x02
     740:	13 81       	ldd	r17, Z+3	; 0x03
     742:	24 81       	ldd	r18, Z+4	; 0x04
     744:	35 81       	ldd	r19, Z+5	; 0x05
     746:	12 96       	adiw	r26, 0x02	; 2
     748:	4d 91       	ld	r20, X+
     74a:	5d 91       	ld	r21, X+
     74c:	6d 91       	ld	r22, X+
     74e:	7c 91       	ld	r23, X
     750:	15 97       	sbiw	r26, 0x05	; 5
     752:	40 17       	cp	r20, r16
     754:	51 07       	cpc	r21, r17
     756:	62 07       	cpc	r22, r18
     758:	73 07       	cpc	r23, r19
     75a:	5c f7       	brge	.-42     	; 0x732 <enqueueByBaseline+0x18>
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	fc 93       	st	X, r31
     760:	ee 93       	st	-X, r30
     762:	20 97       	sbiw	r28, 0x00	; 0
     764:	21 f4       	brne	.+8      	; 0x76e <enqueueByBaseline+0x54>
     766:	fc 01       	movw	r30, r24
     768:	b1 83       	std	Z+1, r27	; 0x01
     76a:	a0 83       	st	Z, r26
     76c:	02 c0       	rjmp	.+4      	; 0x772 <enqueueByBaseline+0x58>
     76e:	b9 83       	std	Y+1, r27	; 0x01
     770:	a8 83       	st	Y, r26
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	0f 91       	pop	r16
     77a:	08 95       	ret

0000077c <dequeue>:
     77c:	dc 01       	movw	r26, r24
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	11 97       	sbiw	r26, 0x01	; 1
     784:	30 97       	sbiw	r30, 0x00	; 0
     786:	59 f4       	brne	.+22     	; 0x79e <dequeue+0x22>
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     78e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     792:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	83 bf       	out	0x33, r24	; 51
     79a:	88 95       	sleep
     79c:	fc cf       	rjmp	.-8      	; 0x796 <dequeue+0x1a>
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	2d 93       	st	X+, r18
     7a4:	3c 93       	st	X, r19
     7a6:	cf 01       	movw	r24, r30
     7a8:	08 95       	ret

000007aa <insert>:
     7aa:	fb 01       	movw	r30, r22
     7ac:	20 81       	ld	r18, Z
     7ae:	31 81       	ldd	r19, Z+1	; 0x01
     7b0:	fc 01       	movw	r30, r24
     7b2:	31 83       	std	Z+1, r19	; 0x01
     7b4:	20 83       	st	Z, r18
     7b6:	fb 01       	movw	r30, r22
     7b8:	91 83       	std	Z+1, r25	; 0x01
     7ba:	80 83       	st	Z, r24
     7bc:	08 95       	ret

000007be <push>:
     7be:	fb 01       	movw	r30, r22
     7c0:	20 81       	ld	r18, Z
     7c2:	31 81       	ldd	r19, Z+1	; 0x01
     7c4:	fc 01       	movw	r30, r24
     7c6:	31 83       	std	Z+1, r19	; 0x01
     7c8:	20 83       	st	Z, r18
     7ca:	fb 01       	movw	r30, r22
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
     7d0:	08 95       	ret

000007d2 <pop>:
     7d2:	dc 01       	movw	r26, r24
     7d4:	ed 91       	ld	r30, X+
     7d6:	fc 91       	ld	r31, X
     7d8:	11 97       	sbiw	r26, 0x01	; 1
     7da:	20 81       	ld	r18, Z
     7dc:	31 81       	ldd	r19, Z+1	; 0x01
     7de:	2d 93       	st	X+, r18
     7e0:	3c 93       	st	X, r19
     7e2:	cf 01       	movw	r24, r30
     7e4:	08 95       	ret

000007e6 <schedule>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <activeStack>
     7ee:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <activeStack+0x1>
     7f2:	c2 81       	ldd	r28, Z+2	; 0x02
     7f4:	d3 81       	ldd	r29, Z+3	; 0x03
     7f6:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <msgQ>
     7fa:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <msgQ+0x1>
     7fe:	30 97       	sbiw	r30, 0x00	; 0
     800:	19 f1       	breq	.+70     	; 0x848 <schedule+0x62>
     802:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <threadPool>
     806:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <threadPool+0x1>
     80a:	89 2b       	or	r24, r25
     80c:	e9 f0       	breq	.+58     	; 0x848 <schedule+0x62>
     80e:	20 97       	sbiw	r28, 0x00	; 0
     810:	69 f0       	breq	.+26     	; 0x82c <schedule+0x46>
     812:	86 81       	ldd	r24, Z+6	; 0x06
     814:	97 81       	ldd	r25, Z+7	; 0x07
     816:	a0 85       	ldd	r26, Z+8	; 0x08
     818:	b1 85       	ldd	r27, Z+9	; 0x09
     81a:	4e 81       	ldd	r20, Y+6	; 0x06
     81c:	5f 81       	ldd	r21, Y+7	; 0x07
     81e:	68 85       	ldd	r22, Y+8	; 0x08
     820:	79 85       	ldd	r23, Y+9	; 0x09
     822:	84 1b       	sub	r24, r20
     824:	95 0b       	sbc	r25, r21
     826:	a6 0b       	sbc	r26, r22
     828:	b7 0b       	sbc	r27, r23
     82a:	72 f4       	brpl	.+28     	; 0x848 <schedule+0x62>
     82c:	8c e2       	ldi	r24, 0x2C	; 44
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pop>
     834:	6a e2       	ldi	r22, 0x2A	; 42
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	0e 94 df 03 	call	0x7be	; 0x7be <push>
     83c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <activeStack>
     840:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <activeStack+0x1>
     844:	0e 94 3c 03 	call	0x678	; 0x678 <dispatch>
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <__vector_1>:
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
     874:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     878:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     87c:	ac 01       	movw	r20, r24
     87e:	09 2e       	mov	r0, r25
     880:	00 0c       	add	r0, r0
     882:	66 0b       	sbc	r22, r22
     884:	77 0b       	sbc	r23, r23
     886:	9a 01       	movw	r18, r20
     888:	11 27       	eor	r17, r17
     88a:	00 27       	eor	r16, r16
     88c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     890:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	40 2b       	or	r20, r16
     89a:	51 2b       	or	r21, r17
     89c:	62 2b       	or	r22, r18
     89e:	73 2b       	or	r23, r19
     8a0:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     8a4:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     8a8:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     8ac:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     8b0:	b0 9b       	sbis	0x16, 0	; 22
     8b2:	1a c0       	rjmp	.+52     	; 0x8e8 <__vector_1+0x9a>
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	09 2e       	mov	r0, r25
     8b8:	00 0c       	add	r0, r0
     8ba:	aa 0b       	sbc	r26, r26
     8bc:	bb 0b       	sbc	r27, r27
     8be:	bc 01       	movw	r22, r24
     8c0:	55 27       	eor	r21, r21
     8c2:	44 27       	eor	r20, r20
     8c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     8c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	84 2b       	or	r24, r20
     8d2:	95 2b       	or	r25, r21
     8d4:	a6 2b       	or	r26, r22
     8d6:	b7 2b       	or	r27, r23
     8d8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     8dc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     8e0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     8e4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     8e8:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <mtable>
     8ec:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <mtable+0x1>
     8f0:	30 97       	sbiw	r30, 0x00	; 0
     8f2:	39 f0       	breq	.+14     	; 0x902 <__vector_1+0xb4>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <otable>
     8fc:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <otable+0x1>
     900:	09 95       	icall
     902:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     906:	ff 91       	pop	r31
     908:	ef 91       	pop	r30
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	1f 90       	pop	r1
     92a:	18 95       	reti

0000092c <__vector_2>:
     92c:	1f 92       	push	r1
     92e:	0f 92       	push	r0
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	0f 92       	push	r0
     934:	11 24       	eor	r1, r1
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
     952:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     956:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     95a:	ac 01       	movw	r20, r24
     95c:	09 2e       	mov	r0, r25
     95e:	00 0c       	add	r0, r0
     960:	66 0b       	sbc	r22, r22
     962:	77 0b       	sbc	r23, r23
     964:	9a 01       	movw	r18, r20
     966:	11 27       	eor	r17, r17
     968:	00 27       	eor	r16, r16
     96a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     96e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	40 2b       	or	r20, r16
     978:	51 2b       	or	r21, r17
     97a:	62 2b       	or	r22, r18
     97c:	73 2b       	or	r23, r19
     97e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     982:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     986:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     98a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     98e:	b0 9b       	sbis	0x16, 0	; 22
     990:	1a c0       	rjmp	.+52     	; 0x9c6 <__vector_2+0x9a>
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	09 2e       	mov	r0, r25
     996:	00 0c       	add	r0, r0
     998:	aa 0b       	sbc	r26, r26
     99a:	bb 0b       	sbc	r27, r27
     99c:	bc 01       	movw	r22, r24
     99e:	55 27       	eor	r21, r21
     9a0:	44 27       	eor	r20, r20
     9a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	84 2b       	or	r24, r20
     9b0:	95 2b       	or	r25, r21
     9b2:	a6 2b       	or	r26, r22
     9b4:	b7 2b       	or	r27, r23
     9b6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     9ba:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     9be:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     9c2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     9c6:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <mtable+0x2>
     9ca:	f0 91 fe 01 	lds	r31, 0x01FE	; 0x8001fe <mtable+0x3>
     9ce:	30 97       	sbiw	r30, 0x00	; 0
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <__vector_2+0xb4>
     9d2:	61 e0       	ldi	r22, 0x01	; 1
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <otable+0x2>
     9da:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <otable+0x3>
     9de:	09 95       	icall
     9e0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	0f 90       	pop	r0
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	0f 90       	pop	r0
     a06:	1f 90       	pop	r1
     a08:	18 95       	reti

00000a0a <__vector_3>:
     a0a:	1f 92       	push	r1
     a0c:	0f 92       	push	r0
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	0f 92       	push	r0
     a12:	11 24       	eor	r1, r1
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	2f 93       	push	r18
     a1a:	3f 93       	push	r19
     a1c:	4f 93       	push	r20
     a1e:	5f 93       	push	r21
     a20:	6f 93       	push	r22
     a22:	7f 93       	push	r23
     a24:	8f 93       	push	r24
     a26:	9f 93       	push	r25
     a28:	af 93       	push	r26
     a2a:	bf 93       	push	r27
     a2c:	ef 93       	push	r30
     a2e:	ff 93       	push	r31
     a30:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     a34:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     a38:	ac 01       	movw	r20, r24
     a3a:	09 2e       	mov	r0, r25
     a3c:	00 0c       	add	r0, r0
     a3e:	66 0b       	sbc	r22, r22
     a40:	77 0b       	sbc	r23, r23
     a42:	9a 01       	movw	r18, r20
     a44:	11 27       	eor	r17, r17
     a46:	00 27       	eor	r16, r16
     a48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	40 2b       	or	r20, r16
     a56:	51 2b       	or	r21, r17
     a58:	62 2b       	or	r22, r18
     a5a:	73 2b       	or	r23, r19
     a5c:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     a60:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     a64:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     a68:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     a6c:	b0 9b       	sbis	0x16, 0	; 22
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <__vector_3+0x9a>
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	09 2e       	mov	r0, r25
     a74:	00 0c       	add	r0, r0
     a76:	aa 0b       	sbc	r26, r26
     a78:	bb 0b       	sbc	r27, r27
     a7a:	bc 01       	movw	r22, r24
     a7c:	55 27       	eor	r21, r21
     a7e:	44 27       	eor	r20, r20
     a80:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a84:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	84 2b       	or	r24, r20
     a8e:	95 2b       	or	r25, r21
     a90:	a6 2b       	or	r26, r22
     a92:	b7 2b       	or	r27, r23
     a94:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     a98:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     a9c:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     aa0:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     aa4:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <mtable+0x4>
     aa8:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <mtable+0x5>
     aac:	30 97       	sbiw	r30, 0x00	; 0
     aae:	39 f0       	breq	.+14     	; 0xabe <__vector_3+0xb4>
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <otable+0x4>
     ab8:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <otable+0x5>
     abc:	09 95       	icall
     abe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     ac2:	ff 91       	pop	r31
     ac4:	ef 91       	pop	r30
     ac6:	bf 91       	pop	r27
     ac8:	af 91       	pop	r26
     aca:	9f 91       	pop	r25
     acc:	8f 91       	pop	r24
     ace:	7f 91       	pop	r23
     ad0:	6f 91       	pop	r22
     ad2:	5f 91       	pop	r21
     ad4:	4f 91       	pop	r20
     ad6:	3f 91       	pop	r19
     ad8:	2f 91       	pop	r18
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_4>:
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     b12:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     b16:	ac 01       	movw	r20, r24
     b18:	09 2e       	mov	r0, r25
     b1a:	00 0c       	add	r0, r0
     b1c:	66 0b       	sbc	r22, r22
     b1e:	77 0b       	sbc	r23, r23
     b20:	9a 01       	movw	r18, r20
     b22:	11 27       	eor	r17, r17
     b24:	00 27       	eor	r16, r16
     b26:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b2a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	40 2b       	or	r20, r16
     b34:	51 2b       	or	r21, r17
     b36:	62 2b       	or	r22, r18
     b38:	73 2b       	or	r23, r19
     b3a:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     b3e:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     b42:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     b46:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     b4a:	b0 9b       	sbis	0x16, 0	; 22
     b4c:	1a c0       	rjmp	.+52     	; 0xb82 <__vector_4+0x9a>
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	09 2e       	mov	r0, r25
     b52:	00 0c       	add	r0, r0
     b54:	aa 0b       	sbc	r26, r26
     b56:	bb 0b       	sbc	r27, r27
     b58:	bc 01       	movw	r22, r24
     b5a:	55 27       	eor	r21, r21
     b5c:	44 27       	eor	r20, r20
     b5e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b62:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	84 2b       	or	r24, r20
     b6c:	95 2b       	or	r25, r21
     b6e:	a6 2b       	or	r26, r22
     b70:	b7 2b       	or	r27, r23
     b72:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     b76:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     b7a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     b7e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     b82:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <mtable+0x6>
     b86:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <mtable+0x7>
     b8a:	30 97       	sbiw	r30, 0x00	; 0
     b8c:	39 f0       	breq	.+14     	; 0xb9c <__vector_4+0xb4>
     b8e:	63 e0       	ldi	r22, 0x03	; 3
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <otable+0x6>
     b96:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <otable+0x7>
     b9a:	09 95       	icall
     b9c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     ba0:	ff 91       	pop	r31
     ba2:	ef 91       	pop	r30
     ba4:	bf 91       	pop	r27
     ba6:	af 91       	pop	r26
     ba8:	9f 91       	pop	r25
     baa:	8f 91       	pop	r24
     bac:	7f 91       	pop	r23
     bae:	6f 91       	pop	r22
     bb0:	5f 91       	pop	r21
     bb2:	4f 91       	pop	r20
     bb4:	3f 91       	pop	r19
     bb6:	2f 91       	pop	r18
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_5>:
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	2f 93       	push	r18
     bd6:	3f 93       	push	r19
     bd8:	4f 93       	push	r20
     bda:	5f 93       	push	r21
     bdc:	6f 93       	push	r22
     bde:	7f 93       	push	r23
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
     bec:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     bf0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     bf4:	ac 01       	movw	r20, r24
     bf6:	09 2e       	mov	r0, r25
     bf8:	00 0c       	add	r0, r0
     bfa:	66 0b       	sbc	r22, r22
     bfc:	77 0b       	sbc	r23, r23
     bfe:	9a 01       	movw	r18, r20
     c00:	11 27       	eor	r17, r17
     c02:	00 27       	eor	r16, r16
     c04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	40 2b       	or	r20, r16
     c12:	51 2b       	or	r21, r17
     c14:	62 2b       	or	r22, r18
     c16:	73 2b       	or	r23, r19
     c18:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     c1c:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     c20:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     c24:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     c28:	b0 9b       	sbis	0x16, 0	; 22
     c2a:	1a c0       	rjmp	.+52     	; 0xc60 <__vector_5+0x9a>
     c2c:	01 96       	adiw	r24, 0x01	; 1
     c2e:	09 2e       	mov	r0, r25
     c30:	00 0c       	add	r0, r0
     c32:	aa 0b       	sbc	r26, r26
     c34:	bb 0b       	sbc	r27, r27
     c36:	bc 01       	movw	r22, r24
     c38:	55 27       	eor	r21, r21
     c3a:	44 27       	eor	r20, r20
     c3c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c40:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	84 2b       	or	r24, r20
     c4a:	95 2b       	or	r25, r21
     c4c:	a6 2b       	or	r26, r22
     c4e:	b7 2b       	or	r27, r23
     c50:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     c54:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     c58:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     c5c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     c60:	e0 91 03 02 	lds	r30, 0x0203	; 0x800203 <mtable+0x8>
     c64:	f0 91 04 02 	lds	r31, 0x0204	; 0x800204 <mtable+0x9>
     c68:	30 97       	sbiw	r30, 0x00	; 0
     c6a:	39 f0       	breq	.+14     	; 0xc7a <__vector_5+0xb4>
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <otable+0x8>
     c74:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <otable+0x9>
     c78:	09 95       	icall
     c7a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <__vector_10>:
     ca4:	1f 92       	push	r1
     ca6:	0f 92       	push	r0
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	0f 92       	push	r0
     cac:	11 24       	eor	r1, r1
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	4f 93       	push	r20
     cb8:	5f 93       	push	r21
     cba:	6f 93       	push	r22
     cbc:	7f 93       	push	r23
     cbe:	8f 93       	push	r24
     cc0:	9f 93       	push	r25
     cc2:	af 93       	push	r26
     cc4:	bf 93       	push	r27
     cc6:	ef 93       	push	r30
     cc8:	ff 93       	push	r31
     cca:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     cce:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     cd2:	ac 01       	movw	r20, r24
     cd4:	09 2e       	mov	r0, r25
     cd6:	00 0c       	add	r0, r0
     cd8:	66 0b       	sbc	r22, r22
     cda:	77 0b       	sbc	r23, r23
     cdc:	9a 01       	movw	r18, r20
     cde:	11 27       	eor	r17, r17
     ce0:	00 27       	eor	r16, r16
     ce2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ce6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	40 2b       	or	r20, r16
     cf0:	51 2b       	or	r21, r17
     cf2:	62 2b       	or	r22, r18
     cf4:	73 2b       	or	r23, r19
     cf6:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     cfa:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     cfe:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     d02:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     d06:	b0 9b       	sbis	0x16, 0	; 22
     d08:	1a c0       	rjmp	.+52     	; 0xd3e <__vector_10+0x9a>
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	09 2e       	mov	r0, r25
     d0e:	00 0c       	add	r0, r0
     d10:	aa 0b       	sbc	r26, r26
     d12:	bb 0b       	sbc	r27, r27
     d14:	bc 01       	movw	r22, r24
     d16:	55 27       	eor	r21, r21
     d18:	44 27       	eor	r20, r20
     d1a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d1e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	84 2b       	or	r24, r20
     d28:	95 2b       	or	r25, r21
     d2a:	a6 2b       	or	r26, r22
     d2c:	b7 2b       	or	r27, r23
     d2e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     d32:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     d36:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     d3a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     d3e:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <mtable+0xa>
     d42:	f0 91 06 02 	lds	r31, 0x0206	; 0x800206 <mtable+0xb>
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	39 f0       	breq	.+14     	; 0xd58 <__vector_10+0xb4>
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <otable+0xa>
     d52:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <otable+0xb>
     d56:	09 95       	icall
     d58:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	bf 91       	pop	r27
     d62:	af 91       	pop	r26
     d64:	9f 91       	pop	r25
     d66:	8f 91       	pop	r24
     d68:	7f 91       	pop	r23
     d6a:	6f 91       	pop	r22
     d6c:	5f 91       	pop	r21
     d6e:	4f 91       	pop	r20
     d70:	3f 91       	pop	r19
     d72:	2f 91       	pop	r18
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f 90       	pop	r0
     d7e:	1f 90       	pop	r1
     d80:	18 95       	reti

00000d82 <__vector_11>:
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
     da8:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     dac:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     db0:	ac 01       	movw	r20, r24
     db2:	09 2e       	mov	r0, r25
     db4:	00 0c       	add	r0, r0
     db6:	66 0b       	sbc	r22, r22
     db8:	77 0b       	sbc	r23, r23
     dba:	9a 01       	movw	r18, r20
     dbc:	11 27       	eor	r17, r17
     dbe:	00 27       	eor	r16, r16
     dc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	40 2b       	or	r20, r16
     dce:	51 2b       	or	r21, r17
     dd0:	62 2b       	or	r22, r18
     dd2:	73 2b       	or	r23, r19
     dd4:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     dd8:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     ddc:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     de0:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     de4:	b0 9b       	sbis	0x16, 0	; 22
     de6:	1a c0       	rjmp	.+52     	; 0xe1c <__vector_11+0x9a>
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	09 2e       	mov	r0, r25
     dec:	00 0c       	add	r0, r0
     dee:	aa 0b       	sbc	r26, r26
     df0:	bb 0b       	sbc	r27, r27
     df2:	bc 01       	movw	r22, r24
     df4:	55 27       	eor	r21, r21
     df6:	44 27       	eor	r20, r20
     df8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dfc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e00:	a0 e0       	ldi	r26, 0x00	; 0
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
     e08:	a6 2b       	or	r26, r22
     e0a:	b7 2b       	or	r27, r23
     e0c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     e10:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     e14:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     e18:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     e1c:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <mtable+0xc>
     e20:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <mtable+0xd>
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	39 f0       	breq	.+14     	; 0xe36 <__vector_11+0xb4>
     e28:	66 e0       	ldi	r22, 0x06	; 6
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <otable+0xc>
     e30:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <otable+0xd>
     e34:	09 95       	icall
     e36:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_12>:
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     e8a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     e8e:	ac 01       	movw	r20, r24
     e90:	09 2e       	mov	r0, r25
     e92:	00 0c       	add	r0, r0
     e94:	66 0b       	sbc	r22, r22
     e96:	77 0b       	sbc	r23, r23
     e98:	9a 01       	movw	r18, r20
     e9a:	11 27       	eor	r17, r17
     e9c:	00 27       	eor	r16, r16
     e9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ea2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	40 2b       	or	r20, r16
     eac:	51 2b       	or	r21, r17
     eae:	62 2b       	or	r22, r18
     eb0:	73 2b       	or	r23, r19
     eb2:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     eb6:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     eba:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     ebe:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     ec2:	b0 9b       	sbis	0x16, 0	; 22
     ec4:	1a c0       	rjmp	.+52     	; 0xefa <__vector_12+0x9a>
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	09 2e       	mov	r0, r25
     eca:	00 0c       	add	r0, r0
     ecc:	aa 0b       	sbc	r26, r26
     ece:	bb 0b       	sbc	r27, r27
     ed0:	bc 01       	movw	r22, r24
     ed2:	55 27       	eor	r21, r21
     ed4:	44 27       	eor	r20, r20
     ed6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eda:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	84 2b       	or	r24, r20
     ee4:	95 2b       	or	r25, r21
     ee6:	a6 2b       	or	r26, r22
     ee8:	b7 2b       	or	r27, r23
     eea:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     eee:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     ef2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     ef6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     efa:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <mtable+0xe>
     efe:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <mtable+0xf>
     f02:	30 97       	sbiw	r30, 0x00	; 0
     f04:	39 f0       	breq	.+14     	; 0xf14 <__vector_12+0xb4>
     f06:	67 e0       	ldi	r22, 0x07	; 7
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <otable+0xe>
     f0e:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <otable+0xf>
     f12:	09 95       	icall
     f14:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti

00000f3e <__vector_13>:
     f3e:	1f 92       	push	r1
     f40:	0f 92       	push	r0
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	0f 92       	push	r0
     f46:	11 24       	eor	r1, r1
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	2f 93       	push	r18
     f4e:	3f 93       	push	r19
     f50:	4f 93       	push	r20
     f52:	5f 93       	push	r21
     f54:	6f 93       	push	r22
     f56:	7f 93       	push	r23
     f58:	8f 93       	push	r24
     f5a:	9f 93       	push	r25
     f5c:	af 93       	push	r26
     f5e:	bf 93       	push	r27
     f60:	ef 93       	push	r30
     f62:	ff 93       	push	r31
     f64:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     f68:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
     f6c:	ac 01       	movw	r20, r24
     f6e:	09 2e       	mov	r0, r25
     f70:	00 0c       	add	r0, r0
     f72:	66 0b       	sbc	r22, r22
     f74:	77 0b       	sbc	r23, r23
     f76:	9a 01       	movw	r18, r20
     f78:	11 27       	eor	r17, r17
     f7a:	00 27       	eor	r16, r16
     f7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	40 2b       	or	r20, r16
     f8a:	51 2b       	or	r21, r17
     f8c:	62 2b       	or	r22, r18
     f8e:	73 2b       	or	r23, r19
     f90:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
     f94:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
     f98:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
     f9c:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
     fa0:	b0 9b       	sbis	0x16, 0	; 22
     fa2:	1a c0       	rjmp	.+52     	; 0xfd8 <__vector_13+0x9a>
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	09 2e       	mov	r0, r25
     fa8:	00 0c       	add	r0, r0
     faa:	aa 0b       	sbc	r26, r26
     fac:	bb 0b       	sbc	r27, r27
     fae:	bc 01       	movw	r22, r24
     fb0:	55 27       	eor	r21, r21
     fb2:	44 27       	eor	r20, r20
     fb4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fb8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	84 2b       	or	r24, r20
     fc2:	95 2b       	or	r25, r21
     fc4:	a6 2b       	or	r26, r22
     fc6:	b7 2b       	or	r27, r23
     fc8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
     fcc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
     fd0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
     fd4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
     fd8:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <mtable+0x10>
     fdc:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <mtable+0x11>
     fe0:	30 97       	sbiw	r30, 0x00	; 0
     fe2:	39 f0       	breq	.+14     	; 0xff2 <__vector_13+0xb4>
     fe4:	68 e0       	ldi	r22, 0x08	; 8
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <otable+0x10>
     fec:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <otable+0x11>
     ff0:	09 95       	icall
     ff2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	0f 90       	pop	r0
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	0f 90       	pop	r0
    1018:	1f 90       	pop	r1
    101a:	18 95       	reti

0000101c <__vector_14>:
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	2f 93       	push	r18
    102c:	3f 93       	push	r19
    102e:	4f 93       	push	r20
    1030:	5f 93       	push	r21
    1032:	6f 93       	push	r22
    1034:	7f 93       	push	r23
    1036:	8f 93       	push	r24
    1038:	9f 93       	push	r25
    103a:	af 93       	push	r26
    103c:	bf 93       	push	r27
    103e:	ef 93       	push	r30
    1040:	ff 93       	push	r31
    1042:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    1046:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    104a:	ac 01       	movw	r20, r24
    104c:	09 2e       	mov	r0, r25
    104e:	00 0c       	add	r0, r0
    1050:	66 0b       	sbc	r22, r22
    1052:	77 0b       	sbc	r23, r23
    1054:	9a 01       	movw	r18, r20
    1056:	11 27       	eor	r17, r17
    1058:	00 27       	eor	r16, r16
    105a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    105e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	40 2b       	or	r20, r16
    1068:	51 2b       	or	r21, r17
    106a:	62 2b       	or	r22, r18
    106c:	73 2b       	or	r23, r19
    106e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    1072:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1076:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    107a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    107e:	b0 9b       	sbis	0x16, 0	; 22
    1080:	1a c0       	rjmp	.+52     	; 0x10b6 <__vector_14+0x9a>
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	09 2e       	mov	r0, r25
    1086:	00 0c       	add	r0, r0
    1088:	aa 0b       	sbc	r26, r26
    108a:	bb 0b       	sbc	r27, r27
    108c:	bc 01       	movw	r22, r24
    108e:	55 27       	eor	r21, r21
    1090:	44 27       	eor	r20, r20
    1092:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1096:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	84 2b       	or	r24, r20
    10a0:	95 2b       	or	r25, r21
    10a2:	a6 2b       	or	r26, r22
    10a4:	b7 2b       	or	r27, r23
    10a6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    10aa:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    10ae:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    10b2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    10b6:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <mtable+0x12>
    10ba:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <mtable+0x13>
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	39 f0       	breq	.+14     	; 0x10d0 <__vector_14+0xb4>
    10c2:	69 e0       	ldi	r22, 0x09	; 9
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <otable+0x12>
    10ca:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <otable+0x13>
    10ce:	09 95       	icall
    10d0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_15>:
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    1124:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    1128:	ac 01       	movw	r20, r24
    112a:	09 2e       	mov	r0, r25
    112c:	00 0c       	add	r0, r0
    112e:	66 0b       	sbc	r22, r22
    1130:	77 0b       	sbc	r23, r23
    1132:	9a 01       	movw	r18, r20
    1134:	11 27       	eor	r17, r17
    1136:	00 27       	eor	r16, r16
    1138:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    113c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	40 2b       	or	r20, r16
    1146:	51 2b       	or	r21, r17
    1148:	62 2b       	or	r22, r18
    114a:	73 2b       	or	r23, r19
    114c:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    1150:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1154:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    1158:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    115c:	b0 9b       	sbis	0x16, 0	; 22
    115e:	1a c0       	rjmp	.+52     	; 0x1194 <__vector_15+0x9a>
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	09 2e       	mov	r0, r25
    1164:	00 0c       	add	r0, r0
    1166:	aa 0b       	sbc	r26, r26
    1168:	bb 0b       	sbc	r27, r27
    116a:	bc 01       	movw	r22, r24
    116c:	55 27       	eor	r21, r21
    116e:	44 27       	eor	r20, r20
    1170:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1174:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	84 2b       	or	r24, r20
    117e:	95 2b       	or	r25, r21
    1180:	a6 2b       	or	r26, r22
    1182:	b7 2b       	or	r27, r23
    1184:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1188:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    118c:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1190:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1194:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <mtable+0x14>
    1198:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <mtable+0x15>
    119c:	30 97       	sbiw	r30, 0x00	; 0
    119e:	39 f0       	breq	.+14     	; 0x11ae <__vector_15+0xb4>
    11a0:	6a e0       	ldi	r22, 0x0A	; 10
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <otable+0x14>
    11a8:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <otable+0x15>
    11ac:	09 95       	icall
    11ae:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_16>:
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
    11fe:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    1202:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    1206:	ac 01       	movw	r20, r24
    1208:	09 2e       	mov	r0, r25
    120a:	00 0c       	add	r0, r0
    120c:	66 0b       	sbc	r22, r22
    120e:	77 0b       	sbc	r23, r23
    1210:	9a 01       	movw	r18, r20
    1212:	11 27       	eor	r17, r17
    1214:	00 27       	eor	r16, r16
    1216:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    121a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	40 2b       	or	r20, r16
    1224:	51 2b       	or	r21, r17
    1226:	62 2b       	or	r22, r18
    1228:	73 2b       	or	r23, r19
    122a:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    122e:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1232:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    1236:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    123a:	b0 9b       	sbis	0x16, 0	; 22
    123c:	1a c0       	rjmp	.+52     	; 0x1272 <__vector_16+0x9a>
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	09 2e       	mov	r0, r25
    1242:	00 0c       	add	r0, r0
    1244:	aa 0b       	sbc	r26, r26
    1246:	bb 0b       	sbc	r27, r27
    1248:	bc 01       	movw	r22, r24
    124a:	55 27       	eor	r21, r21
    124c:	44 27       	eor	r20, r20
    124e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1252:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1256:	a0 e0       	ldi	r26, 0x00	; 0
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	84 2b       	or	r24, r20
    125c:	95 2b       	or	r25, r21
    125e:	a6 2b       	or	r26, r22
    1260:	b7 2b       	or	r27, r23
    1262:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1266:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    126a:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    126e:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1272:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <mtable+0x16>
    1276:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <mtable+0x17>
    127a:	30 97       	sbiw	r30, 0x00	; 0
    127c:	39 f0       	breq	.+14     	; 0x128c <__vector_16+0xb4>
    127e:	6b e0       	ldi	r22, 0x0B	; 11
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <otable+0x16>
    1286:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <otable+0x17>
    128a:	09 95       	icall
    128c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_17>:
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	2f 93       	push	r18
    12c6:	3f 93       	push	r19
    12c8:	4f 93       	push	r20
    12ca:	5f 93       	push	r21
    12cc:	6f 93       	push	r22
    12ce:	7f 93       	push	r23
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	af 93       	push	r26
    12d6:	bf 93       	push	r27
    12d8:	ef 93       	push	r30
    12da:	ff 93       	push	r31
    12dc:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    12e0:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    12e4:	ac 01       	movw	r20, r24
    12e6:	09 2e       	mov	r0, r25
    12e8:	00 0c       	add	r0, r0
    12ea:	66 0b       	sbc	r22, r22
    12ec:	77 0b       	sbc	r23, r23
    12ee:	9a 01       	movw	r18, r20
    12f0:	11 27       	eor	r17, r17
    12f2:	00 27       	eor	r16, r16
    12f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	40 2b       	or	r20, r16
    1302:	51 2b       	or	r21, r17
    1304:	62 2b       	or	r22, r18
    1306:	73 2b       	or	r23, r19
    1308:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    130c:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1310:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    1314:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    1318:	b0 9b       	sbis	0x16, 0	; 22
    131a:	1a c0       	rjmp	.+52     	; 0x1350 <__vector_17+0x9a>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	09 2e       	mov	r0, r25
    1320:	00 0c       	add	r0, r0
    1322:	aa 0b       	sbc	r26, r26
    1324:	bb 0b       	sbc	r27, r27
    1326:	bc 01       	movw	r22, r24
    1328:	55 27       	eor	r21, r21
    132a:	44 27       	eor	r20, r20
    132c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1330:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	84 2b       	or	r24, r20
    133a:	95 2b       	or	r25, r21
    133c:	a6 2b       	or	r26, r22
    133e:	b7 2b       	or	r27, r23
    1340:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1344:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1348:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    134c:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    1350:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <mtable+0x18>
    1354:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <mtable+0x19>
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	39 f0       	breq	.+14     	; 0x136a <__vector_17+0xb4>
    135c:	6c e0       	ldi	r22, 0x0C	; 12
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <otable+0x18>
    1364:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <otable+0x19>
    1368:	09 95       	icall
    136a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_18>:
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    13be:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    13c2:	ac 01       	movw	r20, r24
    13c4:	09 2e       	mov	r0, r25
    13c6:	00 0c       	add	r0, r0
    13c8:	66 0b       	sbc	r22, r22
    13ca:	77 0b       	sbc	r23, r23
    13cc:	9a 01       	movw	r18, r20
    13ce:	11 27       	eor	r17, r17
    13d0:	00 27       	eor	r16, r16
    13d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	40 2b       	or	r20, r16
    13e0:	51 2b       	or	r21, r17
    13e2:	62 2b       	or	r22, r18
    13e4:	73 2b       	or	r23, r19
    13e6:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    13ea:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    13ee:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    13f2:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    13f6:	b0 9b       	sbis	0x16, 0	; 22
    13f8:	1a c0       	rjmp	.+52     	; 0x142e <__vector_18+0x9a>
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	09 2e       	mov	r0, r25
    13fe:	00 0c       	add	r0, r0
    1400:	aa 0b       	sbc	r26, r26
    1402:	bb 0b       	sbc	r27, r27
    1404:	bc 01       	movw	r22, r24
    1406:	55 27       	eor	r21, r21
    1408:	44 27       	eor	r20, r20
    140a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    140e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1412:	a0 e0       	ldi	r26, 0x00	; 0
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	84 2b       	or	r24, r20
    1418:	95 2b       	or	r25, r21
    141a:	a6 2b       	or	r26, r22
    141c:	b7 2b       	or	r27, r23
    141e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1422:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1426:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    142a:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    142e:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <mtable+0x1a>
    1432:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <mtable+0x1b>
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	39 f0       	breq	.+14     	; 0x1448 <__vector_18+0xb4>
    143a:	6d e0       	ldi	r22, 0x0D	; 13
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <otable+0x1a>
    1442:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <otable+0x1b>
    1446:	09 95       	icall
    1448:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <__vector_19>:
    1472:	1f 92       	push	r1
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	2f 93       	push	r18
    1482:	3f 93       	push	r19
    1484:	4f 93       	push	r20
    1486:	5f 93       	push	r21
    1488:	6f 93       	push	r22
    148a:	7f 93       	push	r23
    148c:	8f 93       	push	r24
    148e:	9f 93       	push	r25
    1490:	af 93       	push	r26
    1492:	bf 93       	push	r27
    1494:	ef 93       	push	r30
    1496:	ff 93       	push	r31
    1498:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    149c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    14a0:	ac 01       	movw	r20, r24
    14a2:	09 2e       	mov	r0, r25
    14a4:	00 0c       	add	r0, r0
    14a6:	66 0b       	sbc	r22, r22
    14a8:	77 0b       	sbc	r23, r23
    14aa:	9a 01       	movw	r18, r20
    14ac:	11 27       	eor	r17, r17
    14ae:	00 27       	eor	r16, r16
    14b0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14b4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	40 2b       	or	r20, r16
    14be:	51 2b       	or	r21, r17
    14c0:	62 2b       	or	r22, r18
    14c2:	73 2b       	or	r23, r19
    14c4:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    14c8:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    14cc:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    14d0:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    14d4:	b0 9b       	sbis	0x16, 0	; 22
    14d6:	1a c0       	rjmp	.+52     	; 0x150c <__vector_19+0x9a>
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	09 2e       	mov	r0, r25
    14dc:	00 0c       	add	r0, r0
    14de:	aa 0b       	sbc	r26, r26
    14e0:	bb 0b       	sbc	r27, r27
    14e2:	bc 01       	movw	r22, r24
    14e4:	55 27       	eor	r21, r21
    14e6:	44 27       	eor	r20, r20
    14e8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ec:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	84 2b       	or	r24, r20
    14f6:	95 2b       	or	r25, r21
    14f8:	a6 2b       	or	r26, r22
    14fa:	b7 2b       	or	r27, r23
    14fc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    1500:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    1504:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    1508:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    150c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <mtable+0x1c>
    1510:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <mtable+0x1d>
    1514:	30 97       	sbiw	r30, 0x00	; 0
    1516:	39 f0       	breq	.+14     	; 0x1526 <__vector_19+0xb4>
    1518:	6e e0       	ldi	r22, 0x0E	; 14
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <otable+0x1c>
    1520:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <otable+0x1d>
    1524:	09 95       	icall
    1526:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	0f 90       	pop	r0
    154c:	1f 90       	pop	r1
    154e:	18 95       	reti

00001550 <__vector_20>:
    1550:	1f 92       	push	r1
    1552:	0f 92       	push	r0
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	0f 92       	push	r0
    1558:	11 24       	eor	r1, r1
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	2f 93       	push	r18
    1560:	3f 93       	push	r19
    1562:	4f 93       	push	r20
    1564:	5f 93       	push	r21
    1566:	6f 93       	push	r22
    1568:	7f 93       	push	r23
    156a:	8f 93       	push	r24
    156c:	9f 93       	push	r25
    156e:	af 93       	push	r26
    1570:	bf 93       	push	r27
    1572:	ef 93       	push	r30
    1574:	ff 93       	push	r31
    1576:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    157a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    157e:	ac 01       	movw	r20, r24
    1580:	09 2e       	mov	r0, r25
    1582:	00 0c       	add	r0, r0
    1584:	66 0b       	sbc	r22, r22
    1586:	77 0b       	sbc	r23, r23
    1588:	9a 01       	movw	r18, r20
    158a:	11 27       	eor	r17, r17
    158c:	00 27       	eor	r16, r16
    158e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1592:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	40 2b       	or	r20, r16
    159c:	51 2b       	or	r21, r17
    159e:	62 2b       	or	r22, r18
    15a0:	73 2b       	or	r23, r19
    15a2:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    15a6:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    15aa:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    15ae:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    15b2:	b0 9b       	sbis	0x16, 0	; 22
    15b4:	1a c0       	rjmp	.+52     	; 0x15ea <__vector_20+0x9a>
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	09 2e       	mov	r0, r25
    15ba:	00 0c       	add	r0, r0
    15bc:	aa 0b       	sbc	r26, r26
    15be:	bb 0b       	sbc	r27, r27
    15c0:	bc 01       	movw	r22, r24
    15c2:	55 27       	eor	r21, r21
    15c4:	44 27       	eor	r20, r20
    15c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	84 2b       	or	r24, r20
    15d4:	95 2b       	or	r25, r21
    15d6:	a6 2b       	or	r26, r22
    15d8:	b7 2b       	or	r27, r23
    15da:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    15de:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    15e2:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    15e6:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    15ea:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <mtable+0x1e>
    15ee:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <mtable+0x1f>
    15f2:	30 97       	sbiw	r30, 0x00	; 0
    15f4:	39 f0       	breq	.+14     	; 0x1604 <__vector_20+0xb4>
    15f6:	6f e0       	ldi	r22, 0x0F	; 15
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <otable+0x1e>
    15fe:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <otable+0x1f>
    1602:	09 95       	icall
    1604:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	1f 91       	pop	r17
    1622:	0f 91       	pop	r16
    1624:	0f 90       	pop	r0
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	0f 90       	pop	r0
    162a:	1f 90       	pop	r1
    162c:	18 95       	reti

0000162e <__vector_21>:
    162e:	1f 92       	push	r1
    1630:	0f 92       	push	r0
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	0f 92       	push	r0
    1636:	11 24       	eor	r1, r1
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	2f 93       	push	r18
    163e:	3f 93       	push	r19
    1640:	4f 93       	push	r20
    1642:	5f 93       	push	r21
    1644:	6f 93       	push	r22
    1646:	7f 93       	push	r23
    1648:	8f 93       	push	r24
    164a:	9f 93       	push	r25
    164c:	af 93       	push	r26
    164e:	bf 93       	push	r27
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
    1654:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    1658:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    165c:	ac 01       	movw	r20, r24
    165e:	09 2e       	mov	r0, r25
    1660:	00 0c       	add	r0, r0
    1662:	66 0b       	sbc	r22, r22
    1664:	77 0b       	sbc	r23, r23
    1666:	9a 01       	movw	r18, r20
    1668:	11 27       	eor	r17, r17
    166a:	00 27       	eor	r16, r16
    166c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1670:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	40 2b       	or	r20, r16
    167a:	51 2b       	or	r21, r17
    167c:	62 2b       	or	r22, r18
    167e:	73 2b       	or	r23, r19
    1680:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    1684:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1688:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    168c:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    1690:	b0 9b       	sbis	0x16, 0	; 22
    1692:	1a c0       	rjmp	.+52     	; 0x16c8 <__vector_21+0x9a>
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	09 2e       	mov	r0, r25
    1698:	00 0c       	add	r0, r0
    169a:	aa 0b       	sbc	r26, r26
    169c:	bb 0b       	sbc	r27, r27
    169e:	bc 01       	movw	r22, r24
    16a0:	55 27       	eor	r21, r21
    16a2:	44 27       	eor	r20, r20
    16a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ac:	a0 e0       	ldi	r26, 0x00	; 0
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	84 2b       	or	r24, r20
    16b2:	95 2b       	or	r25, r21
    16b4:	a6 2b       	or	r26, r22
    16b6:	b7 2b       	or	r27, r23
    16b8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    16bc:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    16c0:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    16c4:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    16c8:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <mtable+0x20>
    16cc:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <mtable+0x21>
    16d0:	30 97       	sbiw	r30, 0x00	; 0
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <__vector_21+0xb4>
    16d4:	60 e1       	ldi	r22, 0x10	; 16
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <otable+0x20>
    16dc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <otable+0x21>
    16e0:	09 95       	icall
    16e2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    16e6:	ff 91       	pop	r31
    16e8:	ef 91       	pop	r30
    16ea:	bf 91       	pop	r27
    16ec:	af 91       	pop	r26
    16ee:	9f 91       	pop	r25
    16f0:	8f 91       	pop	r24
    16f2:	7f 91       	pop	r23
    16f4:	6f 91       	pop	r22
    16f6:	5f 91       	pop	r21
    16f8:	4f 91       	pop	r20
    16fa:	3f 91       	pop	r19
    16fc:	2f 91       	pop	r18
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_22>:
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    1736:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    173a:	ac 01       	movw	r20, r24
    173c:	09 2e       	mov	r0, r25
    173e:	00 0c       	add	r0, r0
    1740:	66 0b       	sbc	r22, r22
    1742:	77 0b       	sbc	r23, r23
    1744:	9a 01       	movw	r18, r20
    1746:	11 27       	eor	r17, r17
    1748:	00 27       	eor	r16, r16
    174a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    174e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	40 2b       	or	r20, r16
    1758:	51 2b       	or	r21, r17
    175a:	62 2b       	or	r22, r18
    175c:	73 2b       	or	r23, r19
    175e:	40 93 32 01 	sts	0x0132, r20	; 0x800132 <timestamp>
    1762:	50 93 33 01 	sts	0x0133, r21	; 0x800133 <timestamp+0x1>
    1766:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <timestamp+0x2>
    176a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <timestamp+0x3>
    176e:	b0 9b       	sbis	0x16, 0	; 22
    1770:	1a c0       	rjmp	.+52     	; 0x17a6 <__vector_22+0x9a>
    1772:	01 96       	adiw	r24, 0x01	; 1
    1774:	09 2e       	mov	r0, r25
    1776:	00 0c       	add	r0, r0
    1778:	aa 0b       	sbc	r26, r26
    177a:	bb 0b       	sbc	r27, r27
    177c:	bc 01       	movw	r22, r24
    177e:	55 27       	eor	r21, r21
    1780:	44 27       	eor	r20, r20
    1782:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1786:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    178a:	a0 e0       	ldi	r26, 0x00	; 0
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	84 2b       	or	r24, r20
    1790:	95 2b       	or	r25, r21
    1792:	a6 2b       	or	r26, r22
    1794:	b7 2b       	or	r27, r23
    1796:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timestamp>
    179a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <timestamp+0x1>
    179e:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <timestamp+0x2>
    17a2:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <timestamp+0x3>
    17a6:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <mtable+0x22>
    17aa:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <mtable+0x23>
    17ae:	30 97       	sbiw	r30, 0x00	; 0
    17b0:	39 f0       	breq	.+14     	; 0x17c0 <__vector_22+0xb4>
    17b2:	61 e1       	ldi	r22, 0x11	; 17
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <otable+0x22>
    17ba:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <otable+0x23>
    17be:	09 95       	icall
    17c0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    17c4:	ff 91       	pop	r31
    17c6:	ef 91       	pop	r30
    17c8:	bf 91       	pop	r27
    17ca:	af 91       	pop	r26
    17cc:	9f 91       	pop	r25
    17ce:	8f 91       	pop	r24
    17d0:	7f 91       	pop	r23
    17d2:	6f 91       	pop	r22
    17d4:	5f 91       	pop	r21
    17d6:	4f 91       	pop	r20
    17d8:	3f 91       	pop	r19
    17da:	2f 91       	pop	r18
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <idle>:
    17ea:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    17ee:	78 94       	sei
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	83 bf       	out	0x33, r24	; 51
    17f4:	88 95       	sleep
    17f6:	fc cf       	rjmp	.-8      	; 0x17f0 <idle+0x6>

000017f8 <__vector_9>:
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    181a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
    1824:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
    1828:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    182c:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    1830:	30 97       	sbiw	r30, 0x00	; 0
    1832:	01 f1       	breq	.+64     	; 0x1874 <__vector_9+0x7c>
    1834:	42 81       	ldd	r20, Z+2	; 0x02
    1836:	53 81       	ldd	r21, Z+3	; 0x03
    1838:	64 81       	ldd	r22, Z+4	; 0x04
    183a:	75 81       	ldd	r23, Z+5	; 0x05
    183c:	86 17       	cp	r24, r22
    183e:	97 07       	cpc	r25, r23
    1840:	c9 f4       	brne	.+50     	; 0x1874 <__vector_9+0x7c>
    1842:	ca 01       	movw	r24, r20
    1844:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1848:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    184c:	42 1b       	sub	r20, r18
    184e:	53 0b       	sbc	r21, r19
    1850:	41 30       	cpi	r20, 0x01	; 1
    1852:	51 05       	cpc	r21, r1
    1854:	29 f4       	brne	.+10     	; 0x1860 <__vector_9+0x68>
    1856:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    185a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    185e:	01 96       	adiw	r24, 0x01	; 1
    1860:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1864:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1868:	ef e6       	ldi	r30, 0x6F	; 111
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	82 60       	ori	r24, 0x02	; 2
    1870:	80 83       	st	Z, r24
    1872:	05 c0       	rjmp	.+10     	; 0x187e <__vector_9+0x86>
    1874:	ef e6       	ldi	r30, 0x6F	; 111
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8d 7f       	andi	r24, 0xFD	; 253
    187c:	80 83       	st	Z, r24
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_7>:
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	cf 92       	push	r12
    18a8:	df 92       	push	r13
    18aa:	ef 92       	push	r14
    18ac:	ff 92       	push	r15
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
    18c6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
    18ca:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__data_end+0x1>
    18ce:	6c 01       	movw	r12, r24
    18d0:	09 2e       	mov	r0, r25
    18d2:	00 0c       	add	r0, r0
    18d4:	ee 08       	sbc	r14, r14
    18d6:	ff 08       	sbc	r15, r15
    18d8:	76 01       	movw	r14, r12
    18da:	dd 24       	eor	r13, r13
    18dc:	cc 24       	eor	r12, r12
    18de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	c4 2a       	or	r12, r20
    18ec:	d5 2a       	or	r13, r21
    18ee:	e6 2a       	or	r14, r22
    18f0:	f7 2a       	or	r15, r23
    18f2:	b0 9b       	sbis	0x16, 0	; 22
    18f4:	1e c0       	rjmp	.+60     	; 0x1932 <__vector_7+0x96>
    18f6:	6c 01       	movw	r12, r24
    18f8:	2f ef       	ldi	r18, 0xFF	; 255
    18fa:	c2 1a       	sub	r12, r18
    18fc:	d2 0a       	sbc	r13, r18
    18fe:	0d 2c       	mov	r0, r13
    1900:	00 0c       	add	r0, r0
    1902:	ee 08       	sbc	r14, r14
    1904:	ff 08       	sbc	r15, r15
    1906:	d6 01       	movw	r26, r12
    1908:	99 27       	eor	r25, r25
    190a:	88 27       	eor	r24, r24
    190c:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1910:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1914:	e1 2c       	mov	r14, r1
    1916:	f1 2c       	mov	r15, r1
    1918:	c8 2a       	or	r12, r24
    191a:	d9 2a       	or	r13, r25
    191c:	ea 2a       	or	r14, r26
    191e:	fb 2a       	or	r15, r27
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <__vector_7+0x96>
    1922:	86 e3       	ldi	r24, 0x36	; 54
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	0e 94 be 03 	call	0x77c	; 0x77c <dequeue>
    192a:	68 e3       	ldi	r22, 0x38	; 56
    192c:	71 e0       	ldi	r23, 0x01	; 1
    192e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <enqueueByDeadline>
    1932:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    1936:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	69 f0       	breq	.+26     	; 0x1958 <__vector_7+0xbc>
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	a4 81       	ldd	r26, Z+4	; 0x04
    1944:	b5 81       	ldd	r27, Z+5	; 0x05
    1946:	8c 19       	sub	r24, r12
    1948:	9d 09       	sbc	r25, r13
    194a:	ae 09       	sbc	r26, r14
    194c:	bf 09       	sbc	r27, r15
    194e:	18 16       	cp	r1, r24
    1950:	19 06       	cpc	r1, r25
    1952:	1a 06       	cpc	r1, r26
    1954:	1b 06       	cpc	r1, r27
    1956:	2c f7       	brge	.-54     	; 0x1922 <__vector_7+0x86>
    1958:	30 97       	sbiw	r30, 0x00	; 0
    195a:	21 f1       	breq	.+72     	; 0x19a4 <__vector_7+0x108>
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	a4 81       	ldd	r26, Z+4	; 0x04
    1962:	b5 81       	ldd	r27, Z+5	; 0x05
    1964:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
    1968:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
    196c:	2a 17       	cp	r18, r26
    196e:	3b 07       	cpc	r19, r27
    1970:	c9 f4       	brne	.+50     	; 0x19a4 <__vector_7+0x108>
    1972:	9c 01       	movw	r18, r24
    1974:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1978:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    197c:	84 1b       	sub	r24, r20
    197e:	95 0b       	sbc	r25, r21
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	31 f4       	brne	.+12     	; 0x1990 <__vector_7+0xf4>
    1984:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1988:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    198c:	2f 5f       	subi	r18, 0xFF	; 255
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1994:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1998:	ef e6       	ldi	r30, 0x6F	; 111
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	82 60       	ori	r24, 0x02	; 2
    19a0:	80 83       	st	Z, r24
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <__vector_7+0x112>
    19a4:	ef e6       	ldi	r30, 0x6F	; 111
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8d 7f       	andi	r24, 0xFD	; 253
    19ac:	80 83       	st	Z, r24
    19ae:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <schedule>
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	bf 91       	pop	r27
    19b8:	af 91       	pop	r26
    19ba:	9f 91       	pop	r25
    19bc:	8f 91       	pop	r24
    19be:	7f 91       	pop	r23
    19c0:	6f 91       	pop	r22
    19c2:	5f 91       	pop	r21
    19c4:	4f 91       	pop	r20
    19c6:	3f 91       	pop	r19
    19c8:	2f 91       	pop	r18
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	0f 90       	pop	r0
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	0f 90       	pop	r0
    19d8:	1f 90       	pop	r1
    19da:	18 95       	reti

000019dc <async>:
    19dc:	3f 92       	push	r3
    19de:	4f 92       	push	r4
    19e0:	5f 92       	push	r5
    19e2:	6f 92       	push	r6
    19e4:	7f 92       	push	r7
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	2b 01       	movw	r4, r22
    1a00:	3c 01       	movw	r6, r24
    1a02:	49 01       	movw	r8, r18
    1a04:	5a 01       	movw	r10, r20
    1a06:	8f b7       	in	r24, 0x3f	; 63
    1a08:	80 78       	andi	r24, 0x80	; 128
    1a0a:	38 2e       	mov	r3, r24
    1a0c:	f8 94       	cli
    1a0e:	8e e2       	ldi	r24, 0x2E	; 46
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	0e 94 be 03 	call	0x77c	; 0x77c <dequeue>
    1a16:	ec 01       	movw	r28, r24
    1a18:	1b 87       	std	Y+11, r17	; 0x0b
    1a1a:	0a 87       	std	Y+10, r16	; 0x0a
    1a1c:	fd 86       	std	Y+13, r15	; 0x0d
    1a1e:	ec 86       	std	Y+12, r14	; 0x0c
    1a20:	df 86       	std	Y+15, r13	; 0x0f
    1a22:	ce 86       	std	Y+14, r12	; 0x0e
    1a24:	33 20       	and	r3, r3
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <async+0x64>
    1a28:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    1a2c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    1a30:	02 80       	ldd	r0, Z+2	; 0x02
    1a32:	f3 81       	ldd	r31, Z+3	; 0x03
    1a34:	e0 2d       	mov	r30, r0
    1a36:	82 81       	ldd	r24, Z+2	; 0x02
    1a38:	93 81       	ldd	r25, Z+3	; 0x03
    1a3a:	a4 81       	ldd	r26, Z+4	; 0x04
    1a3c:	b5 81       	ldd	r27, Z+5	; 0x05
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <async+0x74>
    1a40:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timestamp>
    1a44:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <timestamp+0x1>
    1a48:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <timestamp+0x2>
    1a4c:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <timestamp+0x3>
    1a50:	48 0e       	add	r4, r24
    1a52:	59 1e       	adc	r5, r25
    1a54:	6a 1e       	adc	r6, r26
    1a56:	7b 1e       	adc	r7, r27
    1a58:	4a 82       	std	Y+2, r4	; 0x02
    1a5a:	5b 82       	std	Y+3, r5	; 0x03
    1a5c:	6c 82       	std	Y+4, r6	; 0x04
    1a5e:	7d 82       	std	Y+5, r7	; 0x05
    1a60:	18 14       	cp	r1, r8
    1a62:	19 04       	cpc	r1, r9
    1a64:	1a 04       	cpc	r1, r10
    1a66:	1b 04       	cpc	r1, r11
    1a68:	44 f0       	brlt	.+16     	; 0x1a7a <async+0x9e>
    1a6a:	0f 2e       	mov	r0, r31
    1a6c:	88 24       	eor	r8, r8
    1a6e:	8a 94       	dec	r8
    1a70:	98 2c       	mov	r9, r8
    1a72:	a8 2c       	mov	r10, r8
    1a74:	ff e7       	ldi	r31, 0x7F	; 127
    1a76:	bf 2e       	mov	r11, r31
    1a78:	f0 2d       	mov	r31, r0
    1a7a:	84 0c       	add	r8, r4
    1a7c:	95 1c       	adc	r9, r5
    1a7e:	a6 1c       	adc	r10, r6
    1a80:	b7 1c       	adc	r11, r7
    1a82:	8e 82       	std	Y+6, r8	; 0x06
    1a84:	9f 82       	std	Y+7, r9	; 0x07
    1a86:	a8 86       	std	Y+8, r10	; 0x08
    1a88:	b9 86       	std	Y+9, r11	; 0x09
    1a8a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
    1a8e:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
    1a92:	c9 01       	movw	r24, r18
    1a94:	03 2e       	mov	r0, r19
    1a96:	00 0c       	add	r0, r0
    1a98:	aa 0b       	sbc	r26, r26
    1a9a:	bb 0b       	sbc	r27, r27
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	99 27       	eor	r25, r25
    1aa0:	88 27       	eor	r24, r24
    1aa2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	84 2b       	or	r24, r20
    1ab0:	95 2b       	or	r25, r21
    1ab2:	a6 2b       	or	r26, r22
    1ab4:	b7 2b       	or	r27, r23
    1ab6:	b0 9b       	sbis	0x16, 0	; 22
    1ab8:	13 c0       	rjmp	.+38     	; 0x1ae0 <async+0x104>
    1aba:	c9 01       	movw	r24, r18
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	09 2e       	mov	r0, r25
    1ac0:	00 0c       	add	r0, r0
    1ac2:	aa 0b       	sbc	r26, r26
    1ac4:	bb 0b       	sbc	r27, r27
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	99 27       	eor	r25, r25
    1aca:	88 27       	eor	r24, r24
    1acc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ad0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	84 2b       	or	r24, r20
    1ada:	95 2b       	or	r25, r21
    1adc:	a6 2b       	or	r26, r22
    1ade:	b7 2b       	or	r27, r23
    1ae0:	48 1a       	sub	r4, r24
    1ae2:	59 0a       	sbc	r5, r25
    1ae4:	6a 0a       	sbc	r6, r26
    1ae6:	7b 0a       	sbc	r7, r27
    1ae8:	14 14       	cp	r1, r4
    1aea:	15 04       	cpc	r1, r5
    1aec:	16 04       	cpc	r1, r6
    1aee:	17 04       	cpc	r1, r7
    1af0:	ac f5       	brge	.+106    	; 0x1b5c <async+0x180>
    1af2:	66 e3       	ldi	r22, 0x36	; 54
    1af4:	71 e0       	ldi	r23, 0x01	; 1
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 8d 03 	call	0x71a	; 0x71a <enqueueByBaseline>
    1afc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <timerQ>
    1b00:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <timerQ+0x1>
    1b04:	30 97       	sbiw	r30, 0x00	; 0
    1b06:	21 f1       	breq	.+72     	; 0x1b50 <async+0x174>
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b10:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
    1b14:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
    1b18:	2a 17       	cp	r18, r26
    1b1a:	3b 07       	cpc	r19, r27
    1b1c:	c9 f4       	brne	.+50     	; 0x1b50 <async+0x174>
    1b1e:	9c 01       	movw	r18, r24
    1b20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b28:	84 1b       	sub	r24, r20
    1b2a:	95 0b       	sbc	r25, r21
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <async+0x160>
    1b30:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b34:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b38:	2f 5f       	subi	r18, 0xFF	; 255
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b40:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b44:	ef e6       	ldi	r30, 0x6F	; 111
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	82 60       	ori	r24, 0x02	; 2
    1b4c:	80 83       	st	Z, r24
    1b4e:	39 c0       	rjmp	.+114    	; 0x1bc2 <async+0x1e6>
    1b50:	ef e6       	ldi	r30, 0x6F	; 111
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8d 7f       	andi	r24, 0xFD	; 253
    1b58:	80 83       	st	Z, r24
    1b5a:	33 c0       	rjmp	.+102    	; 0x1bc2 <async+0x1e6>
    1b5c:	68 e3       	ldi	r22, 0x38	; 56
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	ce 01       	movw	r24, r28
    1b62:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <enqueueByDeadline>
    1b66:	33 20       	and	r3, r3
    1b68:	61 f1       	breq	.+88     	; 0x1bc2 <async+0x1e6>
    1b6a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <threadPool>
    1b6e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <threadPool+0x1>
    1b72:	89 2b       	or	r24, r25
    1b74:	31 f1       	breq	.+76     	; 0x1bc2 <async+0x1e6>
    1b76:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <msgQ>
    1b7a:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <msgQ+0x1>
    1b7e:	86 81       	ldd	r24, Z+6	; 0x06
    1b80:	97 81       	ldd	r25, Z+7	; 0x07
    1b82:	a0 85       	ldd	r26, Z+8	; 0x08
    1b84:	b1 85       	ldd	r27, Z+9	; 0x09
    1b86:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <activeStack>
    1b8a:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <activeStack+0x1>
    1b8e:	02 80       	ldd	r0, Z+2	; 0x02
    1b90:	f3 81       	ldd	r31, Z+3	; 0x03
    1b92:	e0 2d       	mov	r30, r0
    1b94:	46 81       	ldd	r20, Z+6	; 0x06
    1b96:	57 81       	ldd	r21, Z+7	; 0x07
    1b98:	60 85       	ldd	r22, Z+8	; 0x08
    1b9a:	71 85       	ldd	r23, Z+9	; 0x09
    1b9c:	84 1b       	sub	r24, r20
    1b9e:	95 0b       	sbc	r25, r21
    1ba0:	a6 0b       	sbc	r26, r22
    1ba2:	b7 0b       	sbc	r27, r23
    1ba4:	72 f4       	brpl	.+28     	; 0x1bc2 <async+0x1e6>
    1ba6:	8c e2       	ldi	r24, 0x2C	; 44
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pop>
    1bae:	6a e2       	ldi	r22, 0x2A	; 42
    1bb0:	71 e0       	ldi	r23, 0x01	; 1
    1bb2:	0e 94 df 03 	call	0x7be	; 0x7be <push>
    1bb6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <activeStack>
    1bba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <activeStack+0x1>
    1bbe:	0e 94 3c 03 	call	0x678	; 0x678 <dispatch>
    1bc2:	33 20       	and	r3, r3
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <async+0x1ec>
    1bc6:	78 94       	sei
    1bc8:	ce 01       	movw	r24, r28
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	df 90       	pop	r13
    1bd8:	cf 90       	pop	r12
    1bda:	bf 90       	pop	r11
    1bdc:	af 90       	pop	r10
    1bde:	9f 90       	pop	r9
    1be0:	8f 90       	pop	r8
    1be2:	7f 90       	pop	r7
    1be4:	6f 90       	pop	r6
    1be6:	5f 90       	pop	r5
    1be8:	4f 90       	pop	r4
    1bea:	3f 90       	pop	r3
    1bec:	08 95       	ret

00001bee <sync>:
    1bee:	cf 92       	push	r12
    1bf0:	df 92       	push	r13
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	ec 01       	movw	r28, r24
    1c00:	7b 01       	movw	r14, r22
    1c02:	6a 01       	movw	r12, r20
    1c04:	1f b7       	in	r17, 0x3f	; 63
    1c06:	10 78       	andi	r17, 0x80	; 128
    1c08:	f8 94       	cli
    1c0a:	a8 81       	ld	r26, Y
    1c0c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c0e:	10 97       	sbiw	r26, 0x00	; 0
    1c10:	19 f4       	brne	.+6      	; 0x1c18 <sync+0x2a>
    1c12:	35 c0       	rjmp	.+106    	; 0x1c7e <sync+0x90>
    1c14:	a0 81       	ld	r26, Z
    1c16:	b1 81       	ldd	r27, Z+1	; 0x01
    1c18:	14 96       	adiw	r26, 0x04	; 4
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	15 97       	sbiw	r26, 0x05	; 5
    1c20:	30 97       	sbiw	r30, 0x00	; 0
    1c22:	c1 f7       	brne	.-16     	; 0x1c14 <sync+0x26>
    1c24:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <current>
    1c28:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <current+0x1>
    1c2c:	a2 17       	cp	r26, r18
    1c2e:	b3 07       	cpc	r27, r19
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <sync+0x48>
    1c32:	11 11       	cpse	r17, r1
    1c34:	07 c0       	rjmp	.+14     	; 0x1c44 <sync+0x56>
    1c36:	11 23       	and	r17, r17
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <sync+0x4e>
    1c3a:	4a c0       	rjmp	.+148    	; 0x1cd0 <sync+0xe2>
    1c3c:	78 94       	sei
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	4e c0       	rjmp	.+156    	; 0x1ce0 <sync+0xf2>
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	9b 81       	ldd	r25, Y+3	; 0x03
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	19 f0       	breq	.+6      	; 0x1c52 <sync+0x64>
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	14 82       	std	Z+4, r1	; 0x04
    1c52:	3b 83       	std	Y+3, r19	; 0x03
    1c54:	2a 83       	std	Y+2, r18	; 0x02
    1c56:	f9 01       	movw	r30, r18
    1c58:	d5 83       	std	Z+5, r29	; 0x05
    1c5a:	c4 83       	std	Z+4, r28	; 0x04
    1c5c:	cd 01       	movw	r24, r26
    1c5e:	0e 94 3c 03 	call	0x678	; 0x678 <dispatch>
    1c62:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <current>
    1c66:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <current+0x1>
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	89 2b       	or	r24, r25
    1c70:	31 f4       	brne	.+12     	; 0x1c7e <sync+0x90>
    1c72:	11 23       	and	r17, r17
    1c74:	81 f1       	breq	.+96     	; 0x1cd6 <sync+0xe8>
    1c76:	78 94       	sei
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	31 c0       	rjmp	.+98     	; 0x1ce0 <sync+0xf2>
    1c7e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
    1c82:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
    1c86:	99 83       	std	Y+1, r25	; 0x01
    1c88:	88 83       	st	Y, r24
    1c8a:	11 23       	and	r17, r17
    1c8c:	29 f0       	breq	.+10     	; 0x1c98 <sync+0xaa>
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <sync+0xaa>
    1c96:	78 94       	sei
    1c98:	b6 01       	movw	r22, r12
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	f7 01       	movw	r30, r14
    1c9e:	09 95       	icall
    1ca0:	f8 2e       	mov	r15, r24
    1ca2:	09 2f       	mov	r16, r25
    1ca4:	8f b7       	in	r24, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	19 82       	std	Y+1, r1	; 0x01
    1caa:	18 82       	st	Y, r1
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	82 30       	cpi	r24, 0x02	; 2
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	38 f0       	brcs	.+14     	; 0x1cc4 <sync+0xd6>
    1cb6:	1b 82       	std	Y+3, r1	; 0x03
    1cb8:	1a 82       	std	Y+2, r1	; 0x02
    1cba:	fc 01       	movw	r30, r24
    1cbc:	15 82       	std	Z+5, r1	; 0x05
    1cbe:	14 82       	std	Z+4, r1	; 0x04
    1cc0:	0e 94 3c 03 	call	0x678	; 0x678 <dispatch>
    1cc4:	11 23       	and	r17, r17
    1cc6:	51 f0       	breq	.+20     	; 0x1cdc <sync+0xee>
    1cc8:	78 94       	sei
    1cca:	8f 2d       	mov	r24, r15
    1ccc:	90 2f       	mov	r25, r16
    1cce:	08 c0       	rjmp	.+16     	; 0x1ce0 <sync+0xf2>
    1cd0:	8f ef       	ldi	r24, 0xFF	; 255
    1cd2:	9f ef       	ldi	r25, 0xFF	; 255
    1cd4:	05 c0       	rjmp	.+10     	; 0x1ce0 <sync+0xf2>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <sync+0xf2>
    1cdc:	8f 2d       	mov	r24, r15
    1cde:	90 2f       	mov	r25, r16
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	08 95       	ret

00001cf2 <run>:
    1cf2:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <current>
    1cf6:	10 91 29 01 	lds	r17, 0x0129	; 0x800129 <current+0x1>
    1cfa:	88 e3       	ldi	r24, 0x38	; 56
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	0e 94 be 03 	call	0x77c	; 0x77c <dequeue>
    1d02:	ec 01       	movw	r28, r24
    1d04:	f8 01       	movw	r30, r16
    1d06:	93 83       	std	Z+3, r25	; 0x03
    1d08:	82 83       	std	Z+2, r24	; 0x02
    1d0a:	78 94       	sei
    1d0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d10:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d12:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d18:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
    1d1c:	8f b7       	in	r24, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	6e e2       	ldi	r22, 0x2E	; 46
    1d22:	71 e0       	ldi	r23, 0x01	; 1
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 d5 03 	call	0x7aa	; 0x7aa <insert>
    1d2a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <activeStack>
    1d2e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <activeStack+0x1>
    1d32:	01 90       	ld	r0, Z+
    1d34:	f0 81       	ld	r31, Z
    1d36:	e0 2d       	mov	r30, r0
    1d38:	c2 81       	ldd	r28, Z+2	; 0x02
    1d3a:	d3 81       	ldd	r29, Z+3	; 0x03
    1d3c:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <msgQ>
    1d40:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <msgQ+0x1>
    1d44:	30 97       	sbiw	r30, 0x00	; 0
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <run+0x7e>
    1d48:	20 97       	sbiw	r28, 0x00	; 0
    1d4a:	99 f2       	breq	.-90     	; 0x1cf2 <run>
    1d4c:	86 81       	ldd	r24, Z+6	; 0x06
    1d4e:	97 81       	ldd	r25, Z+7	; 0x07
    1d50:	a0 85       	ldd	r26, Z+8	; 0x08
    1d52:	b1 85       	ldd	r27, Z+9	; 0x09
    1d54:	4e 81       	ldd	r20, Y+6	; 0x06
    1d56:	5f 81       	ldd	r21, Y+7	; 0x07
    1d58:	68 85       	ldd	r22, Y+8	; 0x08
    1d5a:	79 85       	ldd	r23, Y+9	; 0x09
    1d5c:	84 1b       	sub	r24, r20
    1d5e:	95 0b       	sbc	r25, r21
    1d60:	a6 0b       	sbc	r26, r22
    1d62:	b7 0b       	sbc	r27, r23
    1d64:	18 16       	cp	r1, r24
    1d66:	19 06       	cpc	r1, r25
    1d68:	1a 06       	cpc	r1, r26
    1d6a:	1b 06       	cpc	r1, r27
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <run+0x7e>
    1d6e:	c1 cf       	rjmp	.-126    	; 0x1cf2 <run>
    1d70:	8a e2       	ldi	r24, 0x2A	; 42
    1d72:	91 e0       	ldi	r25, 0x01	; 1
    1d74:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <pop>
    1d78:	6c e2       	ldi	r22, 0x2C	; 44
    1d7a:	71 e0       	ldi	r23, 0x01	; 1
    1d7c:	0e 94 df 03 	call	0x7be	; 0x7be <push>
    1d80:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <activeStack>
    1d84:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <activeStack+0x1>
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <run+0x9c>
    1d8a:	a0 81       	ld	r26, Z
    1d8c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	ed 91       	ld	r30, X+
    1d92:	fc 91       	ld	r31, X
    1d94:	15 97       	sbiw	r26, 0x05	; 5
    1d96:	30 97       	sbiw	r30, 0x00	; 0
    1d98:	c1 f7       	brne	.-16     	; 0x1d8a <run+0x98>
    1d9a:	cd 01       	movw	r24, r26
    1d9c:	0e 94 3c 03 	call	0x678	; 0x678 <dispatch>
    1da0:	a8 cf       	rjmp	.-176    	; 0x1cf2 <run>

00001da2 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1da2:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1da4:	42 31       	cpi	r20, 0x12	; 18
    1da6:	b8 f4       	brcc	.+46     	; 0x1dd6 <install+0x34>
        char status;
        DISABLE(status);
    1da8:	9f b7       	in	r25, 0x3f	; 63
    1daa:	90 78       	andi	r25, 0x80	; 128
    1dac:	f8 94       	cli
        otable[i] = obj;
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	44 0f       	add	r20, r20
    1db2:	55 1f       	adc	r21, r21
    1db4:	da 01       	movw	r26, r20
    1db6:	ad 59       	subi	r26, 0x9D	; 157
    1db8:	be 4f       	sbci	r27, 0xFE	; 254
    1dba:	ed 93       	st	X+, r30
    1dbc:	fc 93       	st	X, r31
        mtable[i] = m;
    1dbe:	da 01       	movw	r26, r20
    1dc0:	a5 50       	subi	r26, 0x05	; 5
    1dc2:	be 4f       	sbci	r27, 0xFE	; 254
    1dc4:	6d 93       	st	X+, r22
    1dc6:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	33 83       	std	Z+3, r19	; 0x03
    1dce:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    1dd0:	99 23       	and	r25, r25
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <install+0x34>
    1dd4:	78 94       	sei
    1dd6:	08 95       	ret

00001dd8 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1dd8:	8c 01       	movw	r16, r24
    1dda:	7b 01       	movw	r14, r22
    1ddc:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1dde:	8f b7       	in	r24, 0x3f	; 63
    1de0:	f8 94       	cli
    initialize();
    1de2:	0e 94 9d 02 	call	0x53a	; 0x53a <initialize>
    ENABLE(1);
    1de6:	78 94       	sei
    if (m != NULL)
    1de8:	e1 14       	cp	r14, r1
    1dea:	f1 04       	cpc	r15, r1
    1dec:	41 f0       	breq	.+16     	; 0x1dfe <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	a9 01       	movw	r20, r18
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	cb 01       	movw	r24, r22
    1dfa:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
    DISABLE(status);
    1dfe:	8f b7       	in	r24, 0x3f	; 63
    1e00:	f8 94       	cli
    idle();
    1e02:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <idle>

00001e06 <update_display>:
	else{
		SYNC(current,change_freq,self->temp_freq[self->current_pulsegen]%100);
		self->temp_freq[self->current_pulsegen] = 0;
	}
}
void update_display(app_object * self, int arg){
    1e06:	cf 92       	push	r12
    1e08:	df 92       	push	r13
    1e0a:	ef 92       	push	r14
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	ec 01       	movw	r28, r24
    1e18:	6b 01       	movw	r12, r22
		//print_at(arg,0,2);
		print_at(self->temp_freq[0],0,2);
    1e1a:	42 e0       	ldi	r20, 0x02	; 2
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	89 85       	ldd	r24, Y+9	; 0x09
    1e20:	0e 94 c0 01 	call	0x380	; 0x380 <print_at>
		print_at(self->temp_freq[1],4,2);
    1e24:	42 e0       	ldi	r20, 0x02	; 2
    1e26:	64 e0       	ldi	r22, 0x04	; 4
    1e28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e2a:	0e 94 c0 01 	call	0x380	; 0x380 <print_at>
		if(self->current_pulsegen == 0)
    1e2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e30:	81 11       	cpse	r24, r1
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <update_display+0x3a>
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
    1e34:	ec ee       	ldi	r30, 0xEC	; 236
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
    1e3a:	84 60       	ori	r24, 0x04	; 4
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
    1e3c:	80 83       	st	Z, r24
    1e3e:	05 c0       	rjmp	.+10     	; 0x1e4a <update_display+0x44>
// Include guard
#ifndef REG_API_H
#define REG_API_H
#include <stdint-gcc.h>
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
    1e40:	ee ee       	ldi	r30, 0xEE	; 238
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
    1e46:	84 60       	ori	r24, 0x04	; 4
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
    1e48:	80 83       	st	Z, r24
			write_8_field(&LCDDR0,1,1,2);
		else{
			write_8_field(&LCDDR2,1,1,2);
		}
		AFTER(MSEC(100),self,update_display,arg+1);
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	c8 1a       	sub	r12, r24
    1e4e:	d8 0a       	sbc	r13, r24
    1e50:	0f 2e       	mov	r0, r31
    1e52:	f3 e0       	ldi	r31, 0x03	; 3
    1e54:	ef 2e       	mov	r14, r31
    1e56:	ff e0       	ldi	r31, 0x0F	; 15
    1e58:	ff 2e       	mov	r15, r31
    1e5a:	f0 2d       	mov	r31, r0
    1e5c:	8e 01       	movw	r16, r28
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	65 e3       	ldi	r22, 0x35	; 53
    1e66:	7c e0       	ldi	r23, 0x0C	; 12
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	08 95       	ret

00001e82 <app_main>:
		self->ui_started =1;
		ASYNC(self,update_display,0);
		SYNC(self,app_main,0);
	
}
void app_main(app_object * self,int arg){
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
		AFTER(MSEC(2000),self,app_main,arg+1);
    1e8e:	6b 01       	movw	r12, r22
    1e90:	2f ef       	ldi	r18, 0xFF	; 255
    1e92:	c2 1a       	sub	r12, r18
    1e94:	d2 0a       	sbc	r13, r18
    1e96:	0f 2e       	mov	r0, r31
    1e98:	f1 e4       	ldi	r31, 0x41	; 65
    1e9a:	ef 2e       	mov	r14, r31
    1e9c:	ff e0       	ldi	r31, 0x0F	; 15
    1e9e:	ff 2e       	mov	r15, r31
    1ea0:	f0 2d       	mov	r31, r0
    1ea2:	8c 01       	movw	r16, r24
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	64 e2       	ldi	r22, 0x24	; 36
    1eac:	74 ef       	ldi	r23, 0xF4	; 244
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	df 90       	pop	r13
    1ec0:	cf 90       	pop	r12
    1ec2:	08 95       	ret

00001ec4 <init_app>:
 *
 * Created: 2022-02-22 16:35:29
 *  Author: ivarj
 */ 
#include "../include/app.h"
void init_app(app_object * self,pulse_gen *pulse_gens,uint8_t number_of_pulsegens){
    1ec4:	ff 92       	push	r15
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	8b 01       	movw	r16, r22
    1ed2:	f4 2e       	mov	r15, r20
	init_lcd();
    1ed4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <init_lcd>
	self->super.ownedBy = NULL;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
    1eda:	18 82       	st	Y, r1
	self->super.wantedBy = NULL;
    1edc:	1b 82       	std	Y+3, r1	; 0x03
    1ede:	1a 82       	std	Y+2, r1	; 0x02
	self->current_pulsegen = 0;
    1ee0:	1e 82       	std	Y+6, r1	; 0x06
	self->number_of_pulsegens = number_of_pulsegens;
    1ee2:	ff 82       	std	Y+7, r15	; 0x07
	self->pulse_gens = pulse_gens;
    1ee4:	1d 83       	std	Y+5, r17	; 0x05
    1ee6:	0c 83       	std	Y+4, r16	; 0x04
	self->ui_started = 0;
    1ee8:	18 86       	std	Y+8, r1	; 0x08
	self->temp_freq[0] = 0;
    1eea:	19 86       	std	Y+9, r1	; 0x09
	self->temp_freq[1] = 0;
    1eec:	1a 86       	std	Y+10, r1	; 0x0a
	
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	08 95       	ret

00001efa <change_pulse_gen>:
void change_pulse_gen(app_object * self,uint8_t new_index){
	// gets the next pulse gen
	self->current_pulsegen = new_index;
    1efa:	fc 01       	movw	r30, r24
    1efc:	66 83       	std	Z+6, r22	; 0x06
    1efe:	08 95       	ret

00001f00 <itterate_freq>:
}
void itterate_freq(app_object * self,uint8_t increment){
	self->temp_freq[self->current_pulsegen] += increment;
    1f00:	fc 01       	movw	r30, r24
    1f02:	26 81       	ldd	r18, Z+6	; 0x06
    1f04:	e2 0f       	add	r30, r18
    1f06:	f1 1d       	adc	r31, r1
    1f08:	91 85       	ldd	r25, Z+9	; 0x09
    1f0a:	69 0f       	add	r22, r25
	self->temp_freq[self->current_pulsegen] %=100; 
    1f0c:	89 e2       	ldi	r24, 0x29	; 41
    1f0e:	68 9f       	mul	r22, r24
    1f10:	81 2d       	mov	r24, r1
    1f12:	11 24       	eor	r1, r1
    1f14:	82 95       	swap	r24
    1f16:	8f 70       	andi	r24, 0x0F	; 15
    1f18:	94 e6       	ldi	r25, 0x64	; 100
    1f1a:	89 9f       	mul	r24, r25
    1f1c:	60 19       	sub	r22, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	61 87       	std	Z+9, r22	; 0x09
    1f22:	08 95       	ret

00001f24 <commit_freq>:
}
void commit_freq(app_object * self,uint8_t arg){
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	fc 01       	movw	r30, r24
	pulse_gen * current = self->pulse_gens+self->current_pulsegen;
    1f2a:	44 81       	ldd	r20, Z+4	; 0x04
    1f2c:	55 81       	ldd	r21, Z+5	; 0x05
    1f2e:	96 81       	ldd	r25, Z+6	; 0x06
    1f30:	29 2f       	mov	r18, r25
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	c9 01       	movw	r24, r18
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	82 0f       	add	r24, r18
    1f44:	93 1f       	adc	r25, r19
    1f46:	84 0f       	add	r24, r20
    1f48:	95 1f       	adc	r25, r21
	if(self->temp_freq[self->current_pulsegen] == 0){
    1f4a:	df 01       	movw	r26, r30
    1f4c:	a2 0f       	add	r26, r18
    1f4e:	b3 1f       	adc	r27, r19
    1f50:	19 96       	adiw	r26, 0x09	; 9
    1f52:	4c 91       	ld	r20, X
    1f54:	41 11       	cpse	r20, r1
    1f56:	07 c0       	rjmp	.+14     	; 0x1f66 <commit_freq+0x42>
		// Do 0 stuff
		self->temp_freq[self->current_pulsegen] = current->freq;
    1f58:	dc 01       	movw	r26, r24
    1f5a:	14 96       	adiw	r26, 0x04	; 4
    1f5c:	8c 91       	ld	r24, X
    1f5e:	e2 0f       	add	r30, r18
    1f60:	f3 1f       	adc	r31, r19
    1f62:	81 87       	std	Z+9, r24	; 0x09
    1f64:	15 c0       	rjmp	.+42     	; 0x1f90 <commit_freq+0x6c>
    1f66:	ef 01       	movw	r28, r30
	}
	else{
		SYNC(current,change_freq,self->temp_freq[self->current_pulsegen]%100);
    1f68:	29 e2       	ldi	r18, 0x29	; 41
    1f6a:	42 9f       	mul	r20, r18
    1f6c:	21 2d       	mov	r18, r1
    1f6e:	11 24       	eor	r1, r1
    1f70:	22 95       	swap	r18
    1f72:	2f 70       	andi	r18, 0x0F	; 15
    1f74:	b4 e6       	ldi	r27, 0x64	; 100
    1f76:	2b 9f       	mul	r18, r27
    1f78:	40 19       	sub	r20, r0
    1f7a:	11 24       	eor	r1, r1
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	6a e9       	ldi	r22, 0x9A	; 154
    1f80:	72 e0       	ldi	r23, 0x02	; 2
    1f82:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
		self->temp_freq[self->current_pulsegen] = 0;
    1f86:	8e 81       	ldd	r24, Y+6	; 0x06
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e8 0f       	add	r30, r24
    1f8c:	f1 1d       	adc	r31, r1
    1f8e:	11 86       	std	Z+9, r1	; 0x09
	}
}
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <app_entry>:
		else{
			write_8_field(&LCDDR2,1,1,2);
		}
		AFTER(MSEC(100),self,update_display,arg+1);
}
void app_entry(app_object *self,int arg){
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	5c 01       	movw	r10, r24
		if((self->pulse_gens+self->current_pulsegen)->running != 1){
    1fac:	fc 01       	movw	r30, r24
    1fae:	24 81       	ldd	r18, Z+4	; 0x04
    1fb0:	35 81       	ldd	r19, Z+5	; 0x05
    1fb2:	96 81       	ldd	r25, Z+6	; 0x06
    1fb4:	89 2f       	mov	r24, r25
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	fc 01       	movw	r30, r24
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	8e 0f       	add	r24, r30
    1fc8:	9f 1f       	adc	r25, r31
    1fca:	f9 01       	movw	r30, r18
    1fcc:	e8 0f       	add	r30, r24
    1fce:	f9 1f       	adc	r31, r25
    1fd0:	80 85       	ldd	r24, Z+8	; 0x08
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	b9 f4       	brne	.+46     	; 0x2004 <app_entry+0x6e>
    1fd6:	1e c0       	rjmp	.+60     	; 0x2014 <app_entry+0x7e>
			for(int i = 0; i < self->number_of_pulsegens; i++)
				SYNC((self->pulse_gens+i),pulse,0);
    1fd8:	f5 01       	movw	r30, r10
    1fda:	24 81       	ldd	r18, Z+4	; 0x04
    1fdc:	35 81       	ldd	r19, Z+5	; 0x05
    1fde:	ce 01       	movw	r24, r28
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	8c 0f       	add	r24, r28
    1fee:	9d 1f       	adc	r25, r29
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	67 e1       	ldi	r22, 0x17	; 23
    1ff6:	72 e0       	ldi	r23, 0x02	; 2
    1ff8:	82 0f       	add	r24, r18
    1ffa:	93 1f       	adc	r25, r19
    1ffc:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
		}
		AFTER(MSEC(100),self,update_display,arg+1);
}
void app_entry(app_object *self,int arg){
		if((self->pulse_gens+self->current_pulsegen)->running != 1){
			for(int i = 0; i < self->number_of_pulsegens; i++)
    2000:	21 96       	adiw	r28, 0x01	; 1
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <app_entry+0x72>
    2004:	c0 e0       	ldi	r28, 0x00	; 0
    2006:	d0 e0       	ldi	r29, 0x00	; 0
    2008:	f5 01       	movw	r30, r10
    200a:	87 81       	ldd	r24, Z+7	; 0x07
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	c8 17       	cp	r28, r24
    2010:	d9 07       	cpc	r29, r25
    2012:	14 f3       	brlt	.-60     	; 0x1fd8 <app_entry+0x42>
				SYNC((self->pulse_gens+i),pulse,0);
		}
		self->ui_started =1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	f5 01       	movw	r30, r10
    2018:	80 87       	std	Z+8, r24	; 0x08
		ASYNC(self,update_display,0);
    201a:	c1 2c       	mov	r12, r1
    201c:	d1 2c       	mov	r13, r1
    201e:	0f 2e       	mov	r0, r31
    2020:	f3 e0       	ldi	r31, 0x03	; 3
    2022:	ef 2e       	mov	r14, r31
    2024:	ff e0       	ldi	r31, 0x0F	; 15
    2026:	ff 2e       	mov	r15, r31
    2028:	f0 2d       	mov	r31, r0
    202a:	85 01       	movw	r16, r10
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	70 e0       	ldi	r23, 0x00	; 0
    2036:	cb 01       	movw	r24, r22
    2038:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <async>
		SYNC(self,app_main,0);
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	61 e4       	ldi	r22, 0x41	; 65
    2042:	7f e0       	ldi	r23, 0x0F	; 15
    2044:	c5 01       	movw	r24, r10
    2046:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <sync>
	
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	ff 90       	pop	r15
    2054:	ef 90       	pop	r14
    2056:	df 90       	pop	r13
    2058:	cf 90       	pop	r12
    205a:	bf 90       	pop	r11
    205c:	af 90       	pop	r10
    205e:	08 95       	ret

00002060 <__divmodhi4>:
    2060:	97 fb       	bst	r25, 7
    2062:	07 2e       	mov	r0, r23
    2064:	16 f4       	brtc	.+4      	; 0x206a <__divmodhi4+0xa>
    2066:	00 94       	com	r0
    2068:	07 d0       	rcall	.+14     	; 0x2078 <__divmodhi4_neg1>
    206a:	77 fd       	sbrc	r23, 7
    206c:	09 d0       	rcall	.+18     	; 0x2080 <__divmodhi4_neg2>
    206e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__udivmodhi4>
    2072:	07 fc       	sbrc	r0, 7
    2074:	05 d0       	rcall	.+10     	; 0x2080 <__divmodhi4_neg2>
    2076:	3e f4       	brtc	.+14     	; 0x2086 <__divmodhi4_exit>

00002078 <__divmodhi4_neg1>:
    2078:	90 95       	com	r25
    207a:	81 95       	neg	r24
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	08 95       	ret

00002080 <__divmodhi4_neg2>:
    2080:	70 95       	com	r23
    2082:	61 95       	neg	r22
    2084:	7f 4f       	sbci	r23, 0xFF	; 255

00002086 <__divmodhi4_exit>:
    2086:	08 95       	ret

00002088 <__umulhisi3>:
    2088:	a2 9f       	mul	r26, r18
    208a:	b0 01       	movw	r22, r0
    208c:	b3 9f       	mul	r27, r19
    208e:	c0 01       	movw	r24, r0
    2090:	a3 9f       	mul	r26, r19
    2092:	70 0d       	add	r23, r0
    2094:	81 1d       	adc	r24, r1
    2096:	11 24       	eor	r1, r1
    2098:	91 1d       	adc	r25, r1
    209a:	b2 9f       	mul	r27, r18
    209c:	70 0d       	add	r23, r0
    209e:	81 1d       	adc	r24, r1
    20a0:	11 24       	eor	r1, r1
    20a2:	91 1d       	adc	r25, r1
    20a4:	08 95       	ret

000020a6 <__udivmodhi4>:
    20a6:	aa 1b       	sub	r26, r26
    20a8:	bb 1b       	sub	r27, r27
    20aa:	51 e1       	ldi	r21, 0x11	; 17
    20ac:	07 c0       	rjmp	.+14     	; 0x20bc <__udivmodhi4_ep>

000020ae <__udivmodhi4_loop>:
    20ae:	aa 1f       	adc	r26, r26
    20b0:	bb 1f       	adc	r27, r27
    20b2:	a6 17       	cp	r26, r22
    20b4:	b7 07       	cpc	r27, r23
    20b6:	10 f0       	brcs	.+4      	; 0x20bc <__udivmodhi4_ep>
    20b8:	a6 1b       	sub	r26, r22
    20ba:	b7 0b       	sbc	r27, r23

000020bc <__udivmodhi4_ep>:
    20bc:	88 1f       	adc	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	5a 95       	dec	r21
    20c2:	a9 f7       	brne	.-22     	; 0x20ae <__udivmodhi4_loop>
    20c4:	80 95       	com	r24
    20c6:	90 95       	com	r25
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	08 95       	ret

000020ce <setjmp>:
    20ce:	dc 01       	movw	r26, r24
    20d0:	2d 92       	st	X+, r2
    20d2:	3d 92       	st	X+, r3
    20d4:	4d 92       	st	X+, r4
    20d6:	5d 92       	st	X+, r5
    20d8:	6d 92       	st	X+, r6
    20da:	7d 92       	st	X+, r7
    20dc:	8d 92       	st	X+, r8
    20de:	9d 92       	st	X+, r9
    20e0:	ad 92       	st	X+, r10
    20e2:	bd 92       	st	X+, r11
    20e4:	cd 92       	st	X+, r12
    20e6:	dd 92       	st	X+, r13
    20e8:	ed 92       	st	X+, r14
    20ea:	fd 92       	st	X+, r15
    20ec:	0d 93       	st	X+, r16
    20ee:	1d 93       	st	X+, r17
    20f0:	cd 93       	st	X+, r28
    20f2:	dd 93       	st	X+, r29
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	8d b7       	in	r24, 0x3d	; 61
    20fa:	8d 93       	st	X+, r24
    20fc:	8e b7       	in	r24, 0x3e	; 62
    20fe:	8d 93       	st	X+, r24
    2100:	8f b7       	in	r24, 0x3f	; 63
    2102:	8d 93       	st	X+, r24
    2104:	ed 93       	st	X+, r30
    2106:	fd 93       	st	X+, r31
    2108:	88 27       	eor	r24, r24
    210a:	99 27       	eor	r25, r25
    210c:	09 94       	ijmp

0000210e <longjmp>:
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	91 05       	cpc	r25, r1
    2116:	81 1d       	adc	r24, r1
    2118:	2d 90       	ld	r2, X+
    211a:	3d 90       	ld	r3, X+
    211c:	4d 90       	ld	r4, X+
    211e:	5d 90       	ld	r5, X+
    2120:	6d 90       	ld	r6, X+
    2122:	7d 90       	ld	r7, X+
    2124:	8d 90       	ld	r8, X+
    2126:	9d 90       	ld	r9, X+
    2128:	ad 90       	ld	r10, X+
    212a:	bd 90       	ld	r11, X+
    212c:	cd 90       	ld	r12, X+
    212e:	dd 90       	ld	r13, X+
    2130:	ed 90       	ld	r14, X+
    2132:	fd 90       	ld	r15, X+
    2134:	0d 91       	ld	r16, X+
    2136:	1d 91       	ld	r17, X+
    2138:	cd 91       	ld	r28, X+
    213a:	dd 91       	ld	r29, X+
    213c:	ed 91       	ld	r30, X+
    213e:	fd 91       	ld	r31, X+
    2140:	0d 90       	ld	r0, X+
    2142:	f8 94       	cli
    2144:	fe bf       	out	0x3e, r31	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	ed bf       	out	0x3d, r30	; 61
    214a:	ed 91       	ld	r30, X+
    214c:	fd 91       	ld	r31, X+
    214e:	09 94       	ijmp

00002150 <_exit>:
    2150:	f8 94       	cli

00002152 <__stop_program>:
    2152:	ff cf       	rjmp	.-2      	; 0x2152 <__stop_program>
