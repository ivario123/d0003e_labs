
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002430  000024c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080015c  0080015c  00002520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e77  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000146a  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e6  00000000  00000000  00007b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d6c  00000000  00000000  000094f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a88  00000000  00000000  0000a25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000395d  00000000  00000000  0000ace4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000e641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_1>
       8:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_2>
       c:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_3>
      10:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_4>
      14:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_9>
      28:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_10>
      2c:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_11>
      30:	0c 94 ed 07 	jmp	0xfda	; 0xfda <__vector_12>
      34:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_13>
      38:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_14>
      3c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__vector_15>
      40:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_16>
      44:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_17>
      48:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_18>
      4c:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__vector_19>
      50:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_20>
      54:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_21>
      58:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 e3       	ldi	r30, 0x30	; 48
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 35       	cpi	r26, 0x5C	; 92
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e5       	ldi	r26, 0x5C	; 92
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a3 3b       	cpi	r26, 0xB3	; 179
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
      92:	0c 94 16 12 	jmp	0x242c	; 0x242c <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <handle_joystick>:
 *
 * Created: 2022-03-01 16:20:33
 *  Author: ivarj
 */
#include "../include/button.h"
void handle_joystick(button_object *self,int arg){
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      b4:	e3 b1       	in	r30, 0x03	; 3
inline void read_8_field(volatile uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
      b6:	4e 2f       	mov	r20, r30
      b8:	40 71       	andi	r20, 0x10	; 16
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	8a 01       	movw	r16, r20
      be:	15 95       	asr	r17
      c0:	07 95       	ror	r16
      c2:	15 95       	asr	r17
      c4:	07 95       	ror	r16
      c6:	15 95       	asr	r17
      c8:	07 95       	ror	r16
      ca:	15 95       	asr	r17
      cc:	07 95       	ror	r16
      ce:	2e 2f       	mov	r18, r30
      d0:	20 74       	andi	r18, 0x40	; 64
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	02 2e       	mov	r0, r18
      d6:	23 2f       	mov	r18, r19
      d8:	00 0c       	add	r0, r0
      da:	22 1f       	adc	r18, r18
      dc:	33 0b       	sbc	r19, r19
      de:	00 0c       	add	r0, r0
      e0:	22 1f       	adc	r18, r18
      e2:	33 1f       	adc	r19, r19
      e4:	c2 2f       	mov	r28, r18
      e6:	e0 78       	andi	r30, 0x80	; 128
      e8:	4e 2f       	mov	r20, r30
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	44 0f       	add	r20, r20
      ee:	45 2f       	mov	r20, r21
      f0:	44 1f       	adc	r20, r20
      f2:	55 0b       	sbc	r21, r21
      f4:	d4 2f       	mov	r29, r20
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      f6:	ac b1       	in	r26, 0x0c	; 12
inline void read_8_field(volatile uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
      f8:	ea 2f       	mov	r30, r26
      fa:	e4 70       	andi	r30, 0x04	; 4
      fc:	ee 2e       	mov	r14, r30
      fe:	f1 2c       	mov	r15, r1
     100:	f5 94       	asr	r15
     102:	e7 94       	ror	r14
     104:	f5 94       	asr	r15
     106:	e7 94       	ror	r14
     108:	a8 70       	andi	r26, 0x08	; 8
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	b5 95       	asr	r27
     10e:	a7 95       	ror	r26
     110:	b5 95       	asr	r27
     112:	a7 95       	ror	r26
     114:	b5 95       	asr	r27
     116:	a7 95       	ror	r26
	read_8_field(&PINB,&down,1,7);
	read_8_field(&PINE,&left,1,2);
	read_8_field(&PINE,&right,1,3);
	// If not exactly one of the buttons have been pressed return
	// This makes it not act on release
	if(up+down+press+left+right != 4)
     118:	fa 01       	movw	r30, r20
     11a:	e2 0f       	add	r30, r18
     11c:	f3 1f       	adc	r31, r19
     11e:	a8 01       	movw	r20, r16
     120:	4e 0f       	add	r20, r30
     122:	5f 1f       	adc	r21, r31
     124:	97 01       	movw	r18, r14
     126:	24 0f       	add	r18, r20
     128:	35 1f       	adc	r19, r21
     12a:	2a 0f       	add	r18, r26
     12c:	3b 1f       	adc	r19, r27
     12e:	24 30       	cpi	r18, 0x04	; 4
     130:	31 05       	cpc	r19, r1
     132:	09 f0       	breq	.+2      	; 0x136 <handle_joystick+0x9c>
     134:	87 c0       	rjmp	.+270    	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
     136:	5b 01       	movw	r10, r22
     138:	4c 01       	movw	r8, r24
	return;
	// Treating it like booleans, all but 0 is 1 thus if !val is true, reg is 0,
	// Just think it looks neater than ==0
	if(!up)
     13a:	c1 11       	cpse	r28, r1
     13c:	15 c0       	rjmp	.+42     	; 0x168 <handle_joystick+0xce>
		ASYNC(self->app,itterate_freq,1);
     13e:	fc 01       	movw	r30, r24
     140:	04 81       	ldd	r16, Z+4	; 0x04
     142:	15 81       	ldd	r17, Z+5	; 0x05
     144:	cc 24       	eor	r12, r12
     146:	c3 94       	inc	r12
     148:	d1 2c       	mov	r13, r1
     14a:	0f 2e       	mov	r0, r31
     14c:	fe e5       	ldi	r31, 0x5E	; 94
     14e:	ef 2e       	mov	r14, r31
     150:	f0 e1       	ldi	r31, 0x10	; 16
     152:	ff 2e       	mov	r15, r31
     154:	f0 2d       	mov	r31, r0
     156:	20 e0       	ldi	r18, 0x00	; 0
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	a9 01       	movw	r20, r18
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	70 e0       	ldi	r23, 0x00	; 0
     160:	cb 01       	movw	r24, r22
     162:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     166:	59 c0       	rjmp	.+178    	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	else if(!down)
     168:	d1 11       	cpse	r29, r1
     16a:	15 c0       	rjmp	.+42     	; 0x196 <handle_joystick+0xfc>
		ASYNC(self->app,itterate_freq,-1);
     16c:	fc 01       	movw	r30, r24
     16e:	04 81       	ldd	r16, Z+4	; 0x04
     170:	15 81       	ldd	r17, Z+5	; 0x05
     172:	cc 24       	eor	r12, r12
     174:	ca 94       	dec	r12
     176:	dc 2c       	mov	r13, r12
     178:	0f 2e       	mov	r0, r31
     17a:	fe e5       	ldi	r31, 0x5E	; 94
     17c:	ef 2e       	mov	r14, r31
     17e:	f0 e1       	ldi	r31, 0x10	; 16
     180:	ff 2e       	mov	r15, r31
     182:	f0 2d       	mov	r31, r0
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0
     188:	a9 01       	movw	r20, r18
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	cb 01       	movw	r24, r22
     190:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     194:	42 c0       	rjmp	.+132    	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	else if(!press)
     196:	01 11       	cpse	r16, r1
     198:	14 c0       	rjmp	.+40     	; 0x1c2 <handle_joystick+0x128>
		ASYNC(self->app,save_freq,0);
     19a:	fc 01       	movw	r30, r24
     19c:	04 81       	ldd	r16, Z+4	; 0x04
     19e:	15 81       	ldd	r17, Z+5	; 0x05
     1a0:	c1 2c       	mov	r12, r1
     1a2:	d1 2c       	mov	r13, r1
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f8 ea       	ldi	r31, 0xA8	; 168
     1a8:	ef 2e       	mov	r14, r31
     1aa:	f0 e1       	ldi	r31, 0x10	; 16
     1ac:	ff 2e       	mov	r15, r31
     1ae:	f0 2d       	mov	r31, r0
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	a9 01       	movw	r20, r18
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	cb 01       	movw	r24, r22
     1bc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     1c0:	2c c0       	rjmp	.+88     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	else if(!right)
     1c2:	a1 11       	cpse	r26, r1
     1c4:	15 c0       	rjmp	.+42     	; 0x1f0 <handle_joystick+0x156>
		ASYNC(self->app,change_pulse_gen,1);
     1c6:	fc 01       	movw	r30, r24
     1c8:	04 81       	ldd	r16, Z+4	; 0x04
     1ca:	15 81       	ldd	r17, Z+5	; 0x05
     1cc:	cc 24       	eor	r12, r12
     1ce:	c3 94       	inc	r12
     1d0:	d1 2c       	mov	r13, r1
     1d2:	0f 2e       	mov	r0, r31
     1d4:	fe e3       	ldi	r31, 0x3E	; 62
     1d6:	ef 2e       	mov	r14, r31
     1d8:	f0 e1       	ldi	r31, 0x10	; 16
     1da:	ff 2e       	mov	r15, r31
     1dc:	f0 2d       	mov	r31, r0
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	a9 01       	movw	r20, r18
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     1ee:	15 c0       	rjmp	.+42     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	else if(!left)
     1f0:	e1 10       	cpse	r14, r1
     1f2:	13 c0       	rjmp	.+38     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		ASYNC(self->app,change_pulse_gen,0);
     1f4:	fc 01       	movw	r30, r24
     1f6:	04 81       	ldd	r16, Z+4	; 0x04
     1f8:	15 81       	ldd	r17, Z+5	; 0x05
     1fa:	c1 2c       	mov	r12, r1
     1fc:	d1 2c       	mov	r13, r1
     1fe:	0f 2e       	mov	r0, r31
     200:	fe e3       	ldi	r31, 0x3E	; 62
     202:	ef 2e       	mov	r14, r31
     204:	f0 e1       	ldi	r31, 0x10	; 16
     206:	ff 2e       	mov	r15, r31
     208:	f0 2d       	mov	r31, r0
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	cb 01       	movw	r24, r22
     216:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
	if((!up)||(!down))
     21a:	cc 23       	and	r28, r28
     21c:	11 f0       	breq	.+4      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     21e:	d1 11       	cpse	r29, r1
     220:	11 c0       	rjmp	.+34     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
		AFTER(MSEC(150),self,handle_joystick,arg);
     222:	65 01       	movw	r12, r10
     224:	0f 2e       	mov	r0, r31
     226:	fd e4       	ldi	r31, 0x4D	; 77
     228:	ef 2e       	mov	r14, r31
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	ff 2e       	mov	r15, r31
     22e:	f0 2d       	mov	r31, r0
     230:	84 01       	movw	r16, r8
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	a9 01       	movw	r20, r18
     238:	6f e4       	ldi	r22, 0x4F	; 79
     23a:	72 e1       	ldi	r23, 0x12	; 18
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	cf 90       	pop	r12
     254:	bf 90       	pop	r11
     256:	af 90       	pop	r10
     258:	9f 90       	pop	r9
     25a:	8f 90       	pop	r8
     25c:	7f 90       	pop	r7
     25e:	08 95       	ret

00000260 <left_right_handeler>:
 * Created: 2022-02-23 08:33:01
 *  Author: ivarj
 */ 
#include "../include/interrupt.h"
#define cool_delay 500
void left_right_handeler(interrupt_object *self,int arg){
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
	ASYNC(self->button,handle_joystick,0);
     26c:	fc 01       	movw	r30, r24
     26e:	04 81       	ldd	r16, Z+4	; 0x04
     270:	15 81       	ldd	r17, Z+5	; 0x05
     272:	c1 2c       	mov	r12, r1
     274:	d1 2c       	mov	r13, r1
     276:	0f 2e       	mov	r0, r31
     278:	fd e4       	ldi	r31, 0x4D	; 77
     27a:	ef 2e       	mov	r14, r31
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ff 2e       	mov	r15, r31
     280:	f0 2d       	mov	r31, r0
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	a9 01       	movw	r20, r18
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	cb 01       	movw	r24, r22
     28e:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
}
     292:	1f 91       	pop	r17
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	08 95       	ret

000002a0 <upp_down_press_handeler>:
void upp_down_press_handeler(interrupt_object *self, int arg){
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
	ASYNC(self->button,handle_joystick,0);
     2ac:	fc 01       	movw	r30, r24
     2ae:	04 81       	ldd	r16, Z+4	; 0x04
     2b0:	15 81       	ldd	r17, Z+5	; 0x05
     2b2:	c1 2c       	mov	r12, r1
     2b4:	d1 2c       	mov	r13, r1
     2b6:	0f 2e       	mov	r0, r31
     2b8:	fd e4       	ldi	r31, 0x4D	; 77
     2ba:	ef 2e       	mov	r14, r31
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ff 2e       	mov	r15, r31
     2c0:	f0 2d       	mov	r31, r0
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	a9 01       	movw	r20, r18
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	cb 01       	movw	r24, r22
     2ce:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	08 95       	ret

000002e0 <toggle_bit>:
 *  Author: ivarj
 */ 
#include "../include/io.h"
#include <avr/io.h>
volatile void toggle_bit(io_object *self, uint8_t offset){
	if(offset > 7)
     2e0:	68 30       	cpi	r22, 0x08	; 8
     2e2:	50 f4       	brcc	.+20     	; 0x2f8 <toggle_bit+0x18>
		return;
	uint8_t field = 1<<(offset);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <toggle_bit+0xe>
     2ea:	88 0f       	add	r24, r24
     2ec:	99 1f       	adc	r25, r25
     2ee:	6a 95       	dec	r22
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <toggle_bit+0xa>
	PORTE = PORTE ^ field;
     2f2:	9e b1       	in	r25, 0x0e	; 14
     2f4:	89 27       	eor	r24, r25
     2f6:	8e b9       	out	0x0e, r24	; 14
     2f8:	08 95       	ret

000002fa <set_low>:
}
volatile void set_low(io_object *self,uint8_t offset){
	if (offset >7)
     2fa:	68 30       	cpi	r22, 0x08	; 8
     2fc:	58 f4       	brcc	.+22     	; 0x314 <set_low+0x1a>
		return;
	uint8_t field = ~(1<<offset);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 c0       	rjmp	.+4      	; 0x308 <set_low+0xe>
     304:	88 0f       	add	r24, r24
     306:	99 1f       	adc	r25, r25
     308:	6a 95       	dec	r22
     30a:	e2 f7       	brpl	.-8      	; 0x304 <set_low+0xa>
     30c:	80 95       	com	r24
	PORTE = PORTE&field;
     30e:	9e b1       	in	r25, 0x0e	; 14
     310:	89 23       	and	r24, r25
     312:	8e b9       	out	0x0e, r24	; 14
     314:	08 95       	ret

00000316 <init_lcd>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     316:	e4 ee       	ldi	r30, 0xE4	; 228
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     31c:	80 6c       	ori	r24, 0xC0	; 192
     31e:	8e 7e       	andi	r24, 0xEE	; 238
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     320:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     322:	e5 ee       	ldi	r30, 0xE5	; 229
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     328:	87 6b       	ori	r24, 0xB7	; 183
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     32a:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     32c:	e6 ee       	ldi	r30, 0xE6	; 230
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     332:	88 78       	andi	r24, 0x88	; 136
     334:	87 60       	ori	r24, 0x07	; 7
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     336:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     338:	e7 ee       	ldi	r30, 0xE7	; 231
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     33e:	80 71       	andi	r24, 0x10	; 16
     340:	8f 60       	ori	r24, 0x0F	; 15
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     342:	80 83       	st	Z, r24
     344:	08 95       	ret

00000346 <write_char>:
	// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V
	write_8_field(&LCDCCR,15,4,0);
	//LCDCCR = LCDCCR|((15));
}

void write_char(char ch,int pos){
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	a8 97       	sbiw	r28, 0x28	; 40
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
	// Our dictionary
	long dict_arr[] = {
     35c:	98 e2       	ldi	r25, 0x28	; 40
     35e:	e4 e3       	ldi	r30, 0x34	; 52
     360:	f1 e0       	ldi	r31, 0x01	; 1
     362:	de 01       	movw	r26, r28
     364:	11 96       	adiw	r26, 0x01	; 1
     366:	01 90       	ld	r0, Z+
     368:	0d 92       	st	X+, r0
     36a:	9a 95       	dec	r25
     36c:	e1 f7       	brne	.-8      	; 0x366 <write_char+0x20>
		0x1F41,				// ...		  6
		0x0111,				// ...		  7
		0x1F51,				// ...		  8
		0x1B51				// ...		  9
	};
	if(pos < 0 || pos > 5)
     36e:	16 2f       	mov	r17, r22
     370:	66 30       	cpi	r22, 0x06	; 6
     372:	71 05       	cpc	r23, r1
     374:	e0 f5       	brcc	.+120    	; 0x3ee <write_char+0xa8>
		return;
	uint16_t num = 0x0;
	uint8_t *address = (uint8_t *)(0xEC+(pos>>1));
     376:	75 95       	asr	r23
     378:	67 95       	ror	r22
     37a:	fb 01       	movw	r30, r22
     37c:	e4 51       	subi	r30, 0x14	; 20
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
	
	if(ch>=48&& ch<=57){
     380:	90 ed       	ldi	r25, 0xD0	; 208
     382:	98 0f       	add	r25, r24
     384:	9a 30       	cpi	r25, 0x0A	; 10
     386:	80 f4       	brcc	.+32     	; 0x3a8 <write_char+0x62>
		num = dict_arr[ch-48];
     388:	a8 2f       	mov	r26, r24
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	d0 97       	sbiw	r26, 0x30	; 48
     38e:	aa 0f       	add	r26, r26
     390:	bb 1f       	adc	r27, r27
     392:	aa 0f       	add	r26, r26
     394:	bb 1f       	adc	r27, r27
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	8c 0f       	add	r24, r28
     39c:	9d 1f       	adc	r25, r29
     39e:	a8 0f       	add	r26, r24
     3a0:	b9 1f       	adc	r27, r25
     3a2:	4d 91       	ld	r20, X+
     3a4:	5c 91       	ld	r21, X
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <write_char+0x66>
		0x1F51,				// ...		  8
		0x1B51				// ...		  9
	};
	if(pos < 0 || pos > 5)
		return;
	uint16_t num = 0x0;
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <write_char+0xa2>
	if(ch>=48&& ch<=57){
		num = dict_arr[ch-48];
	}
	
	for( int i= 0; i < 4; i++){
		uint8_t nibble = num&0xf;
     3b2:	94 2f       	mov	r25, r20
     3b4:	9f 70       	andi	r25, 0x0F	; 15
		num>>=4;
     3b6:	52 95       	swap	r21
     3b8:	42 95       	swap	r20
     3ba:	4f 70       	andi	r20, 0x0F	; 15
     3bc:	45 27       	eor	r20, r21
     3be:	5f 70       	andi	r21, 0x0F	; 15
     3c0:	45 27       	eor	r20, r21
		
		if(pos%2==0)
     3c2:	10 fd       	sbrc	r17, 0
     3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <write_char+0x8a>
		{
			*address = (*address)&0xf0;
     3c6:	80 81       	ld	r24, Z
     3c8:	80 7f       	andi	r24, 0xF0	; 240
			*address = (*address)|nibble;
     3ca:	89 2b       	or	r24, r25
     3cc:	80 83       	st	Z, r24
     3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <write_char+0x9c>
		}
		else
		{
			*address = (*address)&0x0f;
     3d0:	80 81       	ld	r24, Z
     3d2:	68 2f       	mov	r22, r24
     3d4:	6f 70       	andi	r22, 0x0F	; 15
			*address =  *address | nibble << 4;
     3d6:	70 e1       	ldi	r23, 0x10	; 16
     3d8:	97 9f       	mul	r25, r23
     3da:	c0 01       	movw	r24, r0
     3dc:	11 24       	eor	r1, r1
     3de:	86 2b       	or	r24, r22
     3e0:	80 83       	st	Z, r24
		}
		address+=5;
     3e2:	35 96       	adiw	r30, 0x05	; 5
	
	if(ch>=48&& ch<=57){
		num = dict_arr[ch-48];
	}
	
	for( int i= 0; i < 4; i++){
     3e4:	2f 5f       	subi	r18, 0xFF	; 255
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255
     3e8:	24 30       	cpi	r18, 0x04	; 4
     3ea:	31 05       	cpc	r19, r1
     3ec:	14 f3       	brlt	.-60     	; 0x3b2 <write_char+0x6c>
		address+=5;
		
	}
	
	
}
     3ee:	a8 96       	adiw	r28, 0x28	; 40
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	1f 91       	pop	r17
     400:	08 95       	ret

00000402 <print_at>:

/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/

void print_at(uint8_t num, uint8_t pos, uint8_t width){
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	18 2f       	mov	r17, r24
     40c:	06 2f       	mov	r16, r22
	for(int i = width-1; i >= 0; i--){
     40e:	c4 2f       	mov	r28, r20
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	21 97       	sbiw	r28, 0x01	; 1
     414:	1a c0       	rjmp	.+52     	; 0x44a <print_at+0x48>
		uint8_t temp = num%10;
     416:	9d ec       	ldi	r25, 0xCD	; 205
     418:	19 9f       	mul	r17, r25
     41a:	91 2d       	mov	r25, r1
     41c:	11 24       	eor	r1, r1
     41e:	89 2f       	mov	r24, r25
     420:	86 95       	lsr	r24
     422:	86 95       	lsr	r24
     424:	86 95       	lsr	r24
     426:	88 0f       	add	r24, r24
     428:	28 2f       	mov	r18, r24
     42a:	22 0f       	add	r18, r18
     42c:	22 0f       	add	r18, r18
     42e:	82 0f       	add	r24, r18
     430:	18 1b       	sub	r17, r24
     432:	81 2f       	mov	r24, r17
		num = num/10;
     434:	19 2f       	mov	r17, r25
     436:	16 95       	lsr	r17
     438:	16 95       	lsr	r17
     43a:	16 95       	lsr	r17
		write_char(temp+48,pos+i);
     43c:	be 01       	movw	r22, r28
     43e:	60 0f       	add	r22, r16
     440:	71 1d       	adc	r23, r1
     442:	80 5d       	subi	r24, 0xD0	; 208
     444:	0e 94 a3 01 	call	0x346	; 0x346 <write_char>
/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/

void print_at(uint8_t num, uint8_t pos, uint8_t width){
	for(int i = width-1; i >= 0; i--){
     448:	21 97       	sbiw	r28, 0x01	; 1
     44a:	dd 23       	and	r29, r29
     44c:	24 f7       	brge	.-56     	; 0x416 <print_at+0x14>
		uint8_t temp = num%10;
		num = num/10;
		write_char(temp+48,pos+i);
	}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <init_outputs>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     458:	8d b1       	in	r24, 0x0d	; 13
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     45a:	80 65       	ori	r24, 0x50	; 80
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     45c:	8d b9       	out	0x0d, r24	; 13
     45e:	08 95       	ret

00000460 <init_joystick>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     460:	85 b1       	in	r24, 0x05	; 5
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     462:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     464:	85 b9       	out	0x05, r24	; 5
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     466:	8e b1       	in	r24, 0x0e	; 14
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     468:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     46a:	8e b9       	out	0x0e, r24	; 14
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     46c:	8d b3       	in	r24, 0x1d	; 29
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     46e:	80 6c       	ori	r24, 0xC0	; 192
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     470:	8d bb       	out	0x1d, r24	; 29
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     472:	eb e6       	ldi	r30, 0x6B	; 107
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     478:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     47a:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     47c:	ec e6       	ldi	r30, 0x6C	; 108
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
inline void write_8_field(volatile uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     482:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     484:	80 83       	st	Z, r24
	write_8_field(&EIMSK,3,2,6); // Enable all external interrupt registers
	write_8_field(&PCMSK0,3,2,2); // Enable interrupts on PCINT2,3
	write_8_field(&PCMSK1,3,2,6); // Enable interrupts PCINT15,14
	write_8_field(&PCMSK1,1,1,4); // Enable interrupts for PCINT12
	// Installing handelers for the relevabt actions
	INSTALL(&interrupts,left_right_handeler,IRQ_PCINT0);	
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	60 e3       	ldi	r22, 0x30	; 48
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <install>
	INSTALL(&interrupts,upp_down_press_handeler,IRQ_PCINT1);
     494:	42 e0       	ldi	r20, 0x02	; 2
     496:	60 e5       	ldi	r22, 0x50	; 80
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <install>
     4a2:	08 95       	ret

000004a4 <main>:
}
int main(void)
{
	init_lcd();
     4a4:	0e 94 8b 01 	call	0x316	; 0x316 <init_lcd>
	init_outputs();
     4a8:	0e 94 2c 02 	call	0x458	; 0x458 <init_outputs>
	init_joystick();
     4ac:	0e 94 30 02 	call	0x460	; 0x460 <init_joystick>
	// Launching tiny timber, with the app_entry function
	return TINYTIMBER(&app,app_entry,0);
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	6f ef       	ldi	r22, 0xFF	; 255
     4b6:	70 e1       	ldi	r23, 0x10	; 16
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <tinytimber>
}
     4c0:	08 95       	ret

000004c2 <pulse>:
 * Created: 2022-02-22 14:27:18
 *  Author: ivarj
 */ 
#include "../include/puls_gen.h"

void pulse(pulse_gen *self, uint8_t arg){
     4c2:	5f 92       	push	r5
     4c4:	6f 92       	push	r6
     4c6:	7f 92       	push	r7
     4c8:	8f 92       	push	r8
     4ca:	9f 92       	push	r9
     4cc:	af 92       	push	r10
     4ce:	bf 92       	push	r11
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	ec 01       	movw	r28, r24
	self->running = 1;
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	8a 87       	std	Y+10, r24	; 0x0a
	uint64_t delay = 1000000/self->freq;
     4e6:	2c 81       	ldd	r18, Y+4	; 0x04
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	60 e4       	ldi	r22, 0x40	; 64
     4f0:	72 e4       	ldi	r23, 0x42	; 66
     4f2:	8f e0       	ldi	r24, 0x0F	; 15
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 4b 11 	call	0x2296	; 0x2296 <__divmodsi4>
     4fa:	69 01       	movw	r12, r18
     4fc:	7a 01       	movw	r14, r20
     4fe:	49 01       	movw	r8, r18
     500:	5a 01       	movw	r10, r20
     502:	bb 0c       	add	r11, r11
     504:	88 08       	sbc	r8, r8
     506:	98 2c       	mov	r9, r8
     508:	54 01       	movw	r10, r8
	SYNC(self->reg_handeler,toggle_bit,self->bit_offset);
     50a:	4d 81       	ldd	r20, Y+5	; 0x05
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	60 e7       	ldi	r22, 0x70	; 112
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	8e 81       	ldd	r24, Y+6	; 0x06
     514:	9f 81       	ldd	r25, Y+7	; 0x07
     516:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <sync>
	self->last_message = AFTER(USEC(delay/2),self,pulse,0);
     51a:	2c 2d       	mov	r18, r12
     51c:	3d 2d       	mov	r19, r13
     51e:	4e 2d       	mov	r20, r14
     520:	5f 2d       	mov	r21, r15
     522:	68 2d       	mov	r22, r8
     524:	78 2d       	mov	r23, r8
     526:	88 2d       	mov	r24, r8
     528:	98 2d       	mov	r25, r8
     52a:	01 e0       	ldi	r16, 0x01	; 1
     52c:	0e 94 85 11 	call	0x230a	; 0x230a <__lshrdi3>
     530:	72 2e       	mov	r7, r18
     532:	83 2e       	mov	r8, r19
     534:	94 2e       	mov	r9, r20
     536:	b5 2f       	mov	r27, r21
     538:	a6 2f       	mov	r26, r22
     53a:	f7 2f       	mov	r31, r23
     53c:	e8 2f       	mov	r30, r24
     53e:	59 2e       	mov	r5, r25
     540:	02 e0       	ldi	r16, 0x02	; 2
     542:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__ashldi3>
     546:	a2 2e       	mov	r10, r18
     548:	b3 2e       	mov	r11, r19
     54a:	c4 2e       	mov	r12, r20
     54c:	d5 2e       	mov	r13, r21
     54e:	e6 2e       	mov	r14, r22
     550:	f7 2e       	mov	r15, r23
     552:	68 2e       	mov	r6, r24
     554:	19 2f       	mov	r17, r25
     556:	05 e0       	ldi	r16, 0x05	; 5
     558:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <__ashldi3>
     55c:	06 2d       	mov	r16, r6
     55e:	0e 94 aa 11 	call	0x2354	; 0x2354 <__subdi3>
     562:	a7 2c       	mov	r10, r7
     564:	b8 2c       	mov	r11, r8
     566:	c9 2c       	mov	r12, r9
     568:	db 2e       	mov	r13, r27
     56a:	ea 2e       	mov	r14, r26
     56c:	ff 2e       	mov	r15, r31
     56e:	0e 2f       	mov	r16, r30
     570:	15 2d       	mov	r17, r5
     572:	0e 94 a1 11 	call	0x2342	; 0x2342 <__adddi3>
     576:	02 e0       	ldi	r16, 0x02	; 2
     578:	0e 94 85 11 	call	0x230a	; 0x230a <__lshrdi3>
     57c:	62 2f       	mov	r22, r18
     57e:	73 2f       	mov	r23, r19
     580:	84 2f       	mov	r24, r20
     582:	95 2f       	mov	r25, r21
     584:	28 ee       	ldi	r18, 0xE8	; 232
     586:	33 e0       	ldi	r19, 0x03	; 3
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	0e 94 4b 11 	call	0x2296	; 0x2296 <__divmodsi4>
     590:	ca 01       	movw	r24, r20
     592:	b9 01       	movw	r22, r18
     594:	c1 2c       	mov	r12, r1
     596:	d1 2c       	mov	r13, r1
     598:	0f 2e       	mov	r0, r31
     59a:	f1 e6       	ldi	r31, 0x61	; 97
     59c:	ef 2e       	mov	r14, r31
     59e:	f2 e0       	ldi	r31, 0x02	; 2
     5a0:	ff 2e       	mov	r15, r31
     5a2:	f0 2d       	mov	r31, r0
     5a4:	8e 01       	movw	r16, r28
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     5b0:	99 87       	std	Y+9, r25	; 0x09
     5b2:	88 87       	std	Y+8, r24	; 0x08
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	0f 91       	pop	r16
     5bc:	ff 90       	pop	r15
     5be:	ef 90       	pop	r14
     5c0:	df 90       	pop	r13
     5c2:	cf 90       	pop	r12
     5c4:	bf 90       	pop	r11
     5c6:	af 90       	pop	r10
     5c8:	9f 90       	pop	r9
     5ca:	8f 90       	pop	r8
     5cc:	7f 90       	pop	r7
     5ce:	6f 90       	pop	r6
     5d0:	5f 90       	pop	r5
     5d2:	08 95       	ret

000005d4 <disable>:
void disable(pulse_gen *self, int arg){
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
	ABORT(self->last_message);
     5da:	88 85       	ldd	r24, Y+8	; 0x08
     5dc:	99 85       	ldd	r25, Y+9	; 0x09
     5de:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <ABORT>
	self->running = 0;
     5e2:	1a 86       	std	Y+10, r1	; 0x0a
	SYNC(self->reg_handeler,set_low,self->bit_offset);
     5e4:	4d 81       	ldd	r20, Y+5	; 0x05
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	6d e7       	ldi	r22, 0x7D	; 125
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	8e 81       	ldd	r24, Y+6	; 0x06
     5ee:	9f 81       	ldd	r25, Y+7	; 0x07
     5f0:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <sync>
	
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <change_freq>:
// Gets applied in the next cycle
void change_freq(pulse_gen *self,uint8_t freq){
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
	self->freq = freq;
     606:	fc 01       	movw	r30, r24
     608:	64 83       	std	Z+4, r22	; 0x04
	if(freq == 0)
     60a:	61 11       	cpse	r22, r1
     60c:	12 c0       	rjmp	.+36     	; 0x632 <change_freq+0x38>
		ASYNC(self,disable,0);
     60e:	c1 2c       	mov	r12, r1
     610:	d1 2c       	mov	r13, r1
     612:	0f 2e       	mov	r0, r31
     614:	fa ee       	ldi	r31, 0xEA	; 234
     616:	ef 2e       	mov	r14, r31
     618:	f2 e0       	ldi	r31, 0x02	; 2
     61a:	ff 2e       	mov	r15, r31
     61c:	f0 2d       	mov	r31, r0
     61e:	8c 01       	movw	r16, r24
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	a9 01       	movw	r20, r18
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	cb 01       	movw	r24, r22
     62c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
     630:	15 c0       	rjmp	.+42     	; 0x65c <change_freq+0x62>
	else if(self->running == 0)
     632:	fc 01       	movw	r30, r24
     634:	22 85       	ldd	r18, Z+10	; 0x0a
     636:	21 11       	cpse	r18, r1
     638:	11 c0       	rjmp	.+34     	; 0x65c <change_freq+0x62>
		ASYNC(self,pulse,0);
     63a:	c1 2c       	mov	r12, r1
     63c:	d1 2c       	mov	r13, r1
     63e:	0f 2e       	mov	r0, r31
     640:	f1 e6       	ldi	r31, 0x61	; 97
     642:	ef 2e       	mov	r14, r31
     644:	f2 e0       	ldi	r31, 0x02	; 2
     646:	ff 2e       	mov	r15, r31
     648:	f0 2d       	mov	r31, r0
     64a:	8c 01       	movw	r16, r24
     64c:	20 e0       	ldi	r18, 0x00	; 0
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	a9 01       	movw	r20, r18
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	cb 01       	movw	r24, r22
     658:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
}
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	08 95       	ret

0000066a <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     66a:	db 01       	movw	r26, r22
     66c:	ed 91       	ld	r30, X+
     66e:	fc 91       	ld	r31, X
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	04 c0       	rjmp	.+8      	; 0x67e <remove+0x14>
     676:	df 01       	movw	r26, r30
     678:	01 90       	ld	r0, Z+
     67a:	f0 81       	ld	r31, Z
     67c:	e0 2d       	mov	r30, r0
     67e:	30 97       	sbiw	r30, 0x00	; 0
     680:	19 f0       	breq	.+6      	; 0x688 <remove+0x1e>
     682:	e8 17       	cp	r30, r24
     684:	f9 07       	cpc	r31, r25
     686:	b9 f7       	brne	.-18     	; 0x676 <remove+0xc>
     688:	30 97       	sbiw	r30, 0x00	; 0
     68a:	89 f0       	breq	.+34     	; 0x6ae <remove+0x44>
     68c:	10 97       	sbiw	r26, 0x00	; 0
     68e:	39 f0       	breq	.+14     	; 0x69e <remove+0x34>
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	8d 93       	st	X+, r24
     696:	9c 93       	st	X, r25
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	08 95       	ret
     69e:	80 81       	ld	r24, Z
     6a0:	91 81       	ldd	r25, Z+1	; 0x01
     6a2:	fb 01       	movw	r30, r22
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	80 83       	st	Z, r24
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	08 95       	ret
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	08 95       	ret

000006b4 <initialize>:
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <initialize+0x6>
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <initialize+0x8>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	18 c0       	rjmp	.+48     	; 0x6f6 <initialize+0x42>
     6c6:	ac 01       	movw	r20, r24
     6c8:	4f 5f       	subi	r20, 0xFF	; 255
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	9a 01       	movw	r18, r20
     6ce:	22 95       	swap	r18
     6d0:	32 95       	swap	r19
     6d2:	30 7f       	andi	r19, 0xF0	; 240
     6d4:	32 27       	eor	r19, r18
     6d6:	20 7f       	andi	r18, 0xF0	; 240
     6d8:	32 27       	eor	r19, r18
     6da:	2d 5b       	subi	r18, 0xBD	; 189
     6dc:	3d 4f       	sbci	r19, 0xFD	; 253
     6de:	82 95       	swap	r24
     6e0:	92 95       	swap	r25
     6e2:	90 7f       	andi	r25, 0xF0	; 240
     6e4:	98 27       	eor	r25, r24
     6e6:	80 7f       	andi	r24, 0xF0	; 240
     6e8:	98 27       	eor	r25, r24
     6ea:	fc 01       	movw	r30, r24
     6ec:	ed 5b       	subi	r30, 0xBD	; 189
     6ee:	fd 4f       	sbci	r31, 0xFD	; 253
     6f0:	31 83       	std	Z+1, r19	; 0x01
     6f2:	20 83       	st	Z, r18
     6f4:	ca 01       	movw	r24, r20
     6f6:	8e 30       	cpi	r24, 0x0E	; 14
     6f8:	91 05       	cpc	r25, r1
     6fa:	2c f3       	brlt	.-54     	; 0x6c6 <initialize+0x12>
     6fc:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <messages+0xe1>
     700:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <messages+0xe0>
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	15 c0       	rjmp	.+42     	; 0x734 <initialize+0x80>
     70a:	ac 01       	movw	r20, r24
     70c:	4f 5f       	subi	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	6d e1       	ldi	r22, 0x1D	; 29
     712:	64 9f       	mul	r22, r20
     714:	90 01       	movw	r18, r0
     716:	65 9f       	mul	r22, r21
     718:	30 0d       	add	r19, r0
     71a:	11 24       	eor	r1, r1
     71c:	22 57       	subi	r18, 0x72	; 114
     71e:	3e 4f       	sbci	r19, 0xFE	; 254
     720:	68 9f       	mul	r22, r24
     722:	f0 01       	movw	r30, r0
     724:	69 9f       	mul	r22, r25
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	e2 57       	subi	r30, 0x72	; 114
     72c:	fe 4f       	sbci	r31, 0xFE	; 254
     72e:	31 83       	std	Z+1, r19	; 0x01
     730:	20 83       	st	Z, r18
     732:	ca 01       	movw	r24, r20
     734:	83 30       	cpi	r24, 0x03	; 3
     736:	91 05       	cpc	r25, r1
     738:	44 f3       	brlt	.-48     	; 0x70a <initialize+0x56>
     73a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <threads+0x58>
     73e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <threads+0x57>
     742:	1a 82       	std	Y+2, r1	; 0x02
     744:	19 82       	std	Y+1, r1	; 0x01
     746:	32 c0       	rjmp	.+100    	; 0x7ac <initialize+0xf8>
     748:	2d e1       	ldi	r18, 0x1D	; 29
     74a:	49 81       	ldd	r20, Y+1	; 0x01
     74c:	5a 81       	ldd	r21, Y+2	; 0x02
     74e:	24 9f       	mul	r18, r20
     750:	c0 01       	movw	r24, r0
     752:	25 9f       	mul	r18, r21
     754:	90 0d       	add	r25, r0
     756:	11 24       	eor	r1, r1
     758:	fc 01       	movw	r30, r24
     75a:	ec 56       	subi	r30, 0x6C	; 108
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	fc 83       	std	Y+4, r31	; 0x04
     760:	eb 83       	std	Y+3, r30	; 0x03
     762:	cf 01       	movw	r24, r30
     764:	0e 94 d5 11 	call	0x23aa	; 0x23aa <setjmp>
     768:	20 e6       	ldi	r18, 0x60	; 96
     76a:	49 81       	ldd	r20, Y+1	; 0x01
     76c:	5a 81       	ldd	r21, Y+2	; 0x02
     76e:	24 9f       	mul	r18, r20
     770:	c0 01       	movw	r24, r0
     772:	25 9f       	mul	r18, r21
     774:	90 0d       	add	r25, r0
     776:	11 24       	eor	r1, r1
     778:	81 57       	subi	r24, 0x71	; 113
     77a:	9c 4f       	sbci	r25, 0xFC	; 252
     77c:	eb 81       	ldd	r30, Y+3	; 0x03
     77e:	fc 81       	ldd	r31, Y+4	; 0x04
     780:	91 8b       	std	Z+17, r25	; 0x11
     782:	80 8b       	std	Z+16, r24	; 0x10
     784:	93 8b       	std	Z+19, r25	; 0x13
     786:	82 8b       	std	Z+18, r24	; 0x12
     788:	86 e3       	ldi	r24, 0x36	; 54
     78a:	9f e0       	ldi	r25, 0x0F	; 15
     78c:	96 8b       	std	Z+22, r25	; 0x16
     78e:	85 8b       	std	Z+21, r24	; 0x15
     790:	8d e1       	ldi	r24, 0x1D	; 29
     792:	84 9f       	mul	r24, r20
     794:	f0 01       	movw	r30, r0
     796:	85 9f       	mul	r24, r21
     798:	f0 0d       	add	r31, r0
     79a:	11 24       	eor	r1, r1
     79c:	e2 57       	subi	r30, 0x72	; 114
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	15 82       	std	Z+5, r1	; 0x05
     7a2:	14 82       	std	Z+4, r1	; 0x04
     7a4:	4f 5f       	subi	r20, 0xFF	; 255
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	5a 83       	std	Y+2, r21	; 0x02
     7aa:	49 83       	std	Y+1, r20	; 0x01
     7ac:	29 81       	ldd	r18, Y+1	; 0x01
     7ae:	3a 81       	ldd	r19, Y+2	; 0x02
     7b0:	24 30       	cpi	r18, 0x04	; 4
     7b2:	31 05       	cpc	r19, r1
     7b4:	4c f2       	brlt	.-110    	; 0x748 <initialize+0x94>
     7b6:	e6 e2       	ldi	r30, 0x26	; 38
     7b8:	f2 e0       	ldi	r31, 0x02	; 2
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1
     7be:	15 82       	std	Z+5, r1	; 0x05
     7c0:	14 82       	std	Z+4, r1	; 0x04
     7c2:	13 82       	std	Z+3, r1	; 0x03
     7c4:	12 82       	std	Z+2, r1	; 0x02
     7c6:	e1 e6       	ldi	r30, 0x61	; 97
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 e8       	ldi	r24, 0x80	; 128
     7cc:	80 83       	st	Z, r24
     7ce:	10 82       	st	Z, r1
     7d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7d8:	84 e0       	ldi	r24, 0x04	; 4
     7da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <dispatch>:
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <dispatch+0x6>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
     804:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
     808:	06 96       	adiw	r24, 0x06	; 6
     80a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <setjmp>
     80e:	89 2b       	or	r24, r25
     810:	59 f4       	brne	.+22     	; 0x828 <dispatch+0x36>
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current+0x1>
     81a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current>
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	06 96       	adiw	r24, 0x06	; 6
     824:	0e 94 f5 11 	call	0x23ea	; 0x23ea <longjmp>
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <enqueueByDeadline>:
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	eb 01       	movw	r28, r22
     840:	e8 81       	ld	r30, Y
     842:	f9 81       	ldd	r31, Y+1	; 0x01
     844:	c0 e0       	ldi	r28, 0x00	; 0
     846:	d0 e0       	ldi	r29, 0x00	; 0
     848:	04 c0       	rjmp	.+8      	; 0x852 <enqueueByDeadline+0x20>
     84a:	ef 01       	movw	r28, r30
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
     852:	30 97       	sbiw	r30, 0x00	; 0
     854:	79 f0       	breq	.+30     	; 0x874 <enqueueByDeadline+0x42>
     856:	06 81       	ldd	r16, Z+6	; 0x06
     858:	17 81       	ldd	r17, Z+7	; 0x07
     85a:	20 85       	ldd	r18, Z+8	; 0x08
     85c:	31 85       	ldd	r19, Z+9	; 0x09
     85e:	16 96       	adiw	r26, 0x06	; 6
     860:	4d 91       	ld	r20, X+
     862:	5d 91       	ld	r21, X+
     864:	6d 91       	ld	r22, X+
     866:	7c 91       	ld	r23, X
     868:	19 97       	sbiw	r26, 0x09	; 9
     86a:	40 17       	cp	r20, r16
     86c:	51 07       	cpc	r21, r17
     86e:	62 07       	cpc	r22, r18
     870:	73 07       	cpc	r23, r19
     872:	5c f7       	brge	.-42     	; 0x84a <enqueueByDeadline+0x18>
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	fc 93       	st	X, r31
     878:	ee 93       	st	-X, r30
     87a:	20 97       	sbiw	r28, 0x00	; 0
     87c:	21 f4       	brne	.+8      	; 0x886 <enqueueByDeadline+0x54>
     87e:	fc 01       	movw	r30, r24
     880:	b1 83       	std	Z+1, r27	; 0x01
     882:	a0 83       	st	Z, r26
     884:	02 c0       	rjmp	.+4      	; 0x88a <enqueueByDeadline+0x58>
     886:	b9 83       	std	Y+1, r27	; 0x01
     888:	a8 83       	st	Y, r26
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	08 95       	ret

00000894 <enqueueByBaseline>:
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	eb 01       	movw	r28, r22
     8a2:	e8 81       	ld	r30, Y
     8a4:	f9 81       	ldd	r31, Y+1	; 0x01
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	d0 e0       	ldi	r29, 0x00	; 0
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <enqueueByBaseline+0x20>
     8ac:	ef 01       	movw	r28, r30
     8ae:	01 90       	ld	r0, Z+
     8b0:	f0 81       	ld	r31, Z
     8b2:	e0 2d       	mov	r30, r0
     8b4:	30 97       	sbiw	r30, 0x00	; 0
     8b6:	79 f0       	breq	.+30     	; 0x8d6 <enqueueByBaseline+0x42>
     8b8:	02 81       	ldd	r16, Z+2	; 0x02
     8ba:	13 81       	ldd	r17, Z+3	; 0x03
     8bc:	24 81       	ldd	r18, Z+4	; 0x04
     8be:	35 81       	ldd	r19, Z+5	; 0x05
     8c0:	12 96       	adiw	r26, 0x02	; 2
     8c2:	4d 91       	ld	r20, X+
     8c4:	5d 91       	ld	r21, X+
     8c6:	6d 91       	ld	r22, X+
     8c8:	7c 91       	ld	r23, X
     8ca:	15 97       	sbiw	r26, 0x05	; 5
     8cc:	40 17       	cp	r20, r16
     8ce:	51 07       	cpc	r21, r17
     8d0:	62 07       	cpc	r22, r18
     8d2:	73 07       	cpc	r23, r19
     8d4:	5c f7       	brge	.-42     	; 0x8ac <enqueueByBaseline+0x18>
     8d6:	11 96       	adiw	r26, 0x01	; 1
     8d8:	fc 93       	st	X, r31
     8da:	ee 93       	st	-X, r30
     8dc:	20 97       	sbiw	r28, 0x00	; 0
     8de:	21 f4       	brne	.+8      	; 0x8e8 <enqueueByBaseline+0x54>
     8e0:	fc 01       	movw	r30, r24
     8e2:	b1 83       	std	Z+1, r27	; 0x01
     8e4:	a0 83       	st	Z, r26
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <enqueueByBaseline+0x58>
     8e8:	b9 83       	std	Y+1, r27	; 0x01
     8ea:	a8 83       	st	Y, r26
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <dequeue>:
     8f6:	dc 01       	movw	r26, r24
     8f8:	ed 91       	ld	r30, X+
     8fa:	fc 91       	ld	r31, X
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	30 97       	sbiw	r30, 0x00	; 0
     900:	59 f4       	brne	.+22     	; 0x918 <dequeue+0x22>
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     908:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     90c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	83 bf       	out	0x33, r24	; 51
     914:	88 95       	sleep
     916:	fc cf       	rjmp	.-8      	; 0x910 <dequeue+0x1a>
     918:	20 81       	ld	r18, Z
     91a:	31 81       	ldd	r19, Z+1	; 0x01
     91c:	2d 93       	st	X+, r18
     91e:	3c 93       	st	X, r19
     920:	cf 01       	movw	r24, r30
     922:	08 95       	ret

00000924 <insert>:
     924:	fb 01       	movw	r30, r22
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	fc 01       	movw	r30, r24
     92c:	31 83       	std	Z+1, r19	; 0x01
     92e:	20 83       	st	Z, r18
     930:	fb 01       	movw	r30, r22
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <push>:
     938:	fb 01       	movw	r30, r22
     93a:	20 81       	ld	r18, Z
     93c:	31 81       	ldd	r19, Z+1	; 0x01
     93e:	fc 01       	movw	r30, r24
     940:	31 83       	std	Z+1, r19	; 0x01
     942:	20 83       	st	Z, r18
     944:	fb 01       	movw	r30, r22
     946:	91 83       	std	Z+1, r25	; 0x01
     948:	80 83       	st	Z, r24
     94a:	08 95       	ret

0000094c <pop>:
     94c:	dc 01       	movw	r26, r24
     94e:	ed 91       	ld	r30, X+
     950:	fc 91       	ld	r31, X
     952:	11 97       	sbiw	r26, 0x01	; 1
     954:	20 81       	ld	r18, Z
     956:	31 81       	ldd	r19, Z+1	; 0x01
     958:	2d 93       	st	X+, r18
     95a:	3c 93       	st	X, r19
     95c:	cf 01       	movw	r24, r30
     95e:	08 95       	ret

00000960 <schedule>:
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
     968:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
     96c:	c2 81       	ldd	r28, Z+2	; 0x02
     96e:	d3 81       	ldd	r29, Z+3	; 0x03
     970:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
     974:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
     978:	30 97       	sbiw	r30, 0x00	; 0
     97a:	19 f1       	breq	.+70     	; 0x9c2 <schedule+0x62>
     97c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
     980:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
     984:	89 2b       	or	r24, r25
     986:	e9 f0       	breq	.+58     	; 0x9c2 <schedule+0x62>
     988:	20 97       	sbiw	r28, 0x00	; 0
     98a:	69 f0       	breq	.+26     	; 0x9a6 <schedule+0x46>
     98c:	86 81       	ldd	r24, Z+6	; 0x06
     98e:	97 81       	ldd	r25, Z+7	; 0x07
     990:	a0 85       	ldd	r26, Z+8	; 0x08
     992:	b1 85       	ldd	r27, Z+9	; 0x09
     994:	4e 81       	ldd	r20, Y+6	; 0x06
     996:	5f 81       	ldd	r21, Y+7	; 0x07
     998:	68 85       	ldd	r22, Y+8	; 0x08
     99a:	79 85       	ldd	r23, Y+9	; 0x09
     99c:	84 1b       	sub	r24, r20
     99e:	95 0b       	sbc	r25, r21
     9a0:	a6 0b       	sbc	r26, r22
     9a2:	b7 0b       	sbc	r27, r23
     9a4:	72 f4       	brpl	.+28     	; 0x9c2 <schedule+0x62>
     9a6:	80 e3       	ldi	r24, 0x30	; 48
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	0e 94 a6 04 	call	0x94c	; 0x94c <pop>
     9ae:	6e e2       	ldi	r22, 0x2E	; 46
     9b0:	71 e0       	ldi	r23, 0x01	; 1
     9b2:	0e 94 9c 04 	call	0x938	; 0x938 <push>
     9b6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <activeStack>
     9ba:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <activeStack+0x1>
     9be:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dispatch>
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	08 95       	ret

000009c8 <__vector_1>:
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	4f 93       	push	r20
     9dc:	5f 93       	push	r21
     9de:	6f 93       	push	r22
     9e0:	7f 93       	push	r23
     9e2:	8f 93       	push	r24
     9e4:	9f 93       	push	r25
     9e6:	af 93       	push	r26
     9e8:	bf 93       	push	r27
     9ea:	ef 93       	push	r30
     9ec:	ff 93       	push	r31
     9ee:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     9f2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     9f6:	ac 01       	movw	r20, r24
     9f8:	09 2e       	mov	r0, r25
     9fa:	00 0c       	add	r0, r0
     9fc:	66 0b       	sbc	r22, r22
     9fe:	77 0b       	sbc	r23, r23
     a00:	9a 01       	movw	r18, r20
     a02:	11 27       	eor	r17, r17
     a04:	00 27       	eor	r16, r16
     a06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	40 2b       	or	r20, r16
     a14:	51 2b       	or	r21, r17
     a16:	62 2b       	or	r22, r18
     a18:	73 2b       	or	r23, r19
     a1a:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     a1e:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     a22:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     a26:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     a2a:	b0 9b       	sbis	0x16, 0	; 22
     a2c:	1a c0       	rjmp	.+52     	; 0xa62 <__vector_1+0x9a>
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	09 2e       	mov	r0, r25
     a32:	00 0c       	add	r0, r0
     a34:	aa 0b       	sbc	r26, r26
     a36:	bb 0b       	sbc	r27, r27
     a38:	bc 01       	movw	r22, r24
     a3a:	55 27       	eor	r21, r21
     a3c:	44 27       	eor	r20, r20
     a3e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a42:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	84 2b       	or	r24, r20
     a4c:	95 2b       	or	r25, r21
     a4e:	a6 2b       	or	r26, r22
     a50:	b7 2b       	or	r27, r23
     a52:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     a56:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     a5a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     a5e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     a62:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable>
     a66:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	39 f0       	breq	.+14     	; 0xa7c <__vector_1+0xb4>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable>
     a76:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1>
     a7a:	09 95       	icall
     a7c:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_2>:
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
     acc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     ad0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     ad4:	ac 01       	movw	r20, r24
     ad6:	09 2e       	mov	r0, r25
     ad8:	00 0c       	add	r0, r0
     ada:	66 0b       	sbc	r22, r22
     adc:	77 0b       	sbc	r23, r23
     ade:	9a 01       	movw	r18, r20
     ae0:	11 27       	eor	r17, r17
     ae2:	00 27       	eor	r16, r16
     ae4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ae8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	40 2b       	or	r20, r16
     af2:	51 2b       	or	r21, r17
     af4:	62 2b       	or	r22, r18
     af6:	73 2b       	or	r23, r19
     af8:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     afc:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     b00:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     b04:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     b08:	b0 9b       	sbis	0x16, 0	; 22
     b0a:	1a c0       	rjmp	.+52     	; 0xb40 <__vector_2+0x9a>
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	09 2e       	mov	r0, r25
     b10:	00 0c       	add	r0, r0
     b12:	aa 0b       	sbc	r26, r26
     b14:	bb 0b       	sbc	r27, r27
     b16:	bc 01       	movw	r22, r24
     b18:	55 27       	eor	r21, r21
     b1a:	44 27       	eor	r20, r20
     b1c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b20:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	84 2b       	or	r24, r20
     b2a:	95 2b       	or	r25, r21
     b2c:	a6 2b       	or	r26, r22
     b2e:	b7 2b       	or	r27, r23
     b30:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     b34:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     b38:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     b3c:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     b40:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x2>
     b44:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x3>
     b48:	30 97       	sbiw	r30, 0x00	; 0
     b4a:	39 f0       	breq	.+14     	; 0xb5a <__vector_2+0xb4>
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x2>
     b54:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x3>
     b58:	09 95       	icall
     b5a:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_3>:
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
     baa:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     bae:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     bb2:	ac 01       	movw	r20, r24
     bb4:	09 2e       	mov	r0, r25
     bb6:	00 0c       	add	r0, r0
     bb8:	66 0b       	sbc	r22, r22
     bba:	77 0b       	sbc	r23, r23
     bbc:	9a 01       	movw	r18, r20
     bbe:	11 27       	eor	r17, r17
     bc0:	00 27       	eor	r16, r16
     bc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	40 2b       	or	r20, r16
     bd0:	51 2b       	or	r21, r17
     bd2:	62 2b       	or	r22, r18
     bd4:	73 2b       	or	r23, r19
     bd6:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     bda:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     bde:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     be2:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     be6:	b0 9b       	sbis	0x16, 0	; 22
     be8:	1a c0       	rjmp	.+52     	; 0xc1e <__vector_3+0x9a>
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	09 2e       	mov	r0, r25
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	bc 01       	movw	r22, r24
     bf6:	55 27       	eor	r21, r21
     bf8:	44 27       	eor	r20, r20
     bfa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bfe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c02:	a0 e0       	ldi	r26, 0x00	; 0
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	84 2b       	or	r24, r20
     c08:	95 2b       	or	r25, r21
     c0a:	a6 2b       	or	r26, r22
     c0c:	b7 2b       	or	r27, r23
     c0e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     c12:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     c16:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     c1a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     c1e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x4>
     c22:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x5>
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	39 f0       	breq	.+14     	; 0xc38 <__vector_3+0xb4>
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x4>
     c32:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x5>
     c36:	09 95       	icall
     c38:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_4>:
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	2f 93       	push	r18
     c72:	3f 93       	push	r19
     c74:	4f 93       	push	r20
     c76:	5f 93       	push	r21
     c78:	6f 93       	push	r22
     c7a:	7f 93       	push	r23
     c7c:	8f 93       	push	r24
     c7e:	9f 93       	push	r25
     c80:	af 93       	push	r26
     c82:	bf 93       	push	r27
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     c8c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     c90:	ac 01       	movw	r20, r24
     c92:	09 2e       	mov	r0, r25
     c94:	00 0c       	add	r0, r0
     c96:	66 0b       	sbc	r22, r22
     c98:	77 0b       	sbc	r23, r23
     c9a:	9a 01       	movw	r18, r20
     c9c:	11 27       	eor	r17, r17
     c9e:	00 27       	eor	r16, r16
     ca0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ca4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	40 2b       	or	r20, r16
     cae:	51 2b       	or	r21, r17
     cb0:	62 2b       	or	r22, r18
     cb2:	73 2b       	or	r23, r19
     cb4:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     cb8:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     cbc:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     cc0:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     cc4:	b0 9b       	sbis	0x16, 0	; 22
     cc6:	1a c0       	rjmp	.+52     	; 0xcfc <__vector_4+0x9a>
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	09 2e       	mov	r0, r25
     ccc:	00 0c       	add	r0, r0
     cce:	aa 0b       	sbc	r26, r26
     cd0:	bb 0b       	sbc	r27, r27
     cd2:	bc 01       	movw	r22, r24
     cd4:	55 27       	eor	r21, r21
     cd6:	44 27       	eor	r20, r20
     cd8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cdc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ce0:	a0 e0       	ldi	r26, 0x00	; 0
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	84 2b       	or	r24, r20
     ce6:	95 2b       	or	r25, r21
     ce8:	a6 2b       	or	r26, r22
     cea:	b7 2b       	or	r27, r23
     cec:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     cf0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     cf4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     cf8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     cfc:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x6>
     d00:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x7>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	39 f0       	breq	.+14     	; 0xd16 <__vector_4+0xb4>
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x6>
     d10:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x7>
     d14:	09 95       	icall
     d16:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	bf 91       	pop	r27
     d20:	af 91       	pop	r26
     d22:	9f 91       	pop	r25
     d24:	8f 91       	pop	r24
     d26:	7f 91       	pop	r23
     d28:	6f 91       	pop	r22
     d2a:	5f 91       	pop	r21
     d2c:	4f 91       	pop	r20
     d2e:	3f 91       	pop	r19
     d30:	2f 91       	pop	r18
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <__vector_5>:
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     d6a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     d6e:	ac 01       	movw	r20, r24
     d70:	09 2e       	mov	r0, r25
     d72:	00 0c       	add	r0, r0
     d74:	66 0b       	sbc	r22, r22
     d76:	77 0b       	sbc	r23, r23
     d78:	9a 01       	movw	r18, r20
     d7a:	11 27       	eor	r17, r17
     d7c:	00 27       	eor	r16, r16
     d7e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d82:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	40 2b       	or	r20, r16
     d8c:	51 2b       	or	r21, r17
     d8e:	62 2b       	or	r22, r18
     d90:	73 2b       	or	r23, r19
     d92:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     d96:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     d9a:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     d9e:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     da2:	b0 9b       	sbis	0x16, 0	; 22
     da4:	1a c0       	rjmp	.+52     	; 0xdda <__vector_5+0x9a>
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	09 2e       	mov	r0, r25
     daa:	00 0c       	add	r0, r0
     dac:	aa 0b       	sbc	r26, r26
     dae:	bb 0b       	sbc	r27, r27
     db0:	bc 01       	movw	r22, r24
     db2:	55 27       	eor	r21, r21
     db4:	44 27       	eor	r20, r20
     db6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	84 2b       	or	r24, r20
     dc4:	95 2b       	or	r25, r21
     dc6:	a6 2b       	or	r26, r22
     dc8:	b7 2b       	or	r27, r23
     dca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     dce:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     dd2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     dd6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     dda:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x8>
     dde:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x9>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	39 f0       	breq	.+14     	; 0xdf4 <__vector_5+0xb4>
     de6:	64 e0       	ldi	r22, 0x04	; 4
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x8>
     dee:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x9>
     df2:	09 95       	icall
     df4:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <__vector_10>:
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     e48:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     e4c:	ac 01       	movw	r20, r24
     e4e:	09 2e       	mov	r0, r25
     e50:	00 0c       	add	r0, r0
     e52:	66 0b       	sbc	r22, r22
     e54:	77 0b       	sbc	r23, r23
     e56:	9a 01       	movw	r18, r20
     e58:	11 27       	eor	r17, r17
     e5a:	00 27       	eor	r16, r16
     e5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	40 2b       	or	r20, r16
     e6a:	51 2b       	or	r21, r17
     e6c:	62 2b       	or	r22, r18
     e6e:	73 2b       	or	r23, r19
     e70:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     e74:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     e78:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     e7c:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     e80:	b0 9b       	sbis	0x16, 0	; 22
     e82:	1a c0       	rjmp	.+52     	; 0xeb8 <__vector_10+0x9a>
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	09 2e       	mov	r0, r25
     e88:	00 0c       	add	r0, r0
     e8a:	aa 0b       	sbc	r26, r26
     e8c:	bb 0b       	sbc	r27, r27
     e8e:	bc 01       	movw	r22, r24
     e90:	55 27       	eor	r21, r21
     e92:	44 27       	eor	r20, r20
     e94:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e98:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e9c:	a0 e0       	ldi	r26, 0x00	; 0
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	84 2b       	or	r24, r20
     ea2:	95 2b       	or	r25, r21
     ea4:	a6 2b       	or	r26, r22
     ea6:	b7 2b       	or	r27, r23
     ea8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     eac:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     eb0:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     eb4:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     eb8:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0xa>
     ebc:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0xb>
     ec0:	30 97       	sbiw	r30, 0x00	; 0
     ec2:	39 f0       	breq	.+14     	; 0xed2 <__vector_10+0xb4>
     ec4:	65 e0       	ldi	r22, 0x05	; 5
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0xa>
     ecc:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0xb>
     ed0:	09 95       	icall
     ed2:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     ed6:	ff 91       	pop	r31
     ed8:	ef 91       	pop	r30
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	0f 90       	pop	r0
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	0f 90       	pop	r0
     ef8:	1f 90       	pop	r1
     efa:	18 95       	reti

00000efc <__vector_11>:
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
     f26:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
     f2a:	ac 01       	movw	r20, r24
     f2c:	09 2e       	mov	r0, r25
     f2e:	00 0c       	add	r0, r0
     f30:	66 0b       	sbc	r22, r22
     f32:	77 0b       	sbc	r23, r23
     f34:	9a 01       	movw	r18, r20
     f36:	11 27       	eor	r17, r17
     f38:	00 27       	eor	r16, r16
     f3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	40 2b       	or	r20, r16
     f48:	51 2b       	or	r21, r17
     f4a:	62 2b       	or	r22, r18
     f4c:	73 2b       	or	r23, r19
     f4e:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
     f52:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
     f56:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
     f5a:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
     f5e:	b0 9b       	sbis	0x16, 0	; 22
     f60:	1a c0       	rjmp	.+52     	; 0xf96 <__vector_11+0x9a>
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	09 2e       	mov	r0, r25
     f66:	00 0c       	add	r0, r0
     f68:	aa 0b       	sbc	r26, r26
     f6a:	bb 0b       	sbc	r27, r27
     f6c:	bc 01       	movw	r22, r24
     f6e:	55 27       	eor	r21, r21
     f70:	44 27       	eor	r20, r20
     f72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	84 2b       	or	r24, r20
     f80:	95 2b       	or	r25, r21
     f82:	a6 2b       	or	r26, r22
     f84:	b7 2b       	or	r27, r23
     f86:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
     f8a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
     f8e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
     f92:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
     f96:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0xc>
     f9a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0xd>
     f9e:	30 97       	sbiw	r30, 0x00	; 0
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__vector_11+0xb4>
     fa2:	66 e0       	ldi	r22, 0x06	; 6
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0xc>
     faa:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0xd>
     fae:	09 95       	icall
     fb0:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
     fb4:	ff 91       	pop	r31
     fb6:	ef 91       	pop	r30
     fb8:	bf 91       	pop	r27
     fba:	af 91       	pop	r26
     fbc:	9f 91       	pop	r25
     fbe:	8f 91       	pop	r24
     fc0:	7f 91       	pop	r23
     fc2:	6f 91       	pop	r22
     fc4:	5f 91       	pop	r21
     fc6:	4f 91       	pop	r20
     fc8:	3f 91       	pop	r19
     fca:	2f 91       	pop	r18
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	0f 90       	pop	r0
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	0f 90       	pop	r0
     fd6:	1f 90       	pop	r1
     fd8:	18 95       	reti

00000fda <__vector_12>:
     fda:	1f 92       	push	r1
     fdc:	0f 92       	push	r0
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	0f 92       	push	r0
     fe2:	11 24       	eor	r1, r1
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	2f 93       	push	r18
     fea:	3f 93       	push	r19
     fec:	4f 93       	push	r20
     fee:	5f 93       	push	r21
     ff0:	6f 93       	push	r22
     ff2:	7f 93       	push	r23
     ff4:	8f 93       	push	r24
     ff6:	9f 93       	push	r25
     ff8:	af 93       	push	r26
     ffa:	bf 93       	push	r27
     ffc:	ef 93       	push	r30
     ffe:	ff 93       	push	r31
    1000:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1004:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1008:	ac 01       	movw	r20, r24
    100a:	09 2e       	mov	r0, r25
    100c:	00 0c       	add	r0, r0
    100e:	66 0b       	sbc	r22, r22
    1010:	77 0b       	sbc	r23, r23
    1012:	9a 01       	movw	r18, r20
    1014:	11 27       	eor	r17, r17
    1016:	00 27       	eor	r16, r16
    1018:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    101c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	40 2b       	or	r20, r16
    1026:	51 2b       	or	r21, r17
    1028:	62 2b       	or	r22, r18
    102a:	73 2b       	or	r23, r19
    102c:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    1030:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1034:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    1038:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    103c:	b0 9b       	sbis	0x16, 0	; 22
    103e:	1a c0       	rjmp	.+52     	; 0x1074 <__vector_12+0x9a>
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	09 2e       	mov	r0, r25
    1044:	00 0c       	add	r0, r0
    1046:	aa 0b       	sbc	r26, r26
    1048:	bb 0b       	sbc	r27, r27
    104a:	bc 01       	movw	r22, r24
    104c:	55 27       	eor	r21, r21
    104e:	44 27       	eor	r20, r20
    1050:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1054:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	84 2b       	or	r24, r20
    105e:	95 2b       	or	r25, r21
    1060:	a6 2b       	or	r26, r22
    1062:	b7 2b       	or	r27, r23
    1064:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1068:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    106c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1070:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1074:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0xe>
    1078:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0xf>
    107c:	30 97       	sbiw	r30, 0x00	; 0
    107e:	39 f0       	breq	.+14     	; 0x108e <__vector_12+0xb4>
    1080:	67 e0       	ldi	r22, 0x07	; 7
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0xe>
    1088:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0xf>
    108c:	09 95       	icall
    108e:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_13>:
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	2f 93       	push	r18
    10c8:	3f 93       	push	r19
    10ca:	4f 93       	push	r20
    10cc:	5f 93       	push	r21
    10ce:	6f 93       	push	r22
    10d0:	7f 93       	push	r23
    10d2:	8f 93       	push	r24
    10d4:	9f 93       	push	r25
    10d6:	af 93       	push	r26
    10d8:	bf 93       	push	r27
    10da:	ef 93       	push	r30
    10dc:	ff 93       	push	r31
    10de:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    10e2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    10e6:	ac 01       	movw	r20, r24
    10e8:	09 2e       	mov	r0, r25
    10ea:	00 0c       	add	r0, r0
    10ec:	66 0b       	sbc	r22, r22
    10ee:	77 0b       	sbc	r23, r23
    10f0:	9a 01       	movw	r18, r20
    10f2:	11 27       	eor	r17, r17
    10f4:	00 27       	eor	r16, r16
    10f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	40 2b       	or	r20, r16
    1104:	51 2b       	or	r21, r17
    1106:	62 2b       	or	r22, r18
    1108:	73 2b       	or	r23, r19
    110a:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    110e:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1112:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    1116:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    111a:	b0 9b       	sbis	0x16, 0	; 22
    111c:	1a c0       	rjmp	.+52     	; 0x1152 <__vector_13+0x9a>
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	09 2e       	mov	r0, r25
    1122:	00 0c       	add	r0, r0
    1124:	aa 0b       	sbc	r26, r26
    1126:	bb 0b       	sbc	r27, r27
    1128:	bc 01       	movw	r22, r24
    112a:	55 27       	eor	r21, r21
    112c:	44 27       	eor	r20, r20
    112e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1132:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	84 2b       	or	r24, r20
    113c:	95 2b       	or	r25, r21
    113e:	a6 2b       	or	r26, r22
    1140:	b7 2b       	or	r27, r23
    1142:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1146:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    114a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    114e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1152:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0x10>
    1156:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0x11>
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	39 f0       	breq	.+14     	; 0x116c <__vector_13+0xb4>
    115e:	68 e0       	ldi	r22, 0x08	; 8
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0x10>
    1166:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0x11>
    116a:	09 95       	icall
    116c:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1170:	ff 91       	pop	r31
    1172:	ef 91       	pop	r30
    1174:	bf 91       	pop	r27
    1176:	af 91       	pop	r26
    1178:	9f 91       	pop	r25
    117a:	8f 91       	pop	r24
    117c:	7f 91       	pop	r23
    117e:	6f 91       	pop	r22
    1180:	5f 91       	pop	r21
    1182:	4f 91       	pop	r20
    1184:	3f 91       	pop	r19
    1186:	2f 91       	pop	r18
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	0f 90       	pop	r0
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	0f 90       	pop	r0
    1192:	1f 90       	pop	r1
    1194:	18 95       	reti

00001196 <__vector_14>:
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    11c0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    11c4:	ac 01       	movw	r20, r24
    11c6:	09 2e       	mov	r0, r25
    11c8:	00 0c       	add	r0, r0
    11ca:	66 0b       	sbc	r22, r22
    11cc:	77 0b       	sbc	r23, r23
    11ce:	9a 01       	movw	r18, r20
    11d0:	11 27       	eor	r17, r17
    11d2:	00 27       	eor	r16, r16
    11d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	40 2b       	or	r20, r16
    11e2:	51 2b       	or	r21, r17
    11e4:	62 2b       	or	r22, r18
    11e6:	73 2b       	or	r23, r19
    11e8:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    11ec:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    11f0:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    11f4:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    11f8:	b0 9b       	sbis	0x16, 0	; 22
    11fa:	1a c0       	rjmp	.+52     	; 0x1230 <__vector_14+0x9a>
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	09 2e       	mov	r0, r25
    1200:	00 0c       	add	r0, r0
    1202:	aa 0b       	sbc	r26, r26
    1204:	bb 0b       	sbc	r27, r27
    1206:	bc 01       	movw	r22, r24
    1208:	55 27       	eor	r21, r21
    120a:	44 27       	eor	r20, r20
    120c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1210:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	84 2b       	or	r24, r20
    121a:	95 2b       	or	r25, r21
    121c:	a6 2b       	or	r26, r22
    121e:	b7 2b       	or	r27, r23
    1220:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1224:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1228:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    122c:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1230:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x12>
    1234:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x13>
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	39 f0       	breq	.+14     	; 0x124a <__vector_14+0xb4>
    123c:	69 e0       	ldi	r22, 0x09	; 9
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x12>
    1244:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x13>
    1248:	09 95       	icall
    124a:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	7f 91       	pop	r23
    125c:	6f 91       	pop	r22
    125e:	5f 91       	pop	r21
    1260:	4f 91       	pop	r20
    1262:	3f 91       	pop	r19
    1264:	2f 91       	pop	r18
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0
    1270:	1f 90       	pop	r1
    1272:	18 95       	reti

00001274 <__vector_15>:
    1274:	1f 92       	push	r1
    1276:	0f 92       	push	r0
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	0f 92       	push	r0
    127c:	11 24       	eor	r1, r1
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	2f 93       	push	r18
    1284:	3f 93       	push	r19
    1286:	4f 93       	push	r20
    1288:	5f 93       	push	r21
    128a:	6f 93       	push	r22
    128c:	7f 93       	push	r23
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	ef 93       	push	r30
    1298:	ff 93       	push	r31
    129a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    129e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    12a2:	ac 01       	movw	r20, r24
    12a4:	09 2e       	mov	r0, r25
    12a6:	00 0c       	add	r0, r0
    12a8:	66 0b       	sbc	r22, r22
    12aa:	77 0b       	sbc	r23, r23
    12ac:	9a 01       	movw	r18, r20
    12ae:	11 27       	eor	r17, r17
    12b0:	00 27       	eor	r16, r16
    12b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	40 2b       	or	r20, r16
    12c0:	51 2b       	or	r21, r17
    12c2:	62 2b       	or	r22, r18
    12c4:	73 2b       	or	r23, r19
    12c6:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    12ca:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    12ce:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    12d2:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    12d6:	b0 9b       	sbis	0x16, 0	; 22
    12d8:	1a c0       	rjmp	.+52     	; 0x130e <__vector_15+0x9a>
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	09 2e       	mov	r0, r25
    12de:	00 0c       	add	r0, r0
    12e0:	aa 0b       	sbc	r26, r26
    12e2:	bb 0b       	sbc	r27, r27
    12e4:	bc 01       	movw	r22, r24
    12e6:	55 27       	eor	r21, r21
    12e8:	44 27       	eor	r20, r20
    12ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	84 2b       	or	r24, r20
    12f8:	95 2b       	or	r25, r21
    12fa:	a6 2b       	or	r26, r22
    12fc:	b7 2b       	or	r27, r23
    12fe:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1302:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1306:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    130a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    130e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x14>
    1312:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x15>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	39 f0       	breq	.+14     	; 0x1328 <__vector_15+0xb4>
    131a:	6a e0       	ldi	r22, 0x0A	; 10
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x14>
    1322:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x15>
    1326:	09 95       	icall
    1328:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_16>:
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
    1378:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    137c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1380:	ac 01       	movw	r20, r24
    1382:	09 2e       	mov	r0, r25
    1384:	00 0c       	add	r0, r0
    1386:	66 0b       	sbc	r22, r22
    1388:	77 0b       	sbc	r23, r23
    138a:	9a 01       	movw	r18, r20
    138c:	11 27       	eor	r17, r17
    138e:	00 27       	eor	r16, r16
    1390:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1394:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	40 2b       	or	r20, r16
    139e:	51 2b       	or	r21, r17
    13a0:	62 2b       	or	r22, r18
    13a2:	73 2b       	or	r23, r19
    13a4:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    13a8:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    13ac:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    13b0:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    13b4:	b0 9b       	sbis	0x16, 0	; 22
    13b6:	1a c0       	rjmp	.+52     	; 0x13ec <__vector_16+0x9a>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	09 2e       	mov	r0, r25
    13bc:	00 0c       	add	r0, r0
    13be:	aa 0b       	sbc	r26, r26
    13c0:	bb 0b       	sbc	r27, r27
    13c2:	bc 01       	movw	r22, r24
    13c4:	55 27       	eor	r21, r21
    13c6:	44 27       	eor	r20, r20
    13c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	84 2b       	or	r24, r20
    13d6:	95 2b       	or	r25, r21
    13d8:	a6 2b       	or	r26, r22
    13da:	b7 2b       	or	r27, r23
    13dc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    13e0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    13e4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    13e8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    13ec:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x16>
    13f0:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x17>
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	39 f0       	breq	.+14     	; 0x1406 <__vector_16+0xb4>
    13f8:	6b e0       	ldi	r22, 0x0B	; 11
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x16>
    1400:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x17>
    1404:	09 95       	icall
    1406:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	0f 90       	pop	r0
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	0f 90       	pop	r0
    142c:	1f 90       	pop	r1
    142e:	18 95       	reti

00001430 <__vector_17>:
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    145a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    145e:	ac 01       	movw	r20, r24
    1460:	09 2e       	mov	r0, r25
    1462:	00 0c       	add	r0, r0
    1464:	66 0b       	sbc	r22, r22
    1466:	77 0b       	sbc	r23, r23
    1468:	9a 01       	movw	r18, r20
    146a:	11 27       	eor	r17, r17
    146c:	00 27       	eor	r16, r16
    146e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1472:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	40 2b       	or	r20, r16
    147c:	51 2b       	or	r21, r17
    147e:	62 2b       	or	r22, r18
    1480:	73 2b       	or	r23, r19
    1482:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    1486:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    148a:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    148e:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    1492:	b0 9b       	sbis	0x16, 0	; 22
    1494:	1a c0       	rjmp	.+52     	; 0x14ca <__vector_17+0x9a>
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	09 2e       	mov	r0, r25
    149a:	00 0c       	add	r0, r0
    149c:	aa 0b       	sbc	r26, r26
    149e:	bb 0b       	sbc	r27, r27
    14a0:	bc 01       	movw	r22, r24
    14a2:	55 27       	eor	r21, r21
    14a4:	44 27       	eor	r20, r20
    14a6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14aa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	84 2b       	or	r24, r20
    14b4:	95 2b       	or	r25, r21
    14b6:	a6 2b       	or	r26, r22
    14b8:	b7 2b       	or	r27, r23
    14ba:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    14be:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    14c2:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    14c6:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    14ca:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x18>
    14ce:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x19>
    14d2:	30 97       	sbiw	r30, 0x00	; 0
    14d4:	39 f0       	breq	.+14     	; 0x14e4 <__vector_17+0xb4>
    14d6:	6c e0       	ldi	r22, 0x0C	; 12
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x18>
    14de:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x19>
    14e2:	09 95       	icall
    14e4:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <__vector_18>:
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	2f 93       	push	r18
    151e:	3f 93       	push	r19
    1520:	4f 93       	push	r20
    1522:	5f 93       	push	r21
    1524:	6f 93       	push	r22
    1526:	7f 93       	push	r23
    1528:	8f 93       	push	r24
    152a:	9f 93       	push	r25
    152c:	af 93       	push	r26
    152e:	bf 93       	push	r27
    1530:	ef 93       	push	r30
    1532:	ff 93       	push	r31
    1534:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1538:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    153c:	ac 01       	movw	r20, r24
    153e:	09 2e       	mov	r0, r25
    1540:	00 0c       	add	r0, r0
    1542:	66 0b       	sbc	r22, r22
    1544:	77 0b       	sbc	r23, r23
    1546:	9a 01       	movw	r18, r20
    1548:	11 27       	eor	r17, r17
    154a:	00 27       	eor	r16, r16
    154c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1550:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	40 2b       	or	r20, r16
    155a:	51 2b       	or	r21, r17
    155c:	62 2b       	or	r22, r18
    155e:	73 2b       	or	r23, r19
    1560:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    1564:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1568:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    156c:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    1570:	b0 9b       	sbis	0x16, 0	; 22
    1572:	1a c0       	rjmp	.+52     	; 0x15a8 <__vector_18+0x9a>
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	09 2e       	mov	r0, r25
    1578:	00 0c       	add	r0, r0
    157a:	aa 0b       	sbc	r26, r26
    157c:	bb 0b       	sbc	r27, r27
    157e:	bc 01       	movw	r22, r24
    1580:	55 27       	eor	r21, r21
    1582:	44 27       	eor	r20, r20
    1584:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1588:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	84 2b       	or	r24, r20
    1592:	95 2b       	or	r25, r21
    1594:	a6 2b       	or	r26, r22
    1596:	b7 2b       	or	r27, r23
    1598:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    159c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    15a0:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    15a4:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    15a8:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x1a>
    15ac:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x1b>
    15b0:	30 97       	sbiw	r30, 0x00	; 0
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__vector_18+0xb4>
    15b4:	6d e0       	ldi	r22, 0x0D	; 13
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x1a>
    15bc:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x1b>
    15c0:	09 95       	icall
    15c2:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <__vector_19>:
    15ec:	1f 92       	push	r1
    15ee:	0f 92       	push	r0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	0f 92       	push	r0
    15f4:	11 24       	eor	r1, r1
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    1612:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1616:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    161a:	ac 01       	movw	r20, r24
    161c:	09 2e       	mov	r0, r25
    161e:	00 0c       	add	r0, r0
    1620:	66 0b       	sbc	r22, r22
    1622:	77 0b       	sbc	r23, r23
    1624:	9a 01       	movw	r18, r20
    1626:	11 27       	eor	r17, r17
    1628:	00 27       	eor	r16, r16
    162a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    162e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1632:	60 e0       	ldi	r22, 0x00	; 0
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	40 2b       	or	r20, r16
    1638:	51 2b       	or	r21, r17
    163a:	62 2b       	or	r22, r18
    163c:	73 2b       	or	r23, r19
    163e:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    1642:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1646:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    164a:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    164e:	b0 9b       	sbis	0x16, 0	; 22
    1650:	1a c0       	rjmp	.+52     	; 0x1686 <__vector_19+0x9a>
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	09 2e       	mov	r0, r25
    1656:	00 0c       	add	r0, r0
    1658:	aa 0b       	sbc	r26, r26
    165a:	bb 0b       	sbc	r27, r27
    165c:	bc 01       	movw	r22, r24
    165e:	55 27       	eor	r21, r21
    1660:	44 27       	eor	r20, r20
    1662:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1666:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	84 2b       	or	r24, r20
    1670:	95 2b       	or	r25, r21
    1672:	a6 2b       	or	r26, r22
    1674:	b7 2b       	or	r27, r23
    1676:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    167a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    167e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1682:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1686:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x1c>
    168a:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x1d>
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	39 f0       	breq	.+14     	; 0x16a0 <__vector_19+0xb4>
    1692:	6e e0       	ldi	r22, 0x0E	; 14
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x1c>
    169a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x1d>
    169e:	09 95       	icall
    16a0:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	bf 91       	pop	r27
    16aa:	af 91       	pop	r26
    16ac:	9f 91       	pop	r25
    16ae:	8f 91       	pop	r24
    16b0:	7f 91       	pop	r23
    16b2:	6f 91       	pop	r22
    16b4:	5f 91       	pop	r21
    16b6:	4f 91       	pop	r20
    16b8:	3f 91       	pop	r19
    16ba:	2f 91       	pop	r18
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	0f 90       	pop	r0
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	0f 90       	pop	r0
    16c6:	1f 90       	pop	r1
    16c8:	18 95       	reti

000016ca <__vector_20>:
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	2f 93       	push	r18
    16da:	3f 93       	push	r19
    16dc:	4f 93       	push	r20
    16de:	5f 93       	push	r21
    16e0:	6f 93       	push	r22
    16e2:	7f 93       	push	r23
    16e4:	8f 93       	push	r24
    16e6:	9f 93       	push	r25
    16e8:	af 93       	push	r26
    16ea:	bf 93       	push	r27
    16ec:	ef 93       	push	r30
    16ee:	ff 93       	push	r31
    16f0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    16f4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    16f8:	ac 01       	movw	r20, r24
    16fa:	09 2e       	mov	r0, r25
    16fc:	00 0c       	add	r0, r0
    16fe:	66 0b       	sbc	r22, r22
    1700:	77 0b       	sbc	r23, r23
    1702:	9a 01       	movw	r18, r20
    1704:	11 27       	eor	r17, r17
    1706:	00 27       	eor	r16, r16
    1708:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    170c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	40 2b       	or	r20, r16
    1716:	51 2b       	or	r21, r17
    1718:	62 2b       	or	r22, r18
    171a:	73 2b       	or	r23, r19
    171c:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    1720:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1724:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    1728:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    172c:	b0 9b       	sbis	0x16, 0	; 22
    172e:	1a c0       	rjmp	.+52     	; 0x1764 <__vector_20+0x9a>
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	09 2e       	mov	r0, r25
    1734:	00 0c       	add	r0, r0
    1736:	aa 0b       	sbc	r26, r26
    1738:	bb 0b       	sbc	r27, r27
    173a:	bc 01       	movw	r22, r24
    173c:	55 27       	eor	r21, r21
    173e:	44 27       	eor	r20, r20
    1740:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1744:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	84 2b       	or	r24, r20
    174e:	95 2b       	or	r25, r21
    1750:	a6 2b       	or	r26, r22
    1752:	b7 2b       	or	r27, r23
    1754:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1758:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    175c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    1760:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1764:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x1e>
    1768:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x1f>
    176c:	30 97       	sbiw	r30, 0x00	; 0
    176e:	39 f0       	breq	.+14     	; 0x177e <__vector_20+0xb4>
    1770:	6f e0       	ldi	r22, 0x0F	; 15
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x1e>
    1778:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x1f>
    177c:	09 95       	icall
    177e:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1782:	ff 91       	pop	r31
    1784:	ef 91       	pop	r30
    1786:	bf 91       	pop	r27
    1788:	af 91       	pop	r26
    178a:	9f 91       	pop	r25
    178c:	8f 91       	pop	r24
    178e:	7f 91       	pop	r23
    1790:	6f 91       	pop	r22
    1792:	5f 91       	pop	r21
    1794:	4f 91       	pop	r20
    1796:	3f 91       	pop	r19
    1798:	2f 91       	pop	r18
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_21>:
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	2f 93       	push	r18
    17b8:	3f 93       	push	r19
    17ba:	4f 93       	push	r20
    17bc:	5f 93       	push	r21
    17be:	6f 93       	push	r22
    17c0:	7f 93       	push	r23
    17c2:	8f 93       	push	r24
    17c4:	9f 93       	push	r25
    17c6:	af 93       	push	r26
    17c8:	bf 93       	push	r27
    17ca:	ef 93       	push	r30
    17cc:	ff 93       	push	r31
    17ce:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    17d2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    17d6:	ac 01       	movw	r20, r24
    17d8:	09 2e       	mov	r0, r25
    17da:	00 0c       	add	r0, r0
    17dc:	66 0b       	sbc	r22, r22
    17de:	77 0b       	sbc	r23, r23
    17e0:	9a 01       	movw	r18, r20
    17e2:	11 27       	eor	r17, r17
    17e4:	00 27       	eor	r16, r16
    17e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	40 2b       	or	r20, r16
    17f4:	51 2b       	or	r21, r17
    17f6:	62 2b       	or	r22, r18
    17f8:	73 2b       	or	r23, r19
    17fa:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    17fe:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    1802:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    1806:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    180a:	b0 9b       	sbis	0x16, 0	; 22
    180c:	1a c0       	rjmp	.+52     	; 0x1842 <__vector_21+0x9a>
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	09 2e       	mov	r0, r25
    1812:	00 0c       	add	r0, r0
    1814:	aa 0b       	sbc	r26, r26
    1816:	bb 0b       	sbc	r27, r27
    1818:	bc 01       	movw	r22, r24
    181a:	55 27       	eor	r21, r21
    181c:	44 27       	eor	r20, r20
    181e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1822:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	84 2b       	or	r24, r20
    182c:	95 2b       	or	r25, r21
    182e:	a6 2b       	or	r26, r22
    1830:	b7 2b       	or	r27, r23
    1832:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1836:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    183a:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    183e:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1842:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x20>
    1846:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x21>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	39 f0       	breq	.+14     	; 0x185c <__vector_21+0xb4>
    184e:	60 e1       	ldi	r22, 0x10	; 16
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x20>
    1856:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x21>
    185a:	09 95       	icall
    185c:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1860:	ff 91       	pop	r31
    1862:	ef 91       	pop	r30
    1864:	bf 91       	pop	r27
    1866:	af 91       	pop	r26
    1868:	9f 91       	pop	r25
    186a:	8f 91       	pop	r24
    186c:	7f 91       	pop	r23
    186e:	6f 91       	pop	r22
    1870:	5f 91       	pop	r21
    1872:	4f 91       	pop	r20
    1874:	3f 91       	pop	r19
    1876:	2f 91       	pop	r18
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <__vector_22>:
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	2f 93       	push	r18
    1896:	3f 93       	push	r19
    1898:	4f 93       	push	r20
    189a:	5f 93       	push	r21
    189c:	6f 93       	push	r22
    189e:	7f 93       	push	r23
    18a0:	8f 93       	push	r24
    18a2:	9f 93       	push	r25
    18a4:	af 93       	push	r26
    18a6:	bf 93       	push	r27
    18a8:	ef 93       	push	r30
    18aa:	ff 93       	push	r31
    18ac:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    18b0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    18b4:	ac 01       	movw	r20, r24
    18b6:	09 2e       	mov	r0, r25
    18b8:	00 0c       	add	r0, r0
    18ba:	66 0b       	sbc	r22, r22
    18bc:	77 0b       	sbc	r23, r23
    18be:	9a 01       	movw	r18, r20
    18c0:	11 27       	eor	r17, r17
    18c2:	00 27       	eor	r16, r16
    18c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	40 2b       	or	r20, r16
    18d2:	51 2b       	or	r21, r17
    18d4:	62 2b       	or	r22, r18
    18d6:	73 2b       	or	r23, r19
    18d8:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <timestamp>
    18dc:	50 93 63 01 	sts	0x0163, r21	; 0x800163 <timestamp+0x1>
    18e0:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <timestamp+0x2>
    18e4:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <timestamp+0x3>
    18e8:	b0 9b       	sbis	0x16, 0	; 22
    18ea:	1a c0       	rjmp	.+52     	; 0x1920 <__vector_22+0x9a>
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	09 2e       	mov	r0, r25
    18f0:	00 0c       	add	r0, r0
    18f2:	aa 0b       	sbc	r26, r26
    18f4:	bb 0b       	sbc	r27, r27
    18f6:	bc 01       	movw	r22, r24
    18f8:	55 27       	eor	r21, r21
    18fa:	44 27       	eor	r20, r20
    18fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1900:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1904:	a0 e0       	ldi	r26, 0x00	; 0
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	84 2b       	or	r24, r20
    190a:	95 2b       	or	r25, r21
    190c:	a6 2b       	or	r26, r22
    190e:	b7 2b       	or	r27, r23
    1910:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <timestamp>
    1914:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <timestamp+0x1>
    1918:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <timestamp+0x2>
    191c:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <timestamp+0x3>
    1920:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x22>
    1924:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x23>
    1928:	30 97       	sbiw	r30, 0x00	; 0
    192a:	39 f0       	breq	.+14     	; 0x193a <__vector_22+0xb4>
    192c:	61 e1       	ldi	r22, 0x11	; 17
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x22>
    1934:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x23>
    1938:	09 95       	icall
    193a:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	bf 91       	pop	r27
    1944:	af 91       	pop	r26
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	7f 91       	pop	r23
    194c:	6f 91       	pop	r22
    194e:	5f 91       	pop	r21
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <idle>:
    1964:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1968:	78 94       	sei
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	83 bf       	out	0x33, r24	; 51
    196e:	88 95       	sleep
    1970:	fc cf       	rjmp	.-8      	; 0x196a <idle+0x6>

00001972 <__vector_9>:
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	ef 93       	push	r30
    198e:	ff 93       	push	r31
    1990:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1994:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1998:	01 96       	adiw	r24, 0x01	; 1
    199a:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <overflows+0x1>
    199e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <overflows>
    19a2:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    19a6:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    19aa:	30 97       	sbiw	r30, 0x00	; 0
    19ac:	01 f1       	breq	.+64     	; 0x19ee <__vector_9+0x7c>
    19ae:	42 81       	ldd	r20, Z+2	; 0x02
    19b0:	53 81       	ldd	r21, Z+3	; 0x03
    19b2:	64 81       	ldd	r22, Z+4	; 0x04
    19b4:	75 81       	ldd	r23, Z+5	; 0x05
    19b6:	86 17       	cp	r24, r22
    19b8:	97 07       	cpc	r25, r23
    19ba:	c9 f4       	brne	.+50     	; 0x19ee <__vector_9+0x7c>
    19bc:	ca 01       	movw	r24, r20
    19be:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19c2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19c6:	42 1b       	sub	r20, r18
    19c8:	53 0b       	sbc	r21, r19
    19ca:	41 30       	cpi	r20, 0x01	; 1
    19cc:	51 05       	cpc	r21, r1
    19ce:	29 f4       	brne	.+10     	; 0x19da <__vector_9+0x68>
    19d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19d4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    19de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    19e2:	ef e6       	ldi	r30, 0x6F	; 111
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	82 60       	ori	r24, 0x02	; 2
    19ea:	80 83       	st	Z, r24
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <__vector_9+0x86>
    19ee:	ef e6       	ldi	r30, 0x6F	; 111
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8d 7f       	andi	r24, 0xFD	; 253
    19f6:	80 83       	st	Z, r24
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_7>:
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	2f 93       	push	r18
    1a2a:	3f 93       	push	r19
    1a2c:	4f 93       	push	r20
    1a2e:	5f 93       	push	r21
    1a30:	6f 93       	push	r22
    1a32:	7f 93       	push	r23
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <overflows>
    1a44:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <overflows+0x1>
    1a48:	6c 01       	movw	r12, r24
    1a4a:	09 2e       	mov	r0, r25
    1a4c:	00 0c       	add	r0, r0
    1a4e:	ee 08       	sbc	r14, r14
    1a50:	ff 08       	sbc	r15, r15
    1a52:	76 01       	movw	r14, r12
    1a54:	dd 24       	eor	r13, r13
    1a56:	cc 24       	eor	r12, r12
    1a58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	c4 2a       	or	r12, r20
    1a66:	d5 2a       	or	r13, r21
    1a68:	e6 2a       	or	r14, r22
    1a6a:	f7 2a       	or	r15, r23
    1a6c:	b0 9b       	sbis	0x16, 0	; 22
    1a6e:	1e c0       	rjmp	.+60     	; 0x1aac <__vector_7+0x96>
    1a70:	6c 01       	movw	r12, r24
    1a72:	2f ef       	ldi	r18, 0xFF	; 255
    1a74:	c2 1a       	sub	r12, r18
    1a76:	d2 0a       	sbc	r13, r18
    1a78:	0d 2c       	mov	r0, r13
    1a7a:	00 0c       	add	r0, r0
    1a7c:	ee 08       	sbc	r14, r14
    1a7e:	ff 08       	sbc	r15, r15
    1a80:	d6 01       	movw	r26, r12
    1a82:	99 27       	eor	r25, r25
    1a84:	88 27       	eor	r24, r24
    1a86:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a8a:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a8e:	e1 2c       	mov	r14, r1
    1a90:	f1 2c       	mov	r15, r1
    1a92:	c8 2a       	or	r12, r24
    1a94:	d9 2a       	or	r13, r25
    1a96:	ea 2a       	or	r14, r26
    1a98:	fb 2a       	or	r15, r27
    1a9a:	08 c0       	rjmp	.+16     	; 0x1aac <__vector_7+0x96>
    1a9c:	86 e6       	ldi	r24, 0x66	; 102
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <dequeue>
    1aa4:	68 e6       	ldi	r22, 0x68	; 104
    1aa6:	71 e0       	ldi	r23, 0x01	; 1
    1aa8:	0e 94 19 04 	call	0x832	; 0x832 <enqueueByDeadline>
    1aac:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1ab0:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1ab4:	30 97       	sbiw	r30, 0x00	; 0
    1ab6:	69 f0       	breq	.+26     	; 0x1ad2 <__vector_7+0xbc>
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	a4 81       	ldd	r26, Z+4	; 0x04
    1abe:	b5 81       	ldd	r27, Z+5	; 0x05
    1ac0:	8c 19       	sub	r24, r12
    1ac2:	9d 09       	sbc	r25, r13
    1ac4:	ae 09       	sbc	r26, r14
    1ac6:	bf 09       	sbc	r27, r15
    1ac8:	18 16       	cp	r1, r24
    1aca:	19 06       	cpc	r1, r25
    1acc:	1a 06       	cpc	r1, r26
    1ace:	1b 06       	cpc	r1, r27
    1ad0:	2c f7       	brge	.-54     	; 0x1a9c <__vector_7+0x86>
    1ad2:	30 97       	sbiw	r30, 0x00	; 0
    1ad4:	21 f1       	breq	.+72     	; 0x1b1e <__vector_7+0x108>
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	a4 81       	ldd	r26, Z+4	; 0x04
    1adc:	b5 81       	ldd	r27, Z+5	; 0x05
    1ade:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1ae2:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1ae6:	2a 17       	cp	r18, r26
    1ae8:	3b 07       	cpc	r19, r27
    1aea:	c9 f4       	brne	.+50     	; 0x1b1e <__vector_7+0x108>
    1aec:	9c 01       	movw	r18, r24
    1aee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1af2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1af6:	84 1b       	sub	r24, r20
    1af8:	95 0b       	sbc	r25, r21
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	31 f4       	brne	.+12     	; 0x1b0a <__vector_7+0xf4>
    1afe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b02:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b0e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b12:	ef e6       	ldi	r30, 0x6F	; 111
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	82 60       	ori	r24, 0x02	; 2
    1b1a:	80 83       	st	Z, r24
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <__vector_7+0x112>
    1b1e:	ef e6       	ldi	r30, 0x6F	; 111
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8d 7f       	andi	r24, 0xFD	; 253
    1b26:	80 83       	st	Z, r24
    1b28:	0e 94 b0 04 	call	0x960	; 0x960 <schedule>
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	df 90       	pop	r13
    1b4a:	cf 90       	pop	r12
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	0f 90       	pop	r0
    1b52:	1f 90       	pop	r1
    1b54:	18 95       	reti

00001b56 <async>:
    1b56:	3f 92       	push	r3
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	2b 01       	movw	r4, r22
    1b7a:	3c 01       	movw	r6, r24
    1b7c:	49 01       	movw	r8, r18
    1b7e:	5a 01       	movw	r10, r20
    1b80:	8f b7       	in	r24, 0x3f	; 63
    1b82:	80 78       	andi	r24, 0x80	; 128
    1b84:	38 2e       	mov	r3, r24
    1b86:	f8 94       	cli
    1b88:	82 e3       	ldi	r24, 0x32	; 50
    1b8a:	91 e0       	ldi	r25, 0x01	; 1
    1b8c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <dequeue>
    1b90:	ec 01       	movw	r28, r24
    1b92:	1b 87       	std	Y+11, r17	; 0x0b
    1b94:	0a 87       	std	Y+10, r16	; 0x0a
    1b96:	fd 86       	std	Y+13, r15	; 0x0d
    1b98:	ec 86       	std	Y+12, r14	; 0x0c
    1b9a:	df 86       	std	Y+15, r13	; 0x0f
    1b9c:	ce 86       	std	Y+14, r12	; 0x0e
    1b9e:	33 20       	and	r3, r3
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <async+0x64>
    1ba2:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1ba6:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1baa:	02 80       	ldd	r0, Z+2	; 0x02
    1bac:	f3 81       	ldd	r31, Z+3	; 0x03
    1bae:	e0 2d       	mov	r30, r0
    1bb0:	82 81       	ldd	r24, Z+2	; 0x02
    1bb2:	93 81       	ldd	r25, Z+3	; 0x03
    1bb4:	a4 81       	ldd	r26, Z+4	; 0x04
    1bb6:	b5 81       	ldd	r27, Z+5	; 0x05
    1bb8:	08 c0       	rjmp	.+16     	; 0x1bca <async+0x74>
    1bba:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <timestamp>
    1bbe:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <timestamp+0x1>
    1bc2:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <timestamp+0x2>
    1bc6:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <timestamp+0x3>
    1bca:	48 0e       	add	r4, r24
    1bcc:	59 1e       	adc	r5, r25
    1bce:	6a 1e       	adc	r6, r26
    1bd0:	7b 1e       	adc	r7, r27
    1bd2:	4a 82       	std	Y+2, r4	; 0x02
    1bd4:	5b 82       	std	Y+3, r5	; 0x03
    1bd6:	6c 82       	std	Y+4, r6	; 0x04
    1bd8:	7d 82       	std	Y+5, r7	; 0x05
    1bda:	18 14       	cp	r1, r8
    1bdc:	19 04       	cpc	r1, r9
    1bde:	1a 04       	cpc	r1, r10
    1be0:	1b 04       	cpc	r1, r11
    1be2:	44 f0       	brlt	.+16     	; 0x1bf4 <async+0x9e>
    1be4:	0f 2e       	mov	r0, r31
    1be6:	88 24       	eor	r8, r8
    1be8:	8a 94       	dec	r8
    1bea:	98 2c       	mov	r9, r8
    1bec:	a8 2c       	mov	r10, r8
    1bee:	ff e7       	ldi	r31, 0x7F	; 127
    1bf0:	bf 2e       	mov	r11, r31
    1bf2:	f0 2d       	mov	r31, r0
    1bf4:	84 0c       	add	r8, r4
    1bf6:	95 1c       	adc	r9, r5
    1bf8:	a6 1c       	adc	r10, r6
    1bfa:	b7 1c       	adc	r11, r7
    1bfc:	8e 82       	std	Y+6, r8	; 0x06
    1bfe:	9f 82       	std	Y+7, r9	; 0x07
    1c00:	a8 86       	std	Y+8, r10	; 0x08
    1c02:	b9 86       	std	Y+9, r11	; 0x09
    1c04:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1c08:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	03 2e       	mov	r0, r19
    1c10:	00 0c       	add	r0, r0
    1c12:	aa 0b       	sbc	r26, r26
    1c14:	bb 0b       	sbc	r27, r27
    1c16:	dc 01       	movw	r26, r24
    1c18:	99 27       	eor	r25, r25
    1c1a:	88 27       	eor	r24, r24
    1c1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	84 2b       	or	r24, r20
    1c2a:	95 2b       	or	r25, r21
    1c2c:	a6 2b       	or	r26, r22
    1c2e:	b7 2b       	or	r27, r23
    1c30:	b0 9b       	sbis	0x16, 0	; 22
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <async+0x104>
    1c34:	c9 01       	movw	r24, r18
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	09 2e       	mov	r0, r25
    1c3a:	00 0c       	add	r0, r0
    1c3c:	aa 0b       	sbc	r26, r26
    1c3e:	bb 0b       	sbc	r27, r27
    1c40:	dc 01       	movw	r26, r24
    1c42:	99 27       	eor	r25, r25
    1c44:	88 27       	eor	r24, r24
    1c46:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c4a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	84 2b       	or	r24, r20
    1c54:	95 2b       	or	r25, r21
    1c56:	a6 2b       	or	r26, r22
    1c58:	b7 2b       	or	r27, r23
    1c5a:	48 1a       	sub	r4, r24
    1c5c:	59 0a       	sbc	r5, r25
    1c5e:	6a 0a       	sbc	r6, r26
    1c60:	7b 0a       	sbc	r7, r27
    1c62:	14 14       	cp	r1, r4
    1c64:	15 04       	cpc	r1, r5
    1c66:	16 04       	cpc	r1, r6
    1c68:	17 04       	cpc	r1, r7
    1c6a:	ac f5       	brge	.+106    	; 0x1cd6 <async+0x180>
    1c6c:	66 e6       	ldi	r22, 0x66	; 102
    1c6e:	71 e0       	ldi	r23, 0x01	; 1
    1c70:	ce 01       	movw	r24, r28
    1c72:	0e 94 4a 04 	call	0x894	; 0x894 <enqueueByBaseline>
    1c76:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <timerQ>
    1c7a:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <timerQ+0x1>
    1c7e:	30 97       	sbiw	r30, 0x00	; 0
    1c80:	21 f1       	breq	.+72     	; 0x1cca <async+0x174>
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	a4 81       	ldd	r26, Z+4	; 0x04
    1c88:	b5 81       	ldd	r27, Z+5	; 0x05
    1c8a:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <overflows>
    1c8e:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <overflows+0x1>
    1c92:	2a 17       	cp	r18, r26
    1c94:	3b 07       	cpc	r19, r27
    1c96:	c9 f4       	brne	.+50     	; 0x1cca <async+0x174>
    1c98:	9c 01       	movw	r18, r24
    1c9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ca2:	84 1b       	sub	r24, r20
    1ca4:	95 0b       	sbc	r25, r21
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	31 f4       	brne	.+12     	; 0x1cb6 <async+0x160>
    1caa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cb2:	2f 5f       	subi	r18, 0xFF	; 255
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cba:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cbe:	ef e6       	ldi	r30, 0x6F	; 111
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	82 60       	ori	r24, 0x02	; 2
    1cc6:	80 83       	st	Z, r24
    1cc8:	39 c0       	rjmp	.+114    	; 0x1d3c <async+0x1e6>
    1cca:	ef e6       	ldi	r30, 0x6F	; 111
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	8d 7f       	andi	r24, 0xFD	; 253
    1cd2:	80 83       	st	Z, r24
    1cd4:	33 c0       	rjmp	.+102    	; 0x1d3c <async+0x1e6>
    1cd6:	68 e6       	ldi	r22, 0x68	; 104
    1cd8:	71 e0       	ldi	r23, 0x01	; 1
    1cda:	ce 01       	movw	r24, r28
    1cdc:	0e 94 19 04 	call	0x832	; 0x832 <enqueueByDeadline>
    1ce0:	33 20       	and	r3, r3
    1ce2:	61 f1       	breq	.+88     	; 0x1d3c <async+0x1e6>
    1ce4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <threadPool>
    1ce8:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <threadPool+0x1>
    1cec:	89 2b       	or	r24, r25
    1cee:	31 f1       	breq	.+76     	; 0x1d3c <async+0x1e6>
    1cf0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
    1cf4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
    1cf8:	86 81       	ldd	r24, Z+6	; 0x06
    1cfa:	97 81       	ldd	r25, Z+7	; 0x07
    1cfc:	a0 85       	ldd	r26, Z+8	; 0x08
    1cfe:	b1 85       	ldd	r27, Z+9	; 0x09
    1d00:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    1d04:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    1d08:	02 80       	ldd	r0, Z+2	; 0x02
    1d0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1d0c:	e0 2d       	mov	r30, r0
    1d0e:	46 81       	ldd	r20, Z+6	; 0x06
    1d10:	57 81       	ldd	r21, Z+7	; 0x07
    1d12:	60 85       	ldd	r22, Z+8	; 0x08
    1d14:	71 85       	ldd	r23, Z+9	; 0x09
    1d16:	84 1b       	sub	r24, r20
    1d18:	95 0b       	sbc	r25, r21
    1d1a:	a6 0b       	sbc	r26, r22
    1d1c:	b7 0b       	sbc	r27, r23
    1d1e:	72 f4       	brpl	.+28     	; 0x1d3c <async+0x1e6>
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	0e 94 a6 04 	call	0x94c	; 0x94c <pop>
    1d28:	6e e2       	ldi	r22, 0x2E	; 46
    1d2a:	71 e0       	ldi	r23, 0x01	; 1
    1d2c:	0e 94 9c 04 	call	0x938	; 0x938 <push>
    1d30:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <activeStack>
    1d34:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <activeStack+0x1>
    1d38:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dispatch>
    1d3c:	33 20       	and	r3, r3
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <async+0x1ec>
    1d40:	78 94       	sei
    1d42:	ce 01       	movw	r24, r28
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	0f 91       	pop	r16
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	bf 90       	pop	r11
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	7f 90       	pop	r7
    1d5e:	6f 90       	pop	r6
    1d60:	5f 90       	pop	r5
    1d62:	4f 90       	pop	r4
    1d64:	3f 90       	pop	r3
    1d66:	08 95       	ret

00001d68 <sync>:
    1d68:	cf 92       	push	r12
    1d6a:	df 92       	push	r13
    1d6c:	ef 92       	push	r14
    1d6e:	ff 92       	push	r15
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	ec 01       	movw	r28, r24
    1d7a:	7b 01       	movw	r14, r22
    1d7c:	6a 01       	movw	r12, r20
    1d7e:	1f b7       	in	r17, 0x3f	; 63
    1d80:	10 78       	andi	r17, 0x80	; 128
    1d82:	f8 94       	cli
    1d84:	a8 81       	ld	r26, Y
    1d86:	b9 81       	ldd	r27, Y+1	; 0x01
    1d88:	10 97       	sbiw	r26, 0x00	; 0
    1d8a:	19 f4       	brne	.+6      	; 0x1d92 <sync+0x2a>
    1d8c:	35 c0       	rjmp	.+106    	; 0x1df8 <sync+0x90>
    1d8e:	a0 81       	ld	r26, Z
    1d90:	b1 81       	ldd	r27, Z+1	; 0x01
    1d92:	14 96       	adiw	r26, 0x04	; 4
    1d94:	ed 91       	ld	r30, X+
    1d96:	fc 91       	ld	r31, X
    1d98:	15 97       	sbiw	r26, 0x05	; 5
    1d9a:	30 97       	sbiw	r30, 0x00	; 0
    1d9c:	c1 f7       	brne	.-16     	; 0x1d8e <sync+0x26>
    1d9e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <current>
    1da2:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <current+0x1>
    1da6:	a2 17       	cp	r26, r18
    1da8:	b3 07       	cpc	r27, r19
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <sync+0x48>
    1dac:	11 11       	cpse	r17, r1
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <sync+0x56>
    1db0:	11 23       	and	r17, r17
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <sync+0x4e>
    1db4:	4a c0       	rjmp	.+148    	; 0x1e4a <sync+0xe2>
    1db6:	78 94       	sei
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	4e c0       	rjmp	.+156    	; 0x1e5a <sync+0xf2>
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <sync+0x64>
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	15 82       	std	Z+5, r1	; 0x05
    1dca:	14 82       	std	Z+4, r1	; 0x04
    1dcc:	3b 83       	std	Y+3, r19	; 0x03
    1dce:	2a 83       	std	Y+2, r18	; 0x02
    1dd0:	f9 01       	movw	r30, r18
    1dd2:	d5 83       	std	Z+5, r29	; 0x05
    1dd4:	c4 83       	std	Z+4, r28	; 0x04
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dispatch>
    1ddc:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <current>
    1de0:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <current+0x1>
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	89 2b       	or	r24, r25
    1dea:	31 f4       	brne	.+12     	; 0x1df8 <sync+0x90>
    1dec:	11 23       	and	r17, r17
    1dee:	81 f1       	breq	.+96     	; 0x1e50 <sync+0xe8>
    1df0:	78 94       	sei
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	31 c0       	rjmp	.+98     	; 0x1e5a <sync+0xf2>
    1df8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
    1dfc:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
    1e00:	99 83       	std	Y+1, r25	; 0x01
    1e02:	88 83       	st	Y, r24
    1e04:	11 23       	and	r17, r17
    1e06:	29 f0       	breq	.+10     	; 0x1e12 <sync+0xaa>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <sync+0xaa>
    1e10:	78 94       	sei
    1e12:	b6 01       	movw	r22, r12
    1e14:	ce 01       	movw	r24, r28
    1e16:	f7 01       	movw	r30, r14
    1e18:	09 95       	icall
    1e1a:	f8 2e       	mov	r15, r24
    1e1c:	09 2f       	mov	r16, r25
    1e1e:	8f b7       	in	r24, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	19 82       	std	Y+1, r1	; 0x01
    1e24:	18 82       	st	Y, r1
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	82 30       	cpi	r24, 0x02	; 2
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	38 f0       	brcs	.+14     	; 0x1e3e <sync+0xd6>
    1e30:	1b 82       	std	Y+3, r1	; 0x03
    1e32:	1a 82       	std	Y+2, r1	; 0x02
    1e34:	fc 01       	movw	r30, r24
    1e36:	15 82       	std	Z+5, r1	; 0x05
    1e38:	14 82       	std	Z+4, r1	; 0x04
    1e3a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dispatch>
    1e3e:	11 23       	and	r17, r17
    1e40:	51 f0       	breq	.+20     	; 0x1e56 <sync+0xee>
    1e42:	78 94       	sei
    1e44:	8f 2d       	mov	r24, r15
    1e46:	90 2f       	mov	r25, r16
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <sync+0xf2>
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	9f ef       	ldi	r25, 0xFF	; 255
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <sync+0xf2>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <sync+0xf2>
    1e56:	8f 2d       	mov	r24, r15
    1e58:	90 2f       	mov	r25, r16
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	08 95       	ret

00001e6c <run>:
    1e6c:	00 91 2c 01 	lds	r16, 0x012C	; 0x80012c <current>
    1e70:	10 91 2d 01 	lds	r17, 0x012D	; 0x80012d <current+0x1>
    1e74:	88 e6       	ldi	r24, 0x68	; 104
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <dequeue>
    1e7c:	ec 01       	movw	r28, r24
    1e7e:	f8 01       	movw	r30, r16
    1e80:	93 83       	std	Z+3, r25	; 0x03
    1e82:	82 83       	std	Z+2, r24	; 0x02
    1e84:	78 94       	sei
    1e86:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e88:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e8a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e8c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e92:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <sync>
    1e96:	8f b7       	in	r24, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	62 e3       	ldi	r22, 0x32	; 50
    1e9c:	71 e0       	ldi	r23, 0x01	; 1
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 92 04 	call	0x924	; 0x924 <insert>
    1ea4:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    1ea8:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    1eac:	01 90       	ld	r0, Z+
    1eae:	f0 81       	ld	r31, Z
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	c2 81       	ldd	r28, Z+2	; 0x02
    1eb4:	d3 81       	ldd	r29, Z+3	; 0x03
    1eb6:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <msgQ>
    1eba:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <msgQ+0x1>
    1ebe:	30 97       	sbiw	r30, 0x00	; 0
    1ec0:	a1 f0       	breq	.+40     	; 0x1eea <run+0x7e>
    1ec2:	20 97       	sbiw	r28, 0x00	; 0
    1ec4:	99 f2       	breq	.-90     	; 0x1e6c <run>
    1ec6:	86 81       	ldd	r24, Z+6	; 0x06
    1ec8:	97 81       	ldd	r25, Z+7	; 0x07
    1eca:	a0 85       	ldd	r26, Z+8	; 0x08
    1ecc:	b1 85       	ldd	r27, Z+9	; 0x09
    1ece:	4e 81       	ldd	r20, Y+6	; 0x06
    1ed0:	5f 81       	ldd	r21, Y+7	; 0x07
    1ed2:	68 85       	ldd	r22, Y+8	; 0x08
    1ed4:	79 85       	ldd	r23, Y+9	; 0x09
    1ed6:	84 1b       	sub	r24, r20
    1ed8:	95 0b       	sbc	r25, r21
    1eda:	a6 0b       	sbc	r26, r22
    1edc:	b7 0b       	sbc	r27, r23
    1ede:	18 16       	cp	r1, r24
    1ee0:	19 06       	cpc	r1, r25
    1ee2:	1a 06       	cpc	r1, r26
    1ee4:	1b 06       	cpc	r1, r27
    1ee6:	0c f0       	brlt	.+2      	; 0x1eea <run+0x7e>
    1ee8:	c1 cf       	rjmp	.-126    	; 0x1e6c <run>
    1eea:	8e e2       	ldi	r24, 0x2E	; 46
    1eec:	91 e0       	ldi	r25, 0x01	; 1
    1eee:	0e 94 a6 04 	call	0x94c	; 0x94c <pop>
    1ef2:	60 e3       	ldi	r22, 0x30	; 48
    1ef4:	71 e0       	ldi	r23, 0x01	; 1
    1ef6:	0e 94 9c 04 	call	0x938	; 0x938 <push>
    1efa:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <activeStack>
    1efe:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <activeStack+0x1>
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <run+0x9c>
    1f04:	a0 81       	ld	r26, Z
    1f06:	b1 81       	ldd	r27, Z+1	; 0x01
    1f08:	14 96       	adiw	r26, 0x04	; 4
    1f0a:	ed 91       	ld	r30, X+
    1f0c:	fc 91       	ld	r31, X
    1f0e:	15 97       	sbiw	r26, 0x05	; 5
    1f10:	30 97       	sbiw	r30, 0x00	; 0
    1f12:	c1 f7       	brne	.-16     	; 0x1f04 <run+0x98>
    1f14:	cd 01       	movw	r24, r26
    1f16:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dispatch>
    1f1a:	a8 cf       	rjmp	.-176    	; 0x1e6c <run>

00001f1c <ABORT>:
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	ec 01       	movw	r28, r24
    1f24:	1f b7       	in	r17, 0x3f	; 63
    1f26:	10 78       	andi	r17, 0x80	; 128
    1f28:	f8 94       	cli
    1f2a:	66 e6       	ldi	r22, 0x66	; 102
    1f2c:	71 e0       	ldi	r23, 0x01	; 1
    1f2e:	0e 94 35 03 	call	0x66a	; 0x66a <remove>
    1f32:	89 2b       	or	r24, r25
    1f34:	39 f4       	brne	.+14     	; 0x1f44 <ABORT+0x28>
    1f36:	68 e6       	ldi	r22, 0x68	; 104
    1f38:	71 e0       	ldi	r23, 0x01	; 1
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	0e 94 35 03 	call	0x66a	; 0x66a <remove>
    1f40:	89 2b       	or	r24, r25
    1f42:	31 f0       	breq	.+12     	; 0x1f50 <ABORT+0x34>
    1f44:	62 e3       	ldi	r22, 0x32	; 50
    1f46:	71 e0       	ldi	r23, 0x01	; 1
    1f48:	ce 01       	movw	r24, r28
    1f4a:	0e 94 92 04 	call	0x924	; 0x924 <insert>
    1f4e:	25 c0       	rjmp	.+74     	; 0x1f9a <ABORT+0x7e>
    1f50:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <activeStack>
    1f54:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <activeStack+0x1>
    1f58:	1e c0       	rjmp	.+60     	; 0x1f96 <ABORT+0x7a>
    1f5a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
    1f5e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
    1f62:	e8 17       	cp	r30, r24
    1f64:	f9 07       	cpc	r31, r25
    1f66:	a1 f0       	breq	.+40     	; 0x1f90 <ABORT+0x74>
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	c8 17       	cp	r28, r24
    1f6e:	d9 07       	cpc	r29, r25
    1f70:	79 f4       	brne	.+30     	; 0x1f90 <ABORT+0x74>
    1f72:	24 81       	ldd	r18, Z+4	; 0x04
    1f74:	35 81       	ldd	r19, Z+5	; 0x05
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	28 17       	cp	r18, r24
    1f7c:	39 07       	cpc	r19, r25
    1f7e:	41 f4       	brne	.+16     	; 0x1f90 <ABORT+0x74>
    1f80:	13 82       	std	Z+3, r1	; 0x03
    1f82:	12 82       	std	Z+2, r1	; 0x02
    1f84:	62 e3       	ldi	r22, 0x32	; 50
    1f86:	71 e0       	ldi	r23, 0x01	; 1
    1f88:	ce 01       	movw	r24, r28
    1f8a:	0e 94 92 04 	call	0x924	; 0x924 <insert>
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <ABORT+0x7e>
    1f90:	01 90       	ld	r0, Z+
    1f92:	f0 81       	ld	r31, Z
    1f94:	e0 2d       	mov	r30, r0
    1f96:	30 97       	sbiw	r30, 0x00	; 0
    1f98:	01 f7       	brne	.-64     	; 0x1f5a <ABORT+0x3e>
    1f9a:	11 23       	and	r17, r17
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <ABORT+0x84>
    1f9e:	78 94       	sei
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	08 95       	ret

00001fa8 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1fa8:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1faa:	42 31       	cpi	r20, 0x12	; 18
    1fac:	b8 f4       	brcc	.+46     	; 0x1fdc <install+0x34>
        char status;
        DISABLE(status);
    1fae:	9f b7       	in	r25, 0x3f	; 63
    1fb0:	90 78       	andi	r25, 0x80	; 128
    1fb2:	f8 94       	cli
        otable[i] = obj;
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	44 0f       	add	r20, r20
    1fb8:	55 1f       	adc	r21, r21
    1fba:	da 01       	movw	r26, r20
    1fbc:	a6 59       	subi	r26, 0x96	; 150
    1fbe:	be 4f       	sbci	r27, 0xFE	; 254
    1fc0:	ed 93       	st	X+, r30
    1fc2:	fc 93       	st	X, r31
        mtable[i] = m;
    1fc4:	da 01       	movw	r26, r20
    1fc6:	ae 5f       	subi	r26, 0xFE	; 254
    1fc8:	bd 4f       	sbci	r27, 0xFD	; 253
    1fca:	6d 93       	st	X+, r22
    1fcc:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	33 83       	std	Z+3, r19	; 0x03
    1fd4:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    1fd6:	99 23       	and	r25, r25
    1fd8:	09 f0       	breq	.+2      	; 0x1fdc <install+0x34>
    1fda:	78 94       	sei
    1fdc:	08 95       	ret

00001fde <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1fde:	8c 01       	movw	r16, r24
    1fe0:	7b 01       	movw	r14, r22
    1fe2:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1fe4:	8f b7       	in	r24, 0x3f	; 63
    1fe6:	f8 94       	cli
    initialize();
    1fe8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <initialize>
    ENABLE(1);
    1fec:	78 94       	sei
    if (m != NULL)
    1fee:	e1 14       	cp	r14, r1
    1ff0:	f1 04       	cpc	r15, r1
    1ff2:	41 f0       	breq	.+16     	; 0x2004 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	cb 01       	movw	r24, r22
    2000:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
    DISABLE(status);
    2004:	8f b7       	in	r24, 0x3f	; 63
    2006:	f8 94       	cli
    idle();
    2008:	0e 94 b2 0c 	call	0x1964	; 0x1964 <idle>

0000200c <update_display>:
		self->stored_freq[self->current_pulsegen] = current->freq;
		ASYNC(current,change_freq,0);
	}
	ASYNC(self,update_display,0);
}
void update_display(app_object * self, int arg){
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	8c 01       	movw	r16, r24
	// Just to make it a bit prettier
	for(int i = 0; i < self->number_of_pulsegens; i++)
    2016:	c0 e0       	ldi	r28, 0x00	; 0
    2018:	d0 e0       	ldi	r29, 0x00	; 0
    201a:	15 c0       	rjmp	.+42     	; 0x2046 <update_display+0x3a>
		print_at((self->pulse_gens+i)->freq,4*i,2);
    201c:	d8 01       	movw	r26, r16
    201e:	14 96       	adiw	r26, 0x04	; 4
    2020:	ed 91       	ld	r30, X+
    2022:	fc 91       	ld	r31, X
    2024:	15 97       	sbiw	r26, 0x05	; 5
    2026:	2b e0       	ldi	r18, 0x0B	; 11
    2028:	2c 9f       	mul	r18, r28
    202a:	c0 01       	movw	r24, r0
    202c:	2d 9f       	mul	r18, r29
    202e:	90 0d       	add	r25, r0
    2030:	11 24       	eor	r1, r1
    2032:	e8 0f       	add	r30, r24
    2034:	f9 1f       	adc	r31, r25
    2036:	6c 2f       	mov	r22, r28
    2038:	66 0f       	add	r22, r22
    203a:	66 0f       	add	r22, r22
    203c:	42 e0       	ldi	r20, 0x02	; 2
    203e:	84 81       	ldd	r24, Z+4	; 0x04
    2040:	0e 94 01 02 	call	0x402	; 0x402 <print_at>
	}
	ASYNC(self,update_display,0);
}
void update_display(app_object * self, int arg){
	// Just to make it a bit prettier
	for(int i = 0; i < self->number_of_pulsegens; i++)
    2044:	21 96       	adiw	r28, 0x01	; 1
    2046:	f8 01       	movw	r30, r16
    2048:	87 81       	ldd	r24, Z+7	; 0x07
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	c8 17       	cp	r28, r24
    204e:	d9 07       	cpc	r29, r25
    2050:	2c f3       	brlt	.-54     	; 0x201c <update_display+0x10>
		print_at((self->pulse_gens+i)->freq,4*i,2);
	if(self->current_pulsegen == 0)
    2052:	86 81       	ldd	r24, Z+6	; 0x06
    2054:	81 11       	cpse	r24, r1
    2056:	07 c0       	rjmp	.+14     	; 0x2066 <update_display+0x5a>
		LCDDR0 = LCDDR0^(1<<2);
    2058:	ec ee       	ldi	r30, 0xEC	; 236
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	90 81       	ld	r25, Z
    205e:	84 e0       	ldi	r24, 0x04	; 4
    2060:	89 27       	eor	r24, r25
    2062:	80 83       	st	Z, r24
    2064:	06 c0       	rjmp	.+12     	; 0x2072 <update_display+0x66>
	else{
		LCDDR2 = LCDDR2^(1<<2);
    2066:	ee ee       	ldi	r30, 0xEE	; 238
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	90 81       	ld	r25, Z
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	89 27       	eor	r24, r25
    2070:	80 83       	st	Z, r24
	}
}
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	08 95       	ret

0000207c <change_pulse_gen>:
 *
 * Created: 2022-02-22 16:35:29
 *  Author: ivarj
 */ 
#include "../include/app.h"
void change_pulse_gen(app_object * self,uint8_t new_index){
    207c:	cf 92       	push	r12
    207e:	df 92       	push	r13
    2080:	ef 92       	push	r14
    2082:	ff 92       	push	r15
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
	// sets new pulse gen
	self->current_pulsegen = new_index;
    2088:	fc 01       	movw	r30, r24
    208a:	66 83       	std	Z+6, r22	; 0x06
	ASYNC(self,update_display,0);
    208c:	c1 2c       	mov	r12, r1
    208e:	d1 2c       	mov	r13, r1
    2090:	0f 2e       	mov	r0, r31
    2092:	f6 e0       	ldi	r31, 0x06	; 6
    2094:	ef 2e       	mov	r14, r31
    2096:	f0 e1       	ldi	r31, 0x10	; 16
    2098:	ff 2e       	mov	r15, r31
    209a:	f0 2d       	mov	r31, r0
    209c:	8c 01       	movw	r16, r24
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	a9 01       	movw	r20, r18
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	cb 01       	movw	r24, r22
    20aa:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
}
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	08 95       	ret

000020bc <itterate_freq>:
void itterate_freq(app_object * self,int8_t increment){
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	ec 01       	movw	r28, r24
	// Get current pulse gen
	pulse_gen * current = self->pulse_gens+\
    20ce:	0c 81       	ldd	r16, Y+4	; 0x04
    20d0:	1d 81       	ldd	r17, Y+5	; 0x05
						  self->current_pulsegen;
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
	self->current_pulsegen = new_index;
	ASYNC(self,update_display,0);
}
void itterate_freq(app_object * self,int8_t increment){
	// Get current pulse gen
	pulse_gen * current = self->pulse_gens+\
    20d4:	9b e0       	ldi	r25, 0x0B	; 11
    20d6:	89 9f       	mul	r24, r25
    20d8:	00 0d       	add	r16, r0
    20da:	11 1d       	adc	r17, r1
    20dc:	11 24       	eor	r1, r1
						  self->current_pulsegen;
	uint8_t new_freq = (current->freq+increment);
    20de:	f8 01       	movw	r30, r16
    20e0:	84 81       	ldd	r24, Z+4	; 0x04
    20e2:	68 0f       	add	r22, r24
	// just keep the lowest 2 digits
	new_freq%=100;
    20e4:	89 e2       	ldi	r24, 0x29	; 41
    20e6:	68 9f       	mul	r22, r24
    20e8:	c1 2c       	mov	r12, r1
    20ea:	11 24       	eor	r1, r1
    20ec:	c6 94       	lsr	r12
    20ee:	c6 94       	lsr	r12
    20f0:	c6 94       	lsr	r12
    20f2:	c6 94       	lsr	r12
    20f4:	f4 e6       	ldi	r31, 0x64	; 100
    20f6:	cf 9e       	mul	r12, r31
    20f8:	60 19       	sub	r22, r0
    20fa:	11 24       	eor	r1, r1
	// Message current pulse gen that there is a new freq
	ASYNC(current,change_freq,new_freq);
    20fc:	c6 2e       	mov	r12, r22
    20fe:	d1 2c       	mov	r13, r1
    2100:	0f 2e       	mov	r0, r31
    2102:	fd ef       	ldi	r31, 0xFD	; 253
    2104:	ef 2e       	mov	r14, r31
    2106:	f2 e0       	ldi	r31, 0x02	; 2
    2108:	ff 2e       	mov	r15, r31
    210a:	f0 2d       	mov	r31, r0
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	a9 01       	movw	r20, r18
    2112:	60 e0       	ldi	r22, 0x00	; 0
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	cb 01       	movw	r24, r22
    2118:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
	ASYNC(self,update_display,0);
    211c:	c1 2c       	mov	r12, r1
    211e:	d1 2c       	mov	r13, r1
    2120:	0f 2e       	mov	r0, r31
    2122:	f6 e0       	ldi	r31, 0x06	; 6
    2124:	ef 2e       	mov	r14, r31
    2126:	f0 e1       	ldi	r31, 0x10	; 16
    2128:	ff 2e       	mov	r15, r31
    212a:	f0 2d       	mov	r31, r0
    212c:	8e 01       	movw	r16, r28
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	a9 01       	movw	r20, r18
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	cb 01       	movw	r24, r22
    213a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
}
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	ff 90       	pop	r15
    2148:	ef 90       	pop	r14
    214a:	df 90       	pop	r13
    214c:	cf 90       	pop	r12
    214e:	08 95       	ret

00002150 <save_freq>:
void save_freq(app_object * self,uint8_t arg){
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	ec 01       	movw	r28, r24
	// Get the current pulse gen
	pulse_gen * current = self->pulse_gens+\
    2162:	0c 81       	ldd	r16, Y+4	; 0x04
    2164:	1d 81       	ldd	r17, Y+5	; 0x05
						  self->current_pulsegen;
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
	ASYNC(current,change_freq,new_freq);
	ASYNC(self,update_display,0);
}
void save_freq(app_object * self,uint8_t arg){
	// Get the current pulse gen
	pulse_gen * current = self->pulse_gens+\
    2168:	9b e0       	ldi	r25, 0x0B	; 11
    216a:	89 9f       	mul	r24, r25
    216c:	00 0d       	add	r16, r0
    216e:	11 1d       	adc	r17, r1
    2170:	11 24       	eor	r1, r1
						  self->current_pulsegen;
	if(current->freq == 0){
    2172:	f8 01       	movw	r30, r16
    2174:	94 81       	ldd	r25, Z+4	; 0x04
    2176:	91 11       	cpse	r25, r1
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <save_freq+0x52>
		// if we are a 0 we should restore the last stored frequenzy, initiates to 0
		ASYNC(current,change_freq,self->\
    217a:	fe 01       	movw	r30, r28
    217c:	e8 0f       	add	r30, r24
    217e:	f1 1d       	adc	r31, r1
    2180:	c0 84       	ldd	r12, Z+8	; 0x08
    2182:	d1 2c       	mov	r13, r1
    2184:	0f 2e       	mov	r0, r31
    2186:	fd ef       	ldi	r31, 0xFD	; 253
    2188:	ef 2e       	mov	r14, r31
    218a:	f2 e0       	ldi	r31, 0x02	; 2
    218c:	ff 2e       	mov	r15, r31
    218e:	f0 2d       	mov	r31, r0
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	cb 01       	movw	r24, r22
    219c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
    21a0:	14 c0       	rjmp	.+40     	; 0x21ca <save_freq+0x7a>
	}
	else{
		// if we are on annything else but 0, set the new freq to 0 and save previous value
		pulse_gen * current = self->pulse_gens+\
					self->current_pulsegen;
		self->stored_freq[self->current_pulsegen] = current->freq;
    21a2:	fe 01       	movw	r30, r28
    21a4:	e8 0f       	add	r30, r24
    21a6:	f1 1d       	adc	r31, r1
    21a8:	90 87       	std	Z+8, r25	; 0x08
		ASYNC(current,change_freq,0);
    21aa:	c1 2c       	mov	r12, r1
    21ac:	d1 2c       	mov	r13, r1
    21ae:	0f 2e       	mov	r0, r31
    21b0:	fd ef       	ldi	r31, 0xFD	; 253
    21b2:	ef 2e       	mov	r14, r31
    21b4:	f2 e0       	ldi	r31, 0x02	; 2
    21b6:	ff 2e       	mov	r15, r31
    21b8:	f0 2d       	mov	r31, r0
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	70 e0       	ldi	r23, 0x00	; 0
    21c4:	cb 01       	movw	r24, r22
    21c6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
	}
	ASYNC(self,update_display,0);
    21ca:	c1 2c       	mov	r12, r1
    21cc:	d1 2c       	mov	r13, r1
    21ce:	0f 2e       	mov	r0, r31
    21d0:	f6 e0       	ldi	r31, 0x06	; 6
    21d2:	ef 2e       	mov	r14, r31
    21d4:	f0 e1       	ldi	r31, 0x10	; 16
    21d6:	ff 2e       	mov	r15, r31
    21d8:	f0 2d       	mov	r31, r0
    21da:	8e 01       	movw	r16, r28
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	a9 01       	movw	r20, r18
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	cb 01       	movw	r24, r22
    21e8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
}
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	08 95       	ret

000021fe <app_entry>:
		LCDDR0 = LCDDR0^(1<<2);
	else{
		LCDDR2 = LCDDR2^(1<<2);
	}
}
void app_entry(app_object *self,int arg){
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	5c 01       	movw	r10, r24
		// Runs first time setups that should not be run in the main.c file
		for(int i = 0; i < self->number_of_pulsegens; i++)
    2214:	c0 e0       	ldi	r28, 0x00	; 0
    2216:	d0 e0       	ldi	r29, 0x00	; 0
    2218:	1c c0       	rjmp	.+56     	; 0x2252 <app_entry+0x54>
			ASYNC((self->pulse_gens+i),pulse,0);
    221a:	f5 01       	movw	r30, r10
    221c:	04 81       	ldd	r16, Z+4	; 0x04
    221e:	15 81       	ldd	r17, Z+5	; 0x05
    2220:	2b e0       	ldi	r18, 0x0B	; 11
    2222:	2c 9f       	mul	r18, r28
    2224:	c0 01       	movw	r24, r0
    2226:	2d 9f       	mul	r18, r29
    2228:	90 0d       	add	r25, r0
    222a:	11 24       	eor	r1, r1
    222c:	08 0f       	add	r16, r24
    222e:	19 1f       	adc	r17, r25
    2230:	c1 2c       	mov	r12, r1
    2232:	d1 2c       	mov	r13, r1
    2234:	0f 2e       	mov	r0, r31
    2236:	f1 e6       	ldi	r31, 0x61	; 97
    2238:	ef 2e       	mov	r14, r31
    223a:	f2 e0       	ldi	r31, 0x02	; 2
    223c:	ff 2e       	mov	r15, r31
    223e:	f0 2d       	mov	r31, r0
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	cb 01       	movw	r24, r22
    224c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
		LCDDR2 = LCDDR2^(1<<2);
	}
}
void app_entry(app_object *self,int arg){
		// Runs first time setups that should not be run in the main.c file
		for(int i = 0; i < self->number_of_pulsegens; i++)
    2250:	21 96       	adiw	r28, 0x01	; 1
    2252:	f5 01       	movw	r30, r10
    2254:	87 81       	ldd	r24, Z+7	; 0x07
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	c8 17       	cp	r28, r24
    225a:	d9 07       	cpc	r29, r25
    225c:	f4 f2       	brlt	.-68     	; 0x221a <app_entry+0x1c>
			ASYNC((self->pulse_gens+i),pulse,0);
		ASYNC(self,update_display,0);
    225e:	c1 2c       	mov	r12, r1
    2260:	d1 2c       	mov	r13, r1
    2262:	0f 2e       	mov	r0, r31
    2264:	f6 e0       	ldi	r31, 0x06	; 6
    2266:	ef 2e       	mov	r14, r31
    2268:	f0 e1       	ldi	r31, 0x10	; 16
    226a:	ff 2e       	mov	r15, r31
    226c:	f0 2d       	mov	r31, r0
    226e:	85 01       	movw	r16, r10
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	a9 01       	movw	r20, r18
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	cb 01       	movw	r24, r22
    227c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <async>
	
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	08 95       	ret

00002296 <__divmodsi4>:
    2296:	05 2e       	mov	r0, r21
    2298:	97 fb       	bst	r25, 7
    229a:	1e f4       	brtc	.+6      	; 0x22a2 <__divmodsi4+0xc>
    229c:	00 94       	com	r0
    229e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__negsi2>
    22a2:	57 fd       	sbrc	r21, 7
    22a4:	07 d0       	rcall	.+14     	; 0x22b4 <__divmodsi4_neg2>
    22a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <__udivmodsi4>
    22aa:	07 fc       	sbrc	r0, 7
    22ac:	03 d0       	rcall	.+6      	; 0x22b4 <__divmodsi4_neg2>
    22ae:	4e f4       	brtc	.+18     	; 0x22c2 <__divmodsi4_exit>
    22b0:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__negsi2>

000022b4 <__divmodsi4_neg2>:
    22b4:	50 95       	com	r21
    22b6:	40 95       	com	r20
    22b8:	30 95       	com	r19
    22ba:	21 95       	neg	r18
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	4f 4f       	sbci	r20, 0xFF	; 255
    22c0:	5f 4f       	sbci	r21, 0xFF	; 255

000022c2 <__divmodsi4_exit>:
    22c2:	08 95       	ret

000022c4 <__negsi2>:
    22c4:	90 95       	com	r25
    22c6:	80 95       	com	r24
    22c8:	70 95       	com	r23
    22ca:	61 95       	neg	r22
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	8f 4f       	sbci	r24, 0xFF	; 255
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	08 95       	ret

000022d4 <__ashldi3>:
    22d4:	0f 93       	push	r16
    22d6:	08 30       	cpi	r16, 0x08	; 8
    22d8:	90 f0       	brcs	.+36     	; 0x22fe <__ashldi3+0x2a>
    22da:	98 2f       	mov	r25, r24
    22dc:	87 2f       	mov	r24, r23
    22de:	76 2f       	mov	r23, r22
    22e0:	65 2f       	mov	r22, r21
    22e2:	54 2f       	mov	r21, r20
    22e4:	43 2f       	mov	r20, r19
    22e6:	32 2f       	mov	r19, r18
    22e8:	22 27       	eor	r18, r18
    22ea:	08 50       	subi	r16, 0x08	; 8
    22ec:	f4 cf       	rjmp	.-24     	; 0x22d6 <__ashldi3+0x2>
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	44 1f       	adc	r20, r20
    22f4:	55 1f       	adc	r21, r21
    22f6:	66 1f       	adc	r22, r22
    22f8:	77 1f       	adc	r23, r23
    22fa:	88 1f       	adc	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	0a 95       	dec	r16
    2300:	b2 f7       	brpl	.-20     	; 0x22ee <__ashldi3+0x1a>
    2302:	0f 91       	pop	r16
    2304:	08 95       	ret

00002306 <__ashrdi3>:
    2306:	97 fb       	bst	r25, 7
    2308:	10 f8       	bld	r1, 0

0000230a <__lshrdi3>:
    230a:	16 94       	lsr	r1
    230c:	00 08       	sbc	r0, r0
    230e:	0f 93       	push	r16
    2310:	08 30       	cpi	r16, 0x08	; 8
    2312:	98 f0       	brcs	.+38     	; 0x233a <__lshrdi3+0x30>
    2314:	08 50       	subi	r16, 0x08	; 8
    2316:	23 2f       	mov	r18, r19
    2318:	34 2f       	mov	r19, r20
    231a:	45 2f       	mov	r20, r21
    231c:	56 2f       	mov	r21, r22
    231e:	67 2f       	mov	r22, r23
    2320:	78 2f       	mov	r23, r24
    2322:	89 2f       	mov	r24, r25
    2324:	90 2d       	mov	r25, r0
    2326:	f4 cf       	rjmp	.-24     	; 0x2310 <__lshrdi3+0x6>
    2328:	05 94       	asr	r0
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	77 95       	ror	r23
    2330:	67 95       	ror	r22
    2332:	57 95       	ror	r21
    2334:	47 95       	ror	r20
    2336:	37 95       	ror	r19
    2338:	27 95       	ror	r18
    233a:	0a 95       	dec	r16
    233c:	aa f7       	brpl	.-22     	; 0x2328 <__lshrdi3+0x1e>
    233e:	0f 91       	pop	r16
    2340:	08 95       	ret

00002342 <__adddi3>:
    2342:	2a 0d       	add	r18, r10
    2344:	3b 1d       	adc	r19, r11
    2346:	4c 1d       	adc	r20, r12
    2348:	5d 1d       	adc	r21, r13
    234a:	6e 1d       	adc	r22, r14
    234c:	7f 1d       	adc	r23, r15
    234e:	80 1f       	adc	r24, r16
    2350:	91 1f       	adc	r25, r17
    2352:	08 95       	ret

00002354 <__subdi3>:
    2354:	2a 19       	sub	r18, r10
    2356:	3b 09       	sbc	r19, r11
    2358:	4c 09       	sbc	r20, r12
    235a:	5d 09       	sbc	r21, r13
    235c:	6e 09       	sbc	r22, r14
    235e:	7f 09       	sbc	r23, r15
    2360:	80 0b       	sbc	r24, r16
    2362:	91 0b       	sbc	r25, r17
    2364:	08 95       	ret

00002366 <__udivmodsi4>:
    2366:	a1 e2       	ldi	r26, 0x21	; 33
    2368:	1a 2e       	mov	r1, r26
    236a:	aa 1b       	sub	r26, r26
    236c:	bb 1b       	sub	r27, r27
    236e:	fd 01       	movw	r30, r26
    2370:	0d c0       	rjmp	.+26     	; 0x238c <__udivmodsi4_ep>

00002372 <__udivmodsi4_loop>:
    2372:	aa 1f       	adc	r26, r26
    2374:	bb 1f       	adc	r27, r27
    2376:	ee 1f       	adc	r30, r30
    2378:	ff 1f       	adc	r31, r31
    237a:	a2 17       	cp	r26, r18
    237c:	b3 07       	cpc	r27, r19
    237e:	e4 07       	cpc	r30, r20
    2380:	f5 07       	cpc	r31, r21
    2382:	20 f0       	brcs	.+8      	; 0x238c <__udivmodsi4_ep>
    2384:	a2 1b       	sub	r26, r18
    2386:	b3 0b       	sbc	r27, r19
    2388:	e4 0b       	sbc	r30, r20
    238a:	f5 0b       	sbc	r31, r21

0000238c <__udivmodsi4_ep>:
    238c:	66 1f       	adc	r22, r22
    238e:	77 1f       	adc	r23, r23
    2390:	88 1f       	adc	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	1a 94       	dec	r1
    2396:	69 f7       	brne	.-38     	; 0x2372 <__udivmodsi4_loop>
    2398:	60 95       	com	r22
    239a:	70 95       	com	r23
    239c:	80 95       	com	r24
    239e:	90 95       	com	r25
    23a0:	9b 01       	movw	r18, r22
    23a2:	ac 01       	movw	r20, r24
    23a4:	bd 01       	movw	r22, r26
    23a6:	cf 01       	movw	r24, r30
    23a8:	08 95       	ret

000023aa <setjmp>:
    23aa:	dc 01       	movw	r26, r24
    23ac:	2d 92       	st	X+, r2
    23ae:	3d 92       	st	X+, r3
    23b0:	4d 92       	st	X+, r4
    23b2:	5d 92       	st	X+, r5
    23b4:	6d 92       	st	X+, r6
    23b6:	7d 92       	st	X+, r7
    23b8:	8d 92       	st	X+, r8
    23ba:	9d 92       	st	X+, r9
    23bc:	ad 92       	st	X+, r10
    23be:	bd 92       	st	X+, r11
    23c0:	cd 92       	st	X+, r12
    23c2:	dd 92       	st	X+, r13
    23c4:	ed 92       	st	X+, r14
    23c6:	fd 92       	st	X+, r15
    23c8:	0d 93       	st	X+, r16
    23ca:	1d 93       	st	X+, r17
    23cc:	cd 93       	st	X+, r28
    23ce:	dd 93       	st	X+, r29
    23d0:	ff 91       	pop	r31
    23d2:	ef 91       	pop	r30
    23d4:	8d b7       	in	r24, 0x3d	; 61
    23d6:	8d 93       	st	X+, r24
    23d8:	8e b7       	in	r24, 0x3e	; 62
    23da:	8d 93       	st	X+, r24
    23dc:	8f b7       	in	r24, 0x3f	; 63
    23de:	8d 93       	st	X+, r24
    23e0:	ed 93       	st	X+, r30
    23e2:	fd 93       	st	X+, r31
    23e4:	88 27       	eor	r24, r24
    23e6:	99 27       	eor	r25, r25
    23e8:	09 94       	ijmp

000023ea <longjmp>:
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	81 30       	cpi	r24, 0x01	; 1
    23f0:	91 05       	cpc	r25, r1
    23f2:	81 1d       	adc	r24, r1
    23f4:	2d 90       	ld	r2, X+
    23f6:	3d 90       	ld	r3, X+
    23f8:	4d 90       	ld	r4, X+
    23fa:	5d 90       	ld	r5, X+
    23fc:	6d 90       	ld	r6, X+
    23fe:	7d 90       	ld	r7, X+
    2400:	8d 90       	ld	r8, X+
    2402:	9d 90       	ld	r9, X+
    2404:	ad 90       	ld	r10, X+
    2406:	bd 90       	ld	r11, X+
    2408:	cd 90       	ld	r12, X+
    240a:	dd 90       	ld	r13, X+
    240c:	ed 90       	ld	r14, X+
    240e:	fd 90       	ld	r15, X+
    2410:	0d 91       	ld	r16, X+
    2412:	1d 91       	ld	r17, X+
    2414:	cd 91       	ld	r28, X+
    2416:	dd 91       	ld	r29, X+
    2418:	ed 91       	ld	r30, X+
    241a:	fd 91       	ld	r31, X+
    241c:	0d 90       	ld	r0, X+
    241e:	f8 94       	cli
    2420:	fe bf       	out	0x3e, r31	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	ed bf       	out	0x3d, r30	; 61
    2426:	ed 91       	ld	r30, X+
    2428:	fd 91       	ld	r31, X+
    242a:	09 94       	ijmp

0000242c <_exit>:
    242c:	f8 94       	cli

0000242e <__stop_program>:
    242e:	ff cf       	rjmp	.-2      	; 0x242e <__stop_program>
