
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000247e  00002512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000247e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080015e  0080015e  00002570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f0b  00000000  00000000  00002878  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000149e  00000000  00000000  00006783  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a4d  00000000  00000000  00007c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d6c  00000000  00000000  00009670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ace  00000000  00000000  0000a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003978  00000000  00000000  0000aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000e822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_1>
       8:	0c 94 7a 05 	jmp	0xaf4	; 0xaf4 <__vector_2>
       c:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_3>
      10:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_4>
      14:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_9>
      28:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_10>
      2c:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_11>
      30:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_12>
      34:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_13>
      38:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_14>
      3c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_15>
      40:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_16>
      44:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__vector_17>
      48:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_18>
      4c:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_19>
      50:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_20>
      54:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_21>
      58:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e7       	ldi	r30, 0x7E	; 126
      70:	f4 e2       	ldi	r31, 0x24	; 36
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ae 35       	cpi	r26, 0x5E	; 94
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ae e5       	ldi	r26, 0x5E	; 94
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a5 3b       	cpi	r26, 0xB5	; 181
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <main>
      92:	0c 94 3d 12 	jmp	0x247a	; 0x247a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <handle_joystick>:
 *
 * Created: 2022-03-01 16:20:33
 *  Author: ivarj
 */
#include "../include/button.h"
void handle_joystick(button_object *self,int arg){
      9a:	7f 92       	push	r7
      9c:	8f 92       	push	r8
      9e:	9f 92       	push	r9
      a0:	af 92       	push	r10
      a2:	bf 92       	push	r11
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
	self->looping = 1;
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	fc 01       	movw	r30, r24
      b8:	26 83       	std	Z+6, r18	; 0x06
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      ba:	e3 b1       	in	r30, 0x03	; 3
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
      bc:	4e 2f       	mov	r20, r30
      be:	40 71       	andi	r20, 0x10	; 16
      c0:	50 e0       	ldi	r21, 0x00	; 0
      c2:	8a 01       	movw	r16, r20
      c4:	15 95       	asr	r17
      c6:	07 95       	ror	r16
      c8:	15 95       	asr	r17
      ca:	07 95       	ror	r16
      cc:	15 95       	asr	r17
      ce:	07 95       	ror	r16
      d0:	15 95       	asr	r17
      d2:	07 95       	ror	r16
      d4:	d0 2e       	mov	r13, r16
      d6:	2e 2f       	mov	r18, r30
      d8:	20 74       	andi	r18, 0x40	; 64
      da:	30 e0       	ldi	r19, 0x00	; 0
      dc:	02 2e       	mov	r0, r18
      de:	23 2f       	mov	r18, r19
      e0:	00 0c       	add	r0, r0
      e2:	22 1f       	adc	r18, r18
      e4:	33 0b       	sbc	r19, r19
      e6:	00 0c       	add	r0, r0
      e8:	22 1f       	adc	r18, r18
      ea:	33 1f       	adc	r19, r19
      ec:	c2 2f       	mov	r28, r18
      ee:	e0 78       	andi	r30, 0x80	; 128
      f0:	4e 2f       	mov	r20, r30
      f2:	50 e0       	ldi	r21, 0x00	; 0
      f4:	44 0f       	add	r20, r20
      f6:	45 2f       	mov	r20, r21
      f8:	44 1f       	adc	r20, r20
      fa:	55 0b       	sbc	r21, r21
      fc:	d4 2f       	mov	r29, r20
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
      fe:	ac b1       	in	r26, 0x0c	; 12
inline void read_8_field(uint8_t *reg, uint8_t* ret, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	*ret = (temp&mask)>>offset;
     100:	ea 2f       	mov	r30, r26
     102:	e4 70       	andi	r30, 0x04	; 4
     104:	ee 2e       	mov	r14, r30
     106:	f1 2c       	mov	r15, r1
     108:	f5 94       	asr	r15
     10a:	e7 94       	ror	r14
     10c:	f5 94       	asr	r15
     10e:	e7 94       	ror	r14
     110:	7e 2c       	mov	r7, r14
     112:	a8 70       	andi	r26, 0x08	; 8
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	b5 95       	asr	r27
     118:	a7 95       	ror	r26
     11a:	b5 95       	asr	r27
     11c:	a7 95       	ror	r26
     11e:	b5 95       	asr	r27
     120:	a7 95       	ror	r26
     122:	ca 2e       	mov	r12, r26
	read_8_field(&PINB,&press,1,4);
	read_8_field(&PINB,&up,1,6);
	read_8_field(&PINB,&down,1,7);
	read_8_field(&PINE,&left,1,2);
	read_8_field(&PINE,&right,1,3);
	if((up)&&(down)){
     124:	22 23       	and	r18, r18
     126:	21 f0       	breq	.+8      	; 0x130 <handle_joystick+0x96>
     128:	44 23       	and	r20, r20
     12a:	11 f0       	breq	.+4      	; 0x130 <handle_joystick+0x96>
		self->looping = 0;
     12c:	fc 01       	movw	r30, r24
     12e:	16 82       	std	Z+6, r1	; 0x06
	}
	// If not exactly one of the buttons have been pressed return
	// This makes it not act on release
	if(up+down+press+left+right != 4&& arg == 1){
     130:	fa 01       	movw	r30, r20
     132:	e2 0f       	add	r30, r18
     134:	f3 1f       	adc	r31, r19
     136:	a8 01       	movw	r20, r16
     138:	4e 0f       	add	r20, r30
     13a:	5f 1f       	adc	r21, r31
     13c:	97 01       	movw	r18, r14
     13e:	24 0f       	add	r18, r20
     140:	35 1f       	adc	r19, r21
     142:	2a 0f       	add	r18, r26
     144:	3b 1f       	adc	r19, r27
     146:	24 30       	cpi	r18, 0x04	; 4
     148:	31 05       	cpc	r19, r1
     14a:	31 f0       	breq	.+12     	; 0x158 <handle_joystick+0xbe>
     14c:	61 30       	cpi	r22, 0x01	; 1
     14e:	71 05       	cpc	r23, r1
     150:	19 f4       	brne	.+6      	; 0x158 <handle_joystick+0xbe>
		self->looping = 0;
     152:	fc 01       	movw	r30, r24
     154:	16 82       	std	Z+6, r1	; 0x06
		return;
     156:	93 c0       	rjmp	.+294    	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
	}
	else if(up+down+press+left+right != 4)
     158:	24 30       	cpi	r18, 0x04	; 4
     15a:	31 05       	cpc	r19, r1
     15c:	09 f0       	breq	.+2      	; 0x160 <handle_joystick+0xc6>
     15e:	8f c0       	rjmp	.+286    	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
     160:	5b 01       	movw	r10, r22
     162:	4c 01       	movw	r8, r24
	return;
	else 
	// Treating it like booleans, all but 0 is 1 thus if !val is true, reg is 0,
	// Just think it looks neater than ==0
	if(!up)
     164:	c1 11       	cpse	r28, r1
     166:	15 c0       	rjmp	.+42     	; 0x192 <handle_joystick+0xf8>
		ASYNC(self->app,itterate_freq,1);
     168:	fc 01       	movw	r30, r24
     16a:	04 81       	ldd	r16, Z+4	; 0x04
     16c:	15 81       	ldd	r17, Z+5	; 0x05
     16e:	cc 24       	eor	r12, r12
     170:	c3 94       	inc	r12
     172:	d1 2c       	mov	r13, r1
     174:	0f 2e       	mov	r0, r31
     176:	f5 e8       	ldi	r31, 0x85	; 133
     178:	ef 2e       	mov	r14, r31
     17a:	f0 e1       	ldi	r31, 0x10	; 16
     17c:	ff 2e       	mov	r15, r31
     17e:	f0 2d       	mov	r31, r0
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	cb 01       	movw	r24, r22
     18c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     190:	59 c0       	rjmp	.+178    	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
	else if(!down)
     192:	d1 11       	cpse	r29, r1
     194:	15 c0       	rjmp	.+42     	; 0x1c0 <handle_joystick+0x126>
		ASYNC(self->app,itterate_freq,-1);
     196:	fc 01       	movw	r30, r24
     198:	04 81       	ldd	r16, Z+4	; 0x04
     19a:	15 81       	ldd	r17, Z+5	; 0x05
     19c:	cc 24       	eor	r12, r12
     19e:	ca 94       	dec	r12
     1a0:	dc 2c       	mov	r13, r12
     1a2:	0f 2e       	mov	r0, r31
     1a4:	f5 e8       	ldi	r31, 0x85	; 133
     1a6:	ef 2e       	mov	r14, r31
     1a8:	f0 e1       	ldi	r31, 0x10	; 16
     1aa:	ff 2e       	mov	r15, r31
     1ac:	f0 2d       	mov	r31, r0
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	a9 01       	movw	r20, r18
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	cb 01       	movw	r24, r22
     1ba:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     1be:	42 c0       	rjmp	.+132    	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
	else if(!press)
     1c0:	d1 10       	cpse	r13, r1
     1c2:	14 c0       	rjmp	.+40     	; 0x1ec <handle_joystick+0x152>
		ASYNC(self->app,save_freq,0);
     1c4:	fc 01       	movw	r30, r24
     1c6:	04 81       	ldd	r16, Z+4	; 0x04
     1c8:	15 81       	ldd	r17, Z+5	; 0x05
     1ca:	c1 2c       	mov	r12, r1
     1cc:	d1 2c       	mov	r13, r1
     1ce:	0f 2e       	mov	r0, r31
     1d0:	ff ec       	ldi	r31, 0xCF	; 207
     1d2:	ef 2e       	mov	r14, r31
     1d4:	f0 e1       	ldi	r31, 0x10	; 16
     1d6:	ff 2e       	mov	r15, r31
     1d8:	f0 2d       	mov	r31, r0
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	a9 01       	movw	r20, r18
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	cb 01       	movw	r24, r22
     1e6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     1ea:	2c c0       	rjmp	.+88     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
	else if(!right)
     1ec:	c1 10       	cpse	r12, r1
     1ee:	15 c0       	rjmp	.+42     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		ASYNC(self->app,change_pulse_gen,1);
     1f0:	fc 01       	movw	r30, r24
     1f2:	04 81       	ldd	r16, Z+4	; 0x04
     1f4:	15 81       	ldd	r17, Z+5	; 0x05
     1f6:	cc 24       	eor	r12, r12
     1f8:	c3 94       	inc	r12
     1fa:	d1 2c       	mov	r13, r1
     1fc:	0f 2e       	mov	r0, r31
     1fe:	f5 e6       	ldi	r31, 0x65	; 101
     200:	ef 2e       	mov	r14, r31
     202:	f0 e1       	ldi	r31, 0x10	; 16
     204:	ff 2e       	mov	r15, r31
     206:	f0 2d       	mov	r31, r0
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	a9 01       	movw	r20, r18
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	cb 01       	movw	r24, r22
     214:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     218:	15 c0       	rjmp	.+42     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
	else if(!left)
     21a:	71 10       	cpse	r7, r1
     21c:	13 c0       	rjmp	.+38     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
		ASYNC(self->app,change_pulse_gen,0);
     21e:	fc 01       	movw	r30, r24
     220:	04 81       	ldd	r16, Z+4	; 0x04
     222:	15 81       	ldd	r17, Z+5	; 0x05
     224:	c1 2c       	mov	r12, r1
     226:	d1 2c       	mov	r13, r1
     228:	0f 2e       	mov	r0, r31
     22a:	f5 e6       	ldi	r31, 0x65	; 101
     22c:	ef 2e       	mov	r14, r31
     22e:	f0 e1       	ldi	r31, 0x10	; 16
     230:	ff 2e       	mov	r15, r31
     232:	f0 2d       	mov	r31, r0
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	a9 01       	movw	r20, r18
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	cb 01       	movw	r24, r22
     240:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
		
		
	if((!up)||(!down)){
     244:	cc 23       	and	r28, r28
     246:	11 f0       	breq	.+4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
     248:	d1 11       	cpse	r29, r1
     24a:	14 c0       	rjmp	.+40     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
		AFTER(MSEC(150),self,handle_joystick,1);
     24c:	cc 24       	eor	r12, r12
     24e:	c3 94       	inc	r12
     250:	d1 2c       	mov	r13, r1
     252:	0f 2e       	mov	r0, r31
     254:	fd e4       	ldi	r31, 0x4D	; 77
     256:	ef 2e       	mov	r14, r31
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	ff 2e       	mov	r15, r31
     25c:	f0 2d       	mov	r31, r0
     25e:	84 01       	movw	r16, r8
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	a9 01       	movw	r20, r18
     266:	6f e4       	ldi	r22, 0x4F	; 79
     268:	72 e1       	ldi	r23, 0x12	; 18
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     272:	05 c0       	rjmp	.+10     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
	}
	else if(arg == 1){
     274:	aa 94       	dec	r10
     276:	ab 28       	or	r10, r11
     278:	11 f4       	brne	.+4      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
		self->looping = 0;
     27a:	f4 01       	movw	r30, r8
     27c:	16 82       	std	Z+6, r1	; 0x06
	}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	bf 90       	pop	r11
     290:	af 90       	pop	r10
     292:	9f 90       	pop	r9
     294:	8f 90       	pop	r8
     296:	7f 90       	pop	r7
     298:	08 95       	ret

0000029a <left_right_handeler>:
 * Created: 2022-02-23 08:33:01
 *  Author: ivarj
 */ 
#include "../include/interrupt.h"
#define cool_delay 500
void left_right_handeler(interrupt_object *self,int arg){
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
	ASYNC(self->button,handle_joystick,0);
     2a6:	fc 01       	movw	r30, r24
     2a8:	04 81       	ldd	r16, Z+4	; 0x04
     2aa:	15 81       	ldd	r17, Z+5	; 0x05
     2ac:	c1 2c       	mov	r12, r1
     2ae:	d1 2c       	mov	r13, r1
     2b0:	0f 2e       	mov	r0, r31
     2b2:	fd e4       	ldi	r31, 0x4D	; 77
     2b4:	ef 2e       	mov	r14, r31
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ff 2e       	mov	r15, r31
     2ba:	f0 2d       	mov	r31, r0
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	30 e0       	ldi	r19, 0x00	; 0
     2c0:	a9 01       	movw	r20, r18
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	cb 01       	movw	r24, r22
     2c8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
}
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	ff 90       	pop	r15
     2d2:	ef 90       	pop	r14
     2d4:	df 90       	pop	r13
     2d6:	cf 90       	pop	r12
     2d8:	08 95       	ret

000002da <upp_down_press_handeler>:
void upp_down_press_handeler(interrupt_object *self, int arg){
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
	uint8_t press;
	read_8_field(&PINB,&press,1,4);
	if(!press||!(self->button->looping))
     2e6:	1c 9b       	sbis	0x03, 4	; 3
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <upp_down_press_handeler+0x20>
     2ea:	dc 01       	movw	r26, r24
     2ec:	14 96       	adiw	r26, 0x04	; 4
     2ee:	ed 91       	ld	r30, X+
     2f0:	fc 91       	ld	r31, X
     2f2:	15 97       	sbiw	r26, 0x05	; 5
     2f4:	26 81       	ldd	r18, Z+6	; 0x06
     2f6:	21 11       	cpse	r18, r1
     2f8:	13 c0       	rjmp	.+38     	; 0x320 <upp_down_press_handeler+0x46>
     2fa:	fc 01       	movw	r30, r24
		ASYNC(self->button,handle_joystick,0);
     2fc:	04 81       	ldd	r16, Z+4	; 0x04
     2fe:	15 81       	ldd	r17, Z+5	; 0x05
     300:	c1 2c       	mov	r12, r1
     302:	d1 2c       	mov	r13, r1
     304:	0f 2e       	mov	r0, r31
     306:	fd e4       	ldi	r31, 0x4D	; 77
     308:	ef 2e       	mov	r14, r31
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ff 2e       	mov	r15, r31
     30e:	f0 2d       	mov	r31, r0
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	cb 01       	movw	r24, r22
     31c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
		
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	df 90       	pop	r13
     32a:	cf 90       	pop	r12
     32c:	08 95       	ret

0000032e <toggle_bit>:
 *  Author: ivarj
 */ 
#include "../include/io.h"
#include <avr/io.h>
volatile void toggle_bit(io_object *self, uint8_t offset){
	if(offset > 7)
     32e:	68 30       	cpi	r22, 0x08	; 8
     330:	50 f4       	brcc	.+20     	; 0x346 <toggle_bit+0x18>
		return;
	uint8_t field = 1<<(offset);
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	02 c0       	rjmp	.+4      	; 0x33c <toggle_bit+0xe>
     338:	88 0f       	add	r24, r24
     33a:	99 1f       	adc	r25, r25
     33c:	6a 95       	dec	r22
     33e:	e2 f7       	brpl	.-8      	; 0x338 <toggle_bit+0xa>
	PORTE = PORTE ^ field;
     340:	9e b1       	in	r25, 0x0e	; 14
     342:	89 27       	eor	r24, r25
     344:	8e b9       	out	0x0e, r24	; 14
     346:	08 95       	ret

00000348 <set_low>:
}
volatile void set_low(io_object *self,uint8_t offset){
	if (offset >7)
     348:	68 30       	cpi	r22, 0x08	; 8
     34a:	58 f4       	brcc	.+22     	; 0x362 <set_low+0x1a>
		return;
	uint8_t field = ~(1<<offset);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <set_low+0xe>
     352:	88 0f       	add	r24, r24
     354:	99 1f       	adc	r25, r25
     356:	6a 95       	dec	r22
     358:	e2 f7       	brpl	.-8      	; 0x352 <set_low+0xa>
     35a:	80 95       	com	r24
	PORTE = PORTE&field;
     35c:	9e b1       	in	r25, 0x0e	; 14
     35e:	89 23       	and	r24, r25
     360:	8e b9       	out	0x0e, r24	; 14
     362:	08 95       	ret

00000364 <init_lcd>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     364:	e4 ee       	ldi	r30, 0xE4	; 228
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     36a:	80 6c       	ori	r24, 0xC0	; 192
     36c:	8e 7e       	andi	r24, 0xEE	; 238
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     36e:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     370:	e5 ee       	ldi	r30, 0xE5	; 229
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     376:	87 6b       	ori	r24, 0xB7	; 183
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     378:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     37a:	e6 ee       	ldi	r30, 0xE6	; 230
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     380:	88 78       	andi	r24, 0x88	; 136
     382:	87 60       	ori	r24, 0x07	; 7
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     384:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     386:	e7 ee       	ldi	r30, 0xE7	; 231
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     38c:	80 71       	andi	r24, 0x10	; 16
     38e:	8f 60       	ori	r24, 0x0F	; 15
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     390:	80 83       	st	Z, r24
     392:	08 95       	ret

00000394 <write_char>:
	// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V
	write_8_field(&LCDCCR,15,4,0);
	//LCDCCR = LCDCCR|((15));
}

void write_char(char ch,int pos){
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	a8 97       	sbiw	r28, 0x28	; 40
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
	// Our dictionary
	long dict_arr[] = {
     3aa:	98 e2       	ldi	r25, 0x28	; 40
     3ac:	e5 e3       	ldi	r30, 0x35	; 53
     3ae:	f1 e0       	ldi	r31, 0x01	; 1
     3b0:	de 01       	movw	r26, r28
     3b2:	11 96       	adiw	r26, 0x01	; 1
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	9a 95       	dec	r25
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <write_char+0x20>
		0x1F41,				// ...		  6
		0x0111,				// ...		  7
		0x1F51,				// ...		  8
		0x1B51				// ...		  9
	};
	if(pos < 0 || pos > 5)
     3bc:	16 2f       	mov	r17, r22
     3be:	66 30       	cpi	r22, 0x06	; 6
     3c0:	71 05       	cpc	r23, r1
     3c2:	e0 f5       	brcc	.+120    	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
		return;
	uint16_t num = 0x0;
	uint8_t *address = (uint8_t *)(0xEC+(pos>>1));
     3c4:	75 95       	asr	r23
     3c6:	67 95       	ror	r22
     3c8:	fb 01       	movw	r30, r22
     3ca:	e4 51       	subi	r30, 0x14	; 20
     3cc:	ff 4f       	sbci	r31, 0xFF	; 255
	
	if(ch>=48&& ch<=57){
     3ce:	90 ed       	ldi	r25, 0xD0	; 208
     3d0:	98 0f       	add	r25, r24
     3d2:	9a 30       	cpi	r25, 0x0A	; 10
     3d4:	80 f4       	brcc	.+32     	; 0x3f6 <write_char+0x62>
		num = dict_arr[ch-48];
     3d6:	a8 2f       	mov	r26, r24
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	d0 97       	sbiw	r26, 0x30	; 48
     3dc:	aa 0f       	add	r26, r26
     3de:	bb 1f       	adc	r27, r27
     3e0:	aa 0f       	add	r26, r26
     3e2:	bb 1f       	adc	r27, r27
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	8c 0f       	add	r24, r28
     3ea:	9d 1f       	adc	r25, r29
     3ec:	a8 0f       	add	r26, r24
     3ee:	b9 1f       	adc	r27, r25
     3f0:	4d 91       	ld	r20, X+
     3f2:	5c 91       	ld	r21, X
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <write_char+0x66>
		0x1F51,				// ...		  8
		0x1B51				// ...		  9
	};
	if(pos < 0 || pos > 5)
		return;
	uint16_t num = 0x0;
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	1b c0       	rjmp	.+54     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
	if(ch>=48&& ch<=57){
		num = dict_arr[ch-48];
	}
	
	for( int i= 0; i < 4; i++){
		uint8_t nibble = num&0xf;
     400:	94 2f       	mov	r25, r20
     402:	9f 70       	andi	r25, 0x0F	; 15
		num>>=4;
     404:	52 95       	swap	r21
     406:	42 95       	swap	r20
     408:	4f 70       	andi	r20, 0x0F	; 15
     40a:	45 27       	eor	r20, r21
     40c:	5f 70       	andi	r21, 0x0F	; 15
     40e:	45 27       	eor	r20, r21
		
		if(pos%2==0)
     410:	10 fd       	sbrc	r17, 0
     412:	05 c0       	rjmp	.+10     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
		{
			*address = (*address)&0xf0;
     414:	80 81       	ld	r24, Z
     416:	80 7f       	andi	r24, 0xF0	; 240
			*address = (*address)|nibble;
     418:	89 2b       	or	r24, r25
     41a:	80 83       	st	Z, r24
     41c:	09 c0       	rjmp	.+18     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
		}
		else
		{
			*address = (*address)&0x0f;
     41e:	80 81       	ld	r24, Z
     420:	68 2f       	mov	r22, r24
     422:	6f 70       	andi	r22, 0x0F	; 15
			*address =  *address | nibble << 4;
     424:	70 e1       	ldi	r23, 0x10	; 16
     426:	97 9f       	mul	r25, r23
     428:	c0 01       	movw	r24, r0
     42a:	11 24       	eor	r1, r1
     42c:	86 2b       	or	r24, r22
     42e:	80 83       	st	Z, r24
		}
		address+=5;
     430:	35 96       	adiw	r30, 0x05	; 5
	
	if(ch>=48&& ch<=57){
		num = dict_arr[ch-48];
	}
	
	for( int i= 0; i < 4; i++){
     432:	2f 5f       	subi	r18, 0xFF	; 255
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	24 30       	cpi	r18, 0x04	; 4
     438:	31 05       	cpc	r19, r1
     43a:	14 f3       	brlt	.-60     	; 0x400 <__DATA_REGION_LENGTH__>
		address+=5;
		
	}
	
	
}
     43c:	a8 96       	adiw	r28, 0x28	; 40
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	08 95       	ret

00000450 <print_at>:

/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/

void print_at(uint8_t num, uint8_t pos, uint8_t width){
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	18 2f       	mov	r17, r24
     45a:	06 2f       	mov	r16, r22
	for(int i = width-1; i >= 0; i--){
     45c:	c4 2f       	mov	r28, r20
     45e:	d0 e0       	ldi	r29, 0x00	; 0
     460:	21 97       	sbiw	r28, 0x01	; 1
     462:	1a c0       	rjmp	.+52     	; 0x498 <print_at+0x48>
		uint8_t temp = num%10;
     464:	9d ec       	ldi	r25, 0xCD	; 205
     466:	19 9f       	mul	r17, r25
     468:	91 2d       	mov	r25, r1
     46a:	11 24       	eor	r1, r1
     46c:	89 2f       	mov	r24, r25
     46e:	86 95       	lsr	r24
     470:	86 95       	lsr	r24
     472:	86 95       	lsr	r24
     474:	88 0f       	add	r24, r24
     476:	28 2f       	mov	r18, r24
     478:	22 0f       	add	r18, r18
     47a:	22 0f       	add	r18, r18
     47c:	82 0f       	add	r24, r18
     47e:	18 1b       	sub	r17, r24
     480:	81 2f       	mov	r24, r17
		num = num/10;
     482:	19 2f       	mov	r17, r25
     484:	16 95       	lsr	r17
     486:	16 95       	lsr	r17
     488:	16 95       	lsr	r17
		write_char(temp+48,pos+i);
     48a:	be 01       	movw	r22, r28
     48c:	60 0f       	add	r22, r16
     48e:	71 1d       	adc	r23, r1
     490:	80 5d       	subi	r24, 0xD0	; 208
     492:	0e 94 ca 01 	call	0x394	; 0x394 <write_char>
/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/

void print_at(uint8_t num, uint8_t pos, uint8_t width){
	for(int i = width-1; i >= 0; i--){
     496:	21 97       	sbiw	r28, 0x01	; 1
     498:	dd 23       	and	r29, r29
     49a:	24 f7       	brge	.-56     	; 0x464 <print_at+0x14>
		uint8_t temp = num%10;
		num = num/10;
		write_char(temp+48,pos+i);
	}
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	08 95       	ret

000004a6 <init_outputs>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4a6:	8d b1       	in	r24, 0x0d	; 13
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4a8:	80 65       	ori	r24, 0x50	; 80
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4aa:	8d b9       	out	0x0d, r24	; 13
     4ac:	08 95       	ret

000004ae <init_joystick>:
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4ae:	85 b1       	in	r24, 0x05	; 5
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4b0:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4b2:	85 b9       	out	0x05, r24	; 5
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4b4:	8e b1       	in	r24, 0x0e	; 14
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4b6:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4b8:	8e b9       	out	0x0e, r24	; 14
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4ba:	8d b3       	in	r24, 0x1d	; 29
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4bc:	80 6c       	ori	r24, 0xC0	; 192
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4be:	8d bb       	out	0x1d, r24	; 29
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4c0:	eb e6       	ldi	r30, 0x6B	; 107
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4c6:	8c 60       	ori	r24, 0x0C	; 12
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4c8:	80 83       	st	Z, r24
#include <stdint-gcc.h>
/**
* Reads a u8 from 
**/
inline void read_8(uint8_t *reg, uint8_t *ret){
	*ret = *reg;
     4ca:	ec e6       	ldi	r30, 0x6C	; 108
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
inline void write_8_field(uint8_t *reg,uint8_t value, uint8_t field_width,uint8_t offset){
	uint8_t temp;
	read_8(reg,&temp);
	// Masks out the relevant bits
	uint8_t mask = ((1<<field_width)-1)<<offset;
	value = ((~(mask))&temp)| (value<<offset&mask);
     4d0:	80 6d       	ori	r24, 0xD0	; 208
}
inline void read_16(uint8_t *reg, uint16_t *ret){
	return;
};
inline void write_8(uint8_t *reg, uint8_t val){
	*reg = val;
     4d2:	80 83       	st	Z, r24
	write_8_field(&EIMSK,3,2,6); // Enable all external interrupt registers
	write_8_field(&PCMSK0,3,2,2); // Enable interrupts on PCINT2,3
	write_8_field(&PCMSK1,3,2,6); // Enable interrupts PCINT15,14
	write_8_field(&PCMSK1,1,1,4); // Enable interrupts for PCINT12
	// Installing handelers for the relevabt actions
	INSTALL(&interrupts,left_right_handeler,IRQ_PCINT0);	
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	6d e4       	ldi	r22, 0x4D	; 77
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <install>
	INSTALL(&interrupts,upp_down_press_handeler,IRQ_PCINT1);
     4e2:	42 e0       	ldi	r20, 0x02	; 2
     4e4:	6d e6       	ldi	r22, 0x6D	; 109
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <install>
     4f0:	08 95       	ret

000004f2 <main>:
}
int main(void)
{
	init_lcd();
     4f2:	0e 94 b2 01 	call	0x364	; 0x364 <init_lcd>
	init_outputs();
     4f6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <init_outputs>
	init_joystick();
     4fa:	0e 94 57 02 	call	0x4ae	; 0x4ae <init_joystick>
	// Launching tiny timber, with the app_entry function
	return TINYTIMBER(&app,app_entry,0);
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	66 e2       	ldi	r22, 0x26	; 38
     504:	71 e1       	ldi	r23, 0x11	; 17
     506:	8d e0       	ldi	r24, 0x0D	; 13
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 16 10 	call	0x202c	; 0x202c <tinytimber>
}
     50e:	08 95       	ret

00000510 <pulse>:
 * Created: 2022-02-22 14:27:18
 *  Author: ivarj
 */ 
#include "../include/puls_gen.h"

void pulse(pulse_gen *self, uint8_t arg){
     510:	5f 92       	push	r5
     512:	6f 92       	push	r6
     514:	7f 92       	push	r7
     516:	8f 92       	push	r8
     518:	9f 92       	push	r9
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	ec 01       	movw	r28, r24
	self->running = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	8a 87       	std	Y+10, r24	; 0x0a
	uint64_t delay = 1000000/self->freq;
     534:	2c 81       	ldd	r18, Y+4	; 0x04
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	60 e4       	ldi	r22, 0x40	; 64
     53e:	72 e4       	ldi	r23, 0x42	; 66
     540:	8f e0       	ldi	r24, 0x0F	; 15
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodsi4>
     548:	69 01       	movw	r12, r18
     54a:	7a 01       	movw	r14, r20
     54c:	49 01       	movw	r8, r18
     54e:	5a 01       	movw	r10, r20
     550:	bb 0c       	add	r11, r11
     552:	88 08       	sbc	r8, r8
     554:	98 2c       	mov	r9, r8
     556:	54 01       	movw	r10, r8
	SYNC(self->reg_handeler,toggle_bit,self->bit_offset);
     558:	4d 81       	ldd	r20, Y+5	; 0x05
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	67 e9       	ldi	r22, 0x97	; 151
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	8e 81       	ldd	r24, Y+6	; 0x06
     562:	9f 81       	ldd	r25, Y+7	; 0x07
     564:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sync>
	self->last_message = AFTER(USEC(delay/2),self,pulse,0);
     568:	2c 2d       	mov	r18, r12
     56a:	3d 2d       	mov	r19, r13
     56c:	4e 2d       	mov	r20, r14
     56e:	5f 2d       	mov	r21, r15
     570:	68 2d       	mov	r22, r8
     572:	78 2d       	mov	r23, r8
     574:	88 2d       	mov	r24, r8
     576:	98 2d       	mov	r25, r8
     578:	01 e0       	ldi	r16, 0x01	; 1
     57a:	0e 94 ac 11 	call	0x2358	; 0x2358 <__lshrdi3>
     57e:	72 2e       	mov	r7, r18
     580:	83 2e       	mov	r8, r19
     582:	94 2e       	mov	r9, r20
     584:	b5 2f       	mov	r27, r21
     586:	a6 2f       	mov	r26, r22
     588:	f7 2f       	mov	r31, r23
     58a:	e8 2f       	mov	r30, r24
     58c:	59 2e       	mov	r5, r25
     58e:	02 e0       	ldi	r16, 0x02	; 2
     590:	0e 94 91 11 	call	0x2322	; 0x2322 <__ashldi3>
     594:	a2 2e       	mov	r10, r18
     596:	b3 2e       	mov	r11, r19
     598:	c4 2e       	mov	r12, r20
     59a:	d5 2e       	mov	r13, r21
     59c:	e6 2e       	mov	r14, r22
     59e:	f7 2e       	mov	r15, r23
     5a0:	68 2e       	mov	r6, r24
     5a2:	19 2f       	mov	r17, r25
     5a4:	05 e0       	ldi	r16, 0x05	; 5
     5a6:	0e 94 91 11 	call	0x2322	; 0x2322 <__ashldi3>
     5aa:	06 2d       	mov	r16, r6
     5ac:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__subdi3>
     5b0:	a7 2c       	mov	r10, r7
     5b2:	b8 2c       	mov	r11, r8
     5b4:	c9 2c       	mov	r12, r9
     5b6:	db 2e       	mov	r13, r27
     5b8:	ea 2e       	mov	r14, r26
     5ba:	ff 2e       	mov	r15, r31
     5bc:	0e 2f       	mov	r16, r30
     5be:	15 2d       	mov	r17, r5
     5c0:	0e 94 c8 11 	call	0x2390	; 0x2390 <__adddi3>
     5c4:	02 e0       	ldi	r16, 0x02	; 2
     5c6:	0e 94 ac 11 	call	0x2358	; 0x2358 <__lshrdi3>
     5ca:	62 2f       	mov	r22, r18
     5cc:	73 2f       	mov	r23, r19
     5ce:	84 2f       	mov	r24, r20
     5d0:	95 2f       	mov	r25, r21
     5d2:	28 ee       	ldi	r18, 0xE8	; 232
     5d4:	33 e0       	ldi	r19, 0x03	; 3
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__divmodsi4>
     5de:	ca 01       	movw	r24, r20
     5e0:	b9 01       	movw	r22, r18
     5e2:	c1 2c       	mov	r12, r1
     5e4:	d1 2c       	mov	r13, r1
     5e6:	0f 2e       	mov	r0, r31
     5e8:	f8 e8       	ldi	r31, 0x88	; 136
     5ea:	ef 2e       	mov	r14, r31
     5ec:	f2 e0       	ldi	r31, 0x02	; 2
     5ee:	ff 2e       	mov	r15, r31
     5f0:	f0 2d       	mov	r31, r0
     5f2:	8e 01       	movw	r16, r28
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     5fe:	99 87       	std	Y+9, r25	; 0x09
     600:	88 87       	std	Y+8, r24	; 0x08
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	bf 90       	pop	r11
     614:	af 90       	pop	r10
     616:	9f 90       	pop	r9
     618:	8f 90       	pop	r8
     61a:	7f 90       	pop	r7
     61c:	6f 90       	pop	r6
     61e:	5f 90       	pop	r5
     620:	08 95       	ret

00000622 <disable>:
void disable(pulse_gen *self, int arg){
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ec 01       	movw	r28, r24
	ABORT(self->last_message);
     628:	88 85       	ldd	r24, Y+8	; 0x08
     62a:	99 85       	ldd	r25, Y+9	; 0x09
     62c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <ABORT>
	self->running = 0;
     630:	1a 86       	std	Y+10, r1	; 0x0a
	SYNC(self->reg_handeler,set_low,self->bit_offset);
     632:	4d 81       	ldd	r20, Y+5	; 0x05
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	64 ea       	ldi	r22, 0xA4	; 164
     638:	71 e0       	ldi	r23, 0x01	; 1
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	9f 81       	ldd	r25, Y+7	; 0x07
     63e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sync>
	
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <change_freq>:
// Gets applied in the next cycle
void change_freq(pulse_gen *self,uint8_t freq){
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
	self->freq = freq;
     654:	fc 01       	movw	r30, r24
     656:	64 83       	std	Z+4, r22	; 0x04
	if(freq == 0)
     658:	61 11       	cpse	r22, r1
     65a:	12 c0       	rjmp	.+36     	; 0x680 <change_freq+0x38>
		ASYNC(self,disable,0);
     65c:	c1 2c       	mov	r12, r1
     65e:	d1 2c       	mov	r13, r1
     660:	0f 2e       	mov	r0, r31
     662:	f1 e1       	ldi	r31, 0x11	; 17
     664:	ef 2e       	mov	r14, r31
     666:	f3 e0       	ldi	r31, 0x03	; 3
     668:	ff 2e       	mov	r15, r31
     66a:	f0 2d       	mov	r31, r0
     66c:	8c 01       	movw	r16, r24
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a9 01       	movw	r20, r18
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	cb 01       	movw	r24, r22
     67a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
     67e:	15 c0       	rjmp	.+42     	; 0x6aa <change_freq+0x62>
	else if(self->running == 0)
     680:	fc 01       	movw	r30, r24
     682:	22 85       	ldd	r18, Z+10	; 0x0a
     684:	21 11       	cpse	r18, r1
     686:	11 c0       	rjmp	.+34     	; 0x6aa <change_freq+0x62>
		ASYNC(self,pulse,0);
     688:	c1 2c       	mov	r12, r1
     68a:	d1 2c       	mov	r13, r1
     68c:	0f 2e       	mov	r0, r31
     68e:	f8 e8       	ldi	r31, 0x88	; 136
     690:	ef 2e       	mov	r14, r31
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	ff 2e       	mov	r15, r31
     696:	f0 2d       	mov	r31, r0
     698:	8c 01       	movw	r16, r24
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	a9 01       	movw	r20, r18
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	cb 01       	movw	r24, r22
     6a6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
}
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	08 95       	ret

000006b8 <remove>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6b8:	db 01       	movw	r26, r22
     6ba:	ed 91       	ld	r30, X+
     6bc:	fc 91       	ld	r31, X
     6be:	a0 e0       	ldi	r26, 0x00	; 0
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <remove+0x14>
     6c4:	df 01       	movw	r26, r30
     6c6:	01 90       	ld	r0, Z+
     6c8:	f0 81       	ld	r31, Z
     6ca:	e0 2d       	mov	r30, r0
     6cc:	30 97       	sbiw	r30, 0x00	; 0
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <remove+0x1e>
     6d0:	e8 17       	cp	r30, r24
     6d2:	f9 07       	cpc	r31, r25
     6d4:	b9 f7       	brne	.-18     	; 0x6c4 <remove+0xc>
     6d6:	30 97       	sbiw	r30, 0x00	; 0
     6d8:	89 f0       	breq	.+34     	; 0x6fc <remove+0x44>
     6da:	10 97       	sbiw	r26, 0x00	; 0
     6dc:	39 f0       	breq	.+14     	; 0x6ec <remove+0x34>
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	8d 93       	st	X+, r24
     6e4:	9c 93       	st	X, r25
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	fb 01       	movw	r30, r22
     6f2:	91 83       	std	Z+1, r25	; 0x01
     6f4:	80 83       	st	Z, r24
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	08 95       	ret
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <initialize>:
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <initialize+0x6>
     708:	00 d0       	rcall	.+0      	; 0x70a <initialize+0x8>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	18 c0       	rjmp	.+48     	; 0x744 <initialize+0x42>
     714:	ac 01       	movw	r20, r24
     716:	4f 5f       	subi	r20, 0xFF	; 255
     718:	5f 4f       	sbci	r21, 0xFF	; 255
     71a:	9a 01       	movw	r18, r20
     71c:	22 95       	swap	r18
     71e:	32 95       	swap	r19
     720:	30 7f       	andi	r19, 0xF0	; 240
     722:	32 27       	eor	r19, r18
     724:	20 7f       	andi	r18, 0xF0	; 240
     726:	32 27       	eor	r19, r18
     728:	2b 5b       	subi	r18, 0xBB	; 187
     72a:	3d 4f       	sbci	r19, 0xFD	; 253
     72c:	82 95       	swap	r24
     72e:	92 95       	swap	r25
     730:	90 7f       	andi	r25, 0xF0	; 240
     732:	98 27       	eor	r25, r24
     734:	80 7f       	andi	r24, 0xF0	; 240
     736:	98 27       	eor	r25, r24
     738:	fc 01       	movw	r30, r24
     73a:	eb 5b       	subi	r30, 0xBB	; 187
     73c:	fd 4f       	sbci	r31, 0xFD	; 253
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	20 83       	st	Z, r18
     742:	ca 01       	movw	r24, r20
     744:	8e 30       	cpi	r24, 0x0E	; 14
     746:	91 05       	cpc	r25, r1
     748:	2c f3       	brlt	.-54     	; 0x714 <initialize+0x12>
     74a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <messages+0xe1>
     74e:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <messages+0xe0>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	15 c0       	rjmp	.+42     	; 0x782 <initialize+0x80>
     758:	ac 01       	movw	r20, r24
     75a:	4f 5f       	subi	r20, 0xFF	; 255
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	6d e1       	ldi	r22, 0x1D	; 29
     760:	64 9f       	mul	r22, r20
     762:	90 01       	movw	r18, r0
     764:	65 9f       	mul	r22, r21
     766:	30 0d       	add	r19, r0
     768:	11 24       	eor	r1, r1
     76a:	20 57       	subi	r18, 0x70	; 112
     76c:	3e 4f       	sbci	r19, 0xFE	; 254
     76e:	68 9f       	mul	r22, r24
     770:	f0 01       	movw	r30, r0
     772:	69 9f       	mul	r22, r25
     774:	f0 0d       	add	r31, r0
     776:	11 24       	eor	r1, r1
     778:	e0 57       	subi	r30, 0x70	; 112
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	31 83       	std	Z+1, r19	; 0x01
     77e:	20 83       	st	Z, r18
     780:	ca 01       	movw	r24, r20
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	91 05       	cpc	r25, r1
     786:	44 f3       	brlt	.-48     	; 0x758 <initialize+0x56>
     788:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <threads+0x58>
     78c:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <threads+0x57>
     790:	1a 82       	std	Y+2, r1	; 0x02
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	32 c0       	rjmp	.+100    	; 0x7fa <initialize+0xf8>
     796:	2d e1       	ldi	r18, 0x1D	; 29
     798:	49 81       	ldd	r20, Y+1	; 0x01
     79a:	5a 81       	ldd	r21, Y+2	; 0x02
     79c:	24 9f       	mul	r18, r20
     79e:	c0 01       	movw	r24, r0
     7a0:	25 9f       	mul	r18, r21
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	fc 01       	movw	r30, r24
     7a8:	ea 56       	subi	r30, 0x6A	; 106
     7aa:	fe 4f       	sbci	r31, 0xFE	; 254
     7ac:	fc 83       	std	Y+4, r31	; 0x04
     7ae:	eb 83       	std	Y+3, r30	; 0x03
     7b0:	cf 01       	movw	r24, r30
     7b2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <setjmp>
     7b6:	20 e6       	ldi	r18, 0x60	; 96
     7b8:	49 81       	ldd	r20, Y+1	; 0x01
     7ba:	5a 81       	ldd	r21, Y+2	; 0x02
     7bc:	24 9f       	mul	r18, r20
     7be:	c0 01       	movw	r24, r0
     7c0:	25 9f       	mul	r18, r21
     7c2:	90 0d       	add	r25, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	8f 56       	subi	r24, 0x6F	; 111
     7c8:	9c 4f       	sbci	r25, 0xFC	; 252
     7ca:	eb 81       	ldd	r30, Y+3	; 0x03
     7cc:	fc 81       	ldd	r31, Y+4	; 0x04
     7ce:	91 8b       	std	Z+17, r25	; 0x11
     7d0:	80 8b       	std	Z+16, r24	; 0x10
     7d2:	93 8b       	std	Z+19, r25	; 0x13
     7d4:	82 8b       	std	Z+18, r24	; 0x12
     7d6:	8d e5       	ldi	r24, 0x5D	; 93
     7d8:	9f e0       	ldi	r25, 0x0F	; 15
     7da:	96 8b       	std	Z+22, r25	; 0x16
     7dc:	85 8b       	std	Z+21, r24	; 0x15
     7de:	8d e1       	ldi	r24, 0x1D	; 29
     7e0:	84 9f       	mul	r24, r20
     7e2:	f0 01       	movw	r30, r0
     7e4:	85 9f       	mul	r24, r21
     7e6:	f0 0d       	add	r31, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	e0 57       	subi	r30, 0x70	; 112
     7ec:	fe 4f       	sbci	r31, 0xFE	; 254
     7ee:	15 82       	std	Z+5, r1	; 0x05
     7f0:	14 82       	std	Z+4, r1	; 0x04
     7f2:	4f 5f       	subi	r20, 0xFF	; 255
     7f4:	5f 4f       	sbci	r21, 0xFF	; 255
     7f6:	5a 83       	std	Y+2, r21	; 0x02
     7f8:	49 83       	std	Y+1, r20	; 0x01
     7fa:	29 81       	ldd	r18, Y+1	; 0x01
     7fc:	3a 81       	ldd	r19, Y+2	; 0x02
     7fe:	24 30       	cpi	r18, 0x04	; 4
     800:	31 05       	cpc	r19, r1
     802:	4c f2       	brlt	.-110    	; 0x796 <initialize+0x94>
     804:	e8 e2       	ldi	r30, 0x28	; 40
     806:	f2 e0       	ldi	r31, 0x02	; 2
     808:	11 82       	std	Z+1, r1	; 0x01
     80a:	10 82       	st	Z, r1
     80c:	15 82       	std	Z+5, r1	; 0x05
     80e:	14 82       	std	Z+4, r1	; 0x04
     810:	13 82       	std	Z+3, r1	; 0x03
     812:	12 82       	std	Z+2, r1	; 0x02
     814:	e1 e6       	ldi	r30, 0x61	; 97
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 e8       	ldi	r24, 0x80	; 128
     81a:	80 83       	st	Z, r24
     81c:	10 82       	st	Z, r1
     81e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     822:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     826:	84 e0       	ldi	r24, 0x04	; 4
     828:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <dispatch>:
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	00 d0       	rcall	.+0      	; 0x846 <dispatch+0x6>
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	9a 83       	std	Y+2, r25	; 0x02
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <current>
     852:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <current+0x1>
     856:	06 96       	adiw	r24, 0x06	; 6
     858:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <setjmp>
     85c:	89 2b       	or	r24, r25
     85e:	59 f4       	brne	.+22     	; 0x876 <dispatch+0x36>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <current+0x1>
     868:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <current>
     86c:	61 e0       	ldi	r22, 0x01	; 1
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	06 96       	adiw	r24, 0x06	; 6
     872:	0e 94 1c 12 	call	0x2438	; 0x2438 <longjmp>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <enqueueByDeadline>:
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	eb 01       	movw	r28, r22
     88e:	e8 81       	ld	r30, Y
     890:	f9 81       	ldd	r31, Y+1	; 0x01
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	d0 e0       	ldi	r29, 0x00	; 0
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <enqueueByDeadline+0x20>
     898:	ef 01       	movw	r28, r30
     89a:	01 90       	ld	r0, Z+
     89c:	f0 81       	ld	r31, Z
     89e:	e0 2d       	mov	r30, r0
     8a0:	30 97       	sbiw	r30, 0x00	; 0
     8a2:	79 f0       	breq	.+30     	; 0x8c2 <enqueueByDeadline+0x42>
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	20 85       	ldd	r18, Z+8	; 0x08
     8aa:	31 85       	ldd	r19, Z+9	; 0x09
     8ac:	16 96       	adiw	r26, 0x06	; 6
     8ae:	4d 91       	ld	r20, X+
     8b0:	5d 91       	ld	r21, X+
     8b2:	6d 91       	ld	r22, X+
     8b4:	7c 91       	ld	r23, X
     8b6:	19 97       	sbiw	r26, 0x09	; 9
     8b8:	40 17       	cp	r20, r16
     8ba:	51 07       	cpc	r21, r17
     8bc:	62 07       	cpc	r22, r18
     8be:	73 07       	cpc	r23, r19
     8c0:	5c f7       	brge	.-42     	; 0x898 <enqueueByDeadline+0x18>
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	fc 93       	st	X, r31
     8c6:	ee 93       	st	-X, r30
     8c8:	20 97       	sbiw	r28, 0x00	; 0
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <enqueueByDeadline+0x54>
     8cc:	fc 01       	movw	r30, r24
     8ce:	b1 83       	std	Z+1, r27	; 0x01
     8d0:	a0 83       	st	Z, r26
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <enqueueByDeadline+0x58>
     8d4:	b9 83       	std	Y+1, r27	; 0x01
     8d6:	a8 83       	st	Y, r26
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <enqueueByBaseline>:
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	eb 01       	movw	r28, r22
     8f0:	e8 81       	ld	r30, Y
     8f2:	f9 81       	ldd	r31, Y+1	; 0x01
     8f4:	c0 e0       	ldi	r28, 0x00	; 0
     8f6:	d0 e0       	ldi	r29, 0x00	; 0
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <enqueueByBaseline+0x20>
     8fa:	ef 01       	movw	r28, r30
     8fc:	01 90       	ld	r0, Z+
     8fe:	f0 81       	ld	r31, Z
     900:	e0 2d       	mov	r30, r0
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	79 f0       	breq	.+30     	; 0x924 <enqueueByBaseline+0x42>
     906:	02 81       	ldd	r16, Z+2	; 0x02
     908:	13 81       	ldd	r17, Z+3	; 0x03
     90a:	24 81       	ldd	r18, Z+4	; 0x04
     90c:	35 81       	ldd	r19, Z+5	; 0x05
     90e:	12 96       	adiw	r26, 0x02	; 2
     910:	4d 91       	ld	r20, X+
     912:	5d 91       	ld	r21, X+
     914:	6d 91       	ld	r22, X+
     916:	7c 91       	ld	r23, X
     918:	15 97       	sbiw	r26, 0x05	; 5
     91a:	40 17       	cp	r20, r16
     91c:	51 07       	cpc	r21, r17
     91e:	62 07       	cpc	r22, r18
     920:	73 07       	cpc	r23, r19
     922:	5c f7       	brge	.-42     	; 0x8fa <enqueueByBaseline+0x18>
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	fc 93       	st	X, r31
     928:	ee 93       	st	-X, r30
     92a:	20 97       	sbiw	r28, 0x00	; 0
     92c:	21 f4       	brne	.+8      	; 0x936 <enqueueByBaseline+0x54>
     92e:	fc 01       	movw	r30, r24
     930:	b1 83       	std	Z+1, r27	; 0x01
     932:	a0 83       	st	Z, r26
     934:	02 c0       	rjmp	.+4      	; 0x93a <enqueueByBaseline+0x58>
     936:	b9 83       	std	Y+1, r27	; 0x01
     938:	a8 83       	st	Y, r26
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	08 95       	ret

00000944 <dequeue>:
     944:	dc 01       	movw	r26, r24
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	11 97       	sbiw	r26, 0x01	; 1
     94c:	30 97       	sbiw	r30, 0x00	; 0
     94e:	59 f4       	brne	.+22     	; 0x966 <dequeue+0x22>
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     956:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     95a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	83 bf       	out	0x33, r24	; 51
     962:	88 95       	sleep
     964:	fc cf       	rjmp	.-8      	; 0x95e <dequeue+0x1a>
     966:	20 81       	ld	r18, Z
     968:	31 81       	ldd	r19, Z+1	; 0x01
     96a:	2d 93       	st	X+, r18
     96c:	3c 93       	st	X, r19
     96e:	cf 01       	movw	r24, r30
     970:	08 95       	ret

00000972 <insert>:
     972:	fb 01       	movw	r30, r22
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	fc 01       	movw	r30, r24
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	20 83       	st	Z, r18
     97e:	fb 01       	movw	r30, r22
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	80 83       	st	Z, r24
     984:	08 95       	ret

00000986 <push>:
     986:	fb 01       	movw	r30, r22
     988:	20 81       	ld	r18, Z
     98a:	31 81       	ldd	r19, Z+1	; 0x01
     98c:	fc 01       	movw	r30, r24
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	20 83       	st	Z, r18
     992:	fb 01       	movw	r30, r22
     994:	91 83       	std	Z+1, r25	; 0x01
     996:	80 83       	st	Z, r24
     998:	08 95       	ret

0000099a <pop>:
     99a:	dc 01       	movw	r26, r24
     99c:	ed 91       	ld	r30, X+
     99e:	fc 91       	ld	r31, X
     9a0:	11 97       	sbiw	r26, 0x01	; 1
     9a2:	20 81       	ld	r18, Z
     9a4:	31 81       	ldd	r19, Z+1	; 0x01
     9a6:	2d 93       	st	X+, r18
     9a8:	3c 93       	st	X, r19
     9aa:	cf 01       	movw	r24, r30
     9ac:	08 95       	ret

000009ae <schedule>:
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <activeStack>
     9b6:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <activeStack+0x1>
     9ba:	c2 81       	ldd	r28, Z+2	; 0x02
     9bc:	d3 81       	ldd	r29, Z+3	; 0x03
     9be:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <msgQ>
     9c2:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <msgQ+0x1>
     9c6:	30 97       	sbiw	r30, 0x00	; 0
     9c8:	19 f1       	breq	.+70     	; 0xa10 <schedule+0x62>
     9ca:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <threadPool>
     9ce:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <threadPool+0x1>
     9d2:	89 2b       	or	r24, r25
     9d4:	e9 f0       	breq	.+58     	; 0xa10 <schedule+0x62>
     9d6:	20 97       	sbiw	r28, 0x00	; 0
     9d8:	69 f0       	breq	.+26     	; 0x9f4 <schedule+0x46>
     9da:	86 81       	ldd	r24, Z+6	; 0x06
     9dc:	97 81       	ldd	r25, Z+7	; 0x07
     9de:	a0 85       	ldd	r26, Z+8	; 0x08
     9e0:	b1 85       	ldd	r27, Z+9	; 0x09
     9e2:	4e 81       	ldd	r20, Y+6	; 0x06
     9e4:	5f 81       	ldd	r21, Y+7	; 0x07
     9e6:	68 85       	ldd	r22, Y+8	; 0x08
     9e8:	79 85       	ldd	r23, Y+9	; 0x09
     9ea:	84 1b       	sub	r24, r20
     9ec:	95 0b       	sbc	r25, r21
     9ee:	a6 0b       	sbc	r26, r22
     9f0:	b7 0b       	sbc	r27, r23
     9f2:	72 f4       	brpl	.+28     	; 0xa10 <schedule+0x62>
     9f4:	81 e3       	ldi	r24, 0x31	; 49
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 cd 04 	call	0x99a	; 0x99a <pop>
     9fc:	6f e2       	ldi	r22, 0x2F	; 47
     9fe:	71 e0       	ldi	r23, 0x01	; 1
     a00:	0e 94 c3 04 	call	0x986	; 0x986 <push>
     a04:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <activeStack>
     a08:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <activeStack+0x1>
     a0c:	0e 94 20 04 	call	0x840	; 0x840 <dispatch>
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <__vector_1>:
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
     a3c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     a40:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     a44:	ac 01       	movw	r20, r24
     a46:	09 2e       	mov	r0, r25
     a48:	00 0c       	add	r0, r0
     a4a:	66 0b       	sbc	r22, r22
     a4c:	77 0b       	sbc	r23, r23
     a4e:	9a 01       	movw	r18, r20
     a50:	11 27       	eor	r17, r17
     a52:	00 27       	eor	r16, r16
     a54:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a58:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	40 2b       	or	r20, r16
     a62:	51 2b       	or	r21, r17
     a64:	62 2b       	or	r22, r18
     a66:	73 2b       	or	r23, r19
     a68:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     a6c:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     a70:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     a74:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     a78:	b0 9b       	sbis	0x16, 0	; 22
     a7a:	1a c0       	rjmp	.+52     	; 0xab0 <__vector_1+0x9a>
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	09 2e       	mov	r0, r25
     a80:	00 0c       	add	r0, r0
     a82:	aa 0b       	sbc	r26, r26
     a84:	bb 0b       	sbc	r27, r27
     a86:	bc 01       	movw	r22, r24
     a88:	55 27       	eor	r21, r21
     a8a:	44 27       	eor	r20, r20
     a8c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a90:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	84 2b       	or	r24, r20
     a9a:	95 2b       	or	r25, r21
     a9c:	a6 2b       	or	r26, r22
     a9e:	b7 2b       	or	r27, r23
     aa0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     aa4:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     aa8:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     aac:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     ab0:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable>
     ab4:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x1>
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	39 f0       	breq	.+14     	; 0xaca <__vector_1+0xb4>
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable>
     ac4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x1>
     ac8:	09 95       	icall
     aca:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_2>:
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     b1e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     b22:	ac 01       	movw	r20, r24
     b24:	09 2e       	mov	r0, r25
     b26:	00 0c       	add	r0, r0
     b28:	66 0b       	sbc	r22, r22
     b2a:	77 0b       	sbc	r23, r23
     b2c:	9a 01       	movw	r18, r20
     b2e:	11 27       	eor	r17, r17
     b30:	00 27       	eor	r16, r16
     b32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	40 2b       	or	r20, r16
     b40:	51 2b       	or	r21, r17
     b42:	62 2b       	or	r22, r18
     b44:	73 2b       	or	r23, r19
     b46:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     b4a:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     b4e:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     b52:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     b56:	b0 9b       	sbis	0x16, 0	; 22
     b58:	1a c0       	rjmp	.+52     	; 0xb8e <__vector_2+0x9a>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	09 2e       	mov	r0, r25
     b5e:	00 0c       	add	r0, r0
     b60:	aa 0b       	sbc	r26, r26
     b62:	bb 0b       	sbc	r27, r27
     b64:	bc 01       	movw	r22, r24
     b66:	55 27       	eor	r21, r21
     b68:	44 27       	eor	r20, r20
     b6a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b6e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	84 2b       	or	r24, r20
     b78:	95 2b       	or	r25, r21
     b7a:	a6 2b       	or	r26, r22
     b7c:	b7 2b       	or	r27, r23
     b7e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     b82:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     b86:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     b8a:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     b8e:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x2>
     b92:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x3>
     b96:	30 97       	sbiw	r30, 0x00	; 0
     b98:	39 f0       	breq	.+14     	; 0xba8 <__vector_2+0xb4>
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x2>
     ba2:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x3>
     ba6:	09 95       	icall
     ba8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     bac:	ff 91       	pop	r31
     bae:	ef 91       	pop	r30
     bb0:	bf 91       	pop	r27
     bb2:	af 91       	pop	r26
     bb4:	9f 91       	pop	r25
     bb6:	8f 91       	pop	r24
     bb8:	7f 91       	pop	r23
     bba:	6f 91       	pop	r22
     bbc:	5f 91       	pop	r21
     bbe:	4f 91       	pop	r20
     bc0:	3f 91       	pop	r19
     bc2:	2f 91       	pop	r18
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_3>:
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	2f 93       	push	r18
     be2:	3f 93       	push	r19
     be4:	4f 93       	push	r20
     be6:	5f 93       	push	r21
     be8:	6f 93       	push	r22
     bea:	7f 93       	push	r23
     bec:	8f 93       	push	r24
     bee:	9f 93       	push	r25
     bf0:	af 93       	push	r26
     bf2:	bf 93       	push	r27
     bf4:	ef 93       	push	r30
     bf6:	ff 93       	push	r31
     bf8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     bfc:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     c00:	ac 01       	movw	r20, r24
     c02:	09 2e       	mov	r0, r25
     c04:	00 0c       	add	r0, r0
     c06:	66 0b       	sbc	r22, r22
     c08:	77 0b       	sbc	r23, r23
     c0a:	9a 01       	movw	r18, r20
     c0c:	11 27       	eor	r17, r17
     c0e:	00 27       	eor	r16, r16
     c10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	40 2b       	or	r20, r16
     c1e:	51 2b       	or	r21, r17
     c20:	62 2b       	or	r22, r18
     c22:	73 2b       	or	r23, r19
     c24:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     c28:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     c2c:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     c30:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     c34:	b0 9b       	sbis	0x16, 0	; 22
     c36:	1a c0       	rjmp	.+52     	; 0xc6c <__vector_3+0x9a>
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	09 2e       	mov	r0, r25
     c3c:	00 0c       	add	r0, r0
     c3e:	aa 0b       	sbc	r26, r26
     c40:	bb 0b       	sbc	r27, r27
     c42:	bc 01       	movw	r22, r24
     c44:	55 27       	eor	r21, r21
     c46:	44 27       	eor	r20, r20
     c48:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c4c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	84 2b       	or	r24, r20
     c56:	95 2b       	or	r25, r21
     c58:	a6 2b       	or	r26, r22
     c5a:	b7 2b       	or	r27, r23
     c5c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     c60:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     c64:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     c68:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     c6c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x4>
     c70:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x5>
     c74:	30 97       	sbiw	r30, 0x00	; 0
     c76:	39 f0       	breq	.+14     	; 0xc86 <__vector_3+0xb4>
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x4>
     c80:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x5>
     c84:	09 95       	icall
     c86:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	0f 90       	pop	r0
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	0f 90       	pop	r0
     cac:	1f 90       	pop	r1
     cae:	18 95       	reti

00000cb0 <__vector_4>:
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     cda:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     cde:	ac 01       	movw	r20, r24
     ce0:	09 2e       	mov	r0, r25
     ce2:	00 0c       	add	r0, r0
     ce4:	66 0b       	sbc	r22, r22
     ce6:	77 0b       	sbc	r23, r23
     ce8:	9a 01       	movw	r18, r20
     cea:	11 27       	eor	r17, r17
     cec:	00 27       	eor	r16, r16
     cee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	40 2b       	or	r20, r16
     cfc:	51 2b       	or	r21, r17
     cfe:	62 2b       	or	r22, r18
     d00:	73 2b       	or	r23, r19
     d02:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     d06:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     d0a:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     d0e:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     d12:	b0 9b       	sbis	0x16, 0	; 22
     d14:	1a c0       	rjmp	.+52     	; 0xd4a <__vector_4+0x9a>
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	09 2e       	mov	r0, r25
     d1a:	00 0c       	add	r0, r0
     d1c:	aa 0b       	sbc	r26, r26
     d1e:	bb 0b       	sbc	r27, r27
     d20:	bc 01       	movw	r22, r24
     d22:	55 27       	eor	r21, r21
     d24:	44 27       	eor	r20, r20
     d26:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d2a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	84 2b       	or	r24, r20
     d34:	95 2b       	or	r25, r21
     d36:	a6 2b       	or	r26, r22
     d38:	b7 2b       	or	r27, r23
     d3a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     d3e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     d42:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     d46:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     d4a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x6>
     d4e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x7>
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	39 f0       	breq	.+14     	; 0xd64 <__vector_4+0xb4>
     d56:	63 e0       	ldi	r22, 0x03	; 3
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x6>
     d5e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x7>
     d62:	09 95       	icall
     d64:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     d68:	ff 91       	pop	r31
     d6a:	ef 91       	pop	r30
     d6c:	bf 91       	pop	r27
     d6e:	af 91       	pop	r26
     d70:	9f 91       	pop	r25
     d72:	8f 91       	pop	r24
     d74:	7f 91       	pop	r23
     d76:	6f 91       	pop	r22
     d78:	5f 91       	pop	r21
     d7a:	4f 91       	pop	r20
     d7c:	3f 91       	pop	r19
     d7e:	2f 91       	pop	r18
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_5>:
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
     db4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     db8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     dbc:	ac 01       	movw	r20, r24
     dbe:	09 2e       	mov	r0, r25
     dc0:	00 0c       	add	r0, r0
     dc2:	66 0b       	sbc	r22, r22
     dc4:	77 0b       	sbc	r23, r23
     dc6:	9a 01       	movw	r18, r20
     dc8:	11 27       	eor	r17, r17
     dca:	00 27       	eor	r16, r16
     dcc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	40 2b       	or	r20, r16
     dda:	51 2b       	or	r21, r17
     ddc:	62 2b       	or	r22, r18
     dde:	73 2b       	or	r23, r19
     de0:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     de4:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     de8:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     dec:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     df0:	b0 9b       	sbis	0x16, 0	; 22
     df2:	1a c0       	rjmp	.+52     	; 0xe28 <__vector_5+0x9a>
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	09 2e       	mov	r0, r25
     df8:	00 0c       	add	r0, r0
     dfa:	aa 0b       	sbc	r26, r26
     dfc:	bb 0b       	sbc	r27, r27
     dfe:	bc 01       	movw	r22, r24
     e00:	55 27       	eor	r21, r21
     e02:	44 27       	eor	r20, r20
     e04:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e08:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e0c:	a0 e0       	ldi	r26, 0x00	; 0
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	84 2b       	or	r24, r20
     e12:	95 2b       	or	r25, r21
     e14:	a6 2b       	or	r26, r22
     e16:	b7 2b       	or	r27, r23
     e18:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     e1c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     e20:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     e24:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     e28:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <mtable+0x8>
     e2c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <mtable+0x9>
     e30:	30 97       	sbiw	r30, 0x00	; 0
     e32:	39 f0       	breq	.+14     	; 0xe42 <__vector_5+0xb4>
     e34:	64 e0       	ldi	r22, 0x04	; 4
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <otable+0x8>
     e3c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <otable+0x9>
     e40:	09 95       	icall
     e42:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_10>:
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	0f 93       	push	r16
     e78:	1f 93       	push	r17
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
     e92:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     e96:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     e9a:	ac 01       	movw	r20, r24
     e9c:	09 2e       	mov	r0, r25
     e9e:	00 0c       	add	r0, r0
     ea0:	66 0b       	sbc	r22, r22
     ea2:	77 0b       	sbc	r23, r23
     ea4:	9a 01       	movw	r18, r20
     ea6:	11 27       	eor	r17, r17
     ea8:	00 27       	eor	r16, r16
     eaa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	40 2b       	or	r20, r16
     eb8:	51 2b       	or	r21, r17
     eba:	62 2b       	or	r22, r18
     ebc:	73 2b       	or	r23, r19
     ebe:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     ec2:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     ec6:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     eca:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     ece:	b0 9b       	sbis	0x16, 0	; 22
     ed0:	1a c0       	rjmp	.+52     	; 0xf06 <__vector_10+0x9a>
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	09 2e       	mov	r0, r25
     ed6:	00 0c       	add	r0, r0
     ed8:	aa 0b       	sbc	r26, r26
     eda:	bb 0b       	sbc	r27, r27
     edc:	bc 01       	movw	r22, r24
     ede:	55 27       	eor	r21, r21
     ee0:	44 27       	eor	r20, r20
     ee2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ee6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eea:	a0 e0       	ldi	r26, 0x00	; 0
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	84 2b       	or	r24, r20
     ef0:	95 2b       	or	r25, r21
     ef2:	a6 2b       	or	r26, r22
     ef4:	b7 2b       	or	r27, r23
     ef6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     efa:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     efe:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     f02:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     f06:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <mtable+0xa>
     f0a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <mtable+0xb>
     f0e:	30 97       	sbiw	r30, 0x00	; 0
     f10:	39 f0       	breq	.+14     	; 0xf20 <__vector_10+0xb4>
     f12:	65 e0       	ldi	r22, 0x05	; 5
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <otable+0xa>
     f1a:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <otable+0xb>
     f1e:	09 95       	icall
     f20:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
     f24:	ff 91       	pop	r31
     f26:	ef 91       	pop	r30
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_11>:
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
     f74:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
     f78:	ac 01       	movw	r20, r24
     f7a:	09 2e       	mov	r0, r25
     f7c:	00 0c       	add	r0, r0
     f7e:	66 0b       	sbc	r22, r22
     f80:	77 0b       	sbc	r23, r23
     f82:	9a 01       	movw	r18, r20
     f84:	11 27       	eor	r17, r17
     f86:	00 27       	eor	r16, r16
     f88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	40 2b       	or	r20, r16
     f96:	51 2b       	or	r21, r17
     f98:	62 2b       	or	r22, r18
     f9a:	73 2b       	or	r23, r19
     f9c:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
     fa0:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
     fa4:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
     fa8:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
     fac:	b0 9b       	sbis	0x16, 0	; 22
     fae:	1a c0       	rjmp	.+52     	; 0xfe4 <__vector_11+0x9a>
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	09 2e       	mov	r0, r25
     fb4:	00 0c       	add	r0, r0
     fb6:	aa 0b       	sbc	r26, r26
     fb8:	bb 0b       	sbc	r27, r27
     fba:	bc 01       	movw	r22, r24
     fbc:	55 27       	eor	r21, r21
     fbe:	44 27       	eor	r20, r20
     fc0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc8:	a0 e0       	ldi	r26, 0x00	; 0
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	84 2b       	or	r24, r20
     fce:	95 2b       	or	r25, r21
     fd0:	a6 2b       	or	r26, r22
     fd2:	b7 2b       	or	r27, r23
     fd4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
     fd8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
     fdc:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
     fe0:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
     fe4:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <mtable+0xc>
     fe8:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <mtable+0xd>
     fec:	30 97       	sbiw	r30, 0x00	; 0
     fee:	39 f0       	breq	.+14     	; 0xffe <__vector_11+0xb4>
     ff0:	66 e0       	ldi	r22, 0x06	; 6
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <otable+0xc>
     ff8:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <otable+0xd>
     ffc:	09 95       	icall
     ffe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1002:	ff 91       	pop	r31
    1004:	ef 91       	pop	r30
    1006:	bf 91       	pop	r27
    1008:	af 91       	pop	r26
    100a:	9f 91       	pop	r25
    100c:	8f 91       	pop	r24
    100e:	7f 91       	pop	r23
    1010:	6f 91       	pop	r22
    1012:	5f 91       	pop	r21
    1014:	4f 91       	pop	r20
    1016:	3f 91       	pop	r19
    1018:	2f 91       	pop	r18
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	0f 90       	pop	r0
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	0f 90       	pop	r0
    1024:	1f 90       	pop	r1
    1026:	18 95       	reti

00001028 <__vector_12>:
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
    104e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1052:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1056:	ac 01       	movw	r20, r24
    1058:	09 2e       	mov	r0, r25
    105a:	00 0c       	add	r0, r0
    105c:	66 0b       	sbc	r22, r22
    105e:	77 0b       	sbc	r23, r23
    1060:	9a 01       	movw	r18, r20
    1062:	11 27       	eor	r17, r17
    1064:	00 27       	eor	r16, r16
    1066:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    106a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	40 2b       	or	r20, r16
    1074:	51 2b       	or	r21, r17
    1076:	62 2b       	or	r22, r18
    1078:	73 2b       	or	r23, r19
    107a:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    107e:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    1082:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1086:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    108a:	b0 9b       	sbis	0x16, 0	; 22
    108c:	1a c0       	rjmp	.+52     	; 0x10c2 <__vector_12+0x9a>
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	09 2e       	mov	r0, r25
    1092:	00 0c       	add	r0, r0
    1094:	aa 0b       	sbc	r26, r26
    1096:	bb 0b       	sbc	r27, r27
    1098:	bc 01       	movw	r22, r24
    109a:	55 27       	eor	r21, r21
    109c:	44 27       	eor	r20, r20
    109e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	84 2b       	or	r24, r20
    10ac:	95 2b       	or	r25, r21
    10ae:	a6 2b       	or	r26, r22
    10b0:	b7 2b       	or	r27, r23
    10b2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    10b6:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    10ba:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    10be:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    10c2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <mtable+0xe>
    10c6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <mtable+0xf>
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	39 f0       	breq	.+14     	; 0x10dc <__vector_12+0xb4>
    10ce:	67 e0       	ldi	r22, 0x07	; 7
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <otable+0xe>
    10d6:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <otable+0xf>
    10da:	09 95       	icall
    10dc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <__vector_13>:
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1130:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1134:	ac 01       	movw	r20, r24
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	66 0b       	sbc	r22, r22
    113c:	77 0b       	sbc	r23, r23
    113e:	9a 01       	movw	r18, r20
    1140:	11 27       	eor	r17, r17
    1142:	00 27       	eor	r16, r16
    1144:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1148:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	40 2b       	or	r20, r16
    1152:	51 2b       	or	r21, r17
    1154:	62 2b       	or	r22, r18
    1156:	73 2b       	or	r23, r19
    1158:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    115c:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    1160:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1164:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1168:	b0 9b       	sbis	0x16, 0	; 22
    116a:	1a c0       	rjmp	.+52     	; 0x11a0 <__vector_13+0x9a>
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	09 2e       	mov	r0, r25
    1170:	00 0c       	add	r0, r0
    1172:	aa 0b       	sbc	r26, r26
    1174:	bb 0b       	sbc	r27, r27
    1176:	bc 01       	movw	r22, r24
    1178:	55 27       	eor	r21, r21
    117a:	44 27       	eor	r20, r20
    117c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1180:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1184:	a0 e0       	ldi	r26, 0x00	; 0
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	84 2b       	or	r24, r20
    118a:	95 2b       	or	r25, r21
    118c:	a6 2b       	or	r26, r22
    118e:	b7 2b       	or	r27, r23
    1190:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    1194:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1198:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    119c:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    11a0:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <mtable+0x10>
    11a4:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <mtable+0x11>
    11a8:	30 97       	sbiw	r30, 0x00	; 0
    11aa:	39 f0       	breq	.+14     	; 0x11ba <__vector_13+0xb4>
    11ac:	68 e0       	ldi	r22, 0x08	; 8
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <otable+0x10>
    11b4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <otable+0x11>
    11b8:	09 95       	icall
    11ba:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_14>:
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
    120a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    120e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1212:	ac 01       	movw	r20, r24
    1214:	09 2e       	mov	r0, r25
    1216:	00 0c       	add	r0, r0
    1218:	66 0b       	sbc	r22, r22
    121a:	77 0b       	sbc	r23, r23
    121c:	9a 01       	movw	r18, r20
    121e:	11 27       	eor	r17, r17
    1220:	00 27       	eor	r16, r16
    1222:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1226:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	40 2b       	or	r20, r16
    1230:	51 2b       	or	r21, r17
    1232:	62 2b       	or	r22, r18
    1234:	73 2b       	or	r23, r19
    1236:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    123a:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    123e:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1242:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1246:	b0 9b       	sbis	0x16, 0	; 22
    1248:	1a c0       	rjmp	.+52     	; 0x127e <__vector_14+0x9a>
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	09 2e       	mov	r0, r25
    124e:	00 0c       	add	r0, r0
    1250:	aa 0b       	sbc	r26, r26
    1252:	bb 0b       	sbc	r27, r27
    1254:	bc 01       	movw	r22, r24
    1256:	55 27       	eor	r21, r21
    1258:	44 27       	eor	r20, r20
    125a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    125e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	84 2b       	or	r24, r20
    1268:	95 2b       	or	r25, r21
    126a:	a6 2b       	or	r26, r22
    126c:	b7 2b       	or	r27, r23
    126e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    1272:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1276:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    127a:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    127e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <mtable+0x12>
    1282:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <mtable+0x13>
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	39 f0       	breq	.+14     	; 0x1298 <__vector_14+0xb4>
    128a:	69 e0       	ldi	r22, 0x09	; 9
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <otable+0x12>
    1292:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <otable+0x13>
    1296:	09 95       	icall
    1298:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    129c:	ff 91       	pop	r31
    129e:	ef 91       	pop	r30
    12a0:	bf 91       	pop	r27
    12a2:	af 91       	pop	r26
    12a4:	9f 91       	pop	r25
    12a6:	8f 91       	pop	r24
    12a8:	7f 91       	pop	r23
    12aa:	6f 91       	pop	r22
    12ac:	5f 91       	pop	r21
    12ae:	4f 91       	pop	r20
    12b0:	3f 91       	pop	r19
    12b2:	2f 91       	pop	r18
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_15>:
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	2f 93       	push	r18
    12d2:	3f 93       	push	r19
    12d4:	4f 93       	push	r20
    12d6:	5f 93       	push	r21
    12d8:	6f 93       	push	r22
    12da:	7f 93       	push	r23
    12dc:	8f 93       	push	r24
    12de:	9f 93       	push	r25
    12e0:	af 93       	push	r26
    12e2:	bf 93       	push	r27
    12e4:	ef 93       	push	r30
    12e6:	ff 93       	push	r31
    12e8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    12ec:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    12f0:	ac 01       	movw	r20, r24
    12f2:	09 2e       	mov	r0, r25
    12f4:	00 0c       	add	r0, r0
    12f6:	66 0b       	sbc	r22, r22
    12f8:	77 0b       	sbc	r23, r23
    12fa:	9a 01       	movw	r18, r20
    12fc:	11 27       	eor	r17, r17
    12fe:	00 27       	eor	r16, r16
    1300:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1304:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	40 2b       	or	r20, r16
    130e:	51 2b       	or	r21, r17
    1310:	62 2b       	or	r22, r18
    1312:	73 2b       	or	r23, r19
    1314:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    1318:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    131c:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1320:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1324:	b0 9b       	sbis	0x16, 0	; 22
    1326:	1a c0       	rjmp	.+52     	; 0x135c <__vector_15+0x9a>
    1328:	01 96       	adiw	r24, 0x01	; 1
    132a:	09 2e       	mov	r0, r25
    132c:	00 0c       	add	r0, r0
    132e:	aa 0b       	sbc	r26, r26
    1330:	bb 0b       	sbc	r27, r27
    1332:	bc 01       	movw	r22, r24
    1334:	55 27       	eor	r21, r21
    1336:	44 27       	eor	r20, r20
    1338:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    133c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1340:	a0 e0       	ldi	r26, 0x00	; 0
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	84 2b       	or	r24, r20
    1346:	95 2b       	or	r25, r21
    1348:	a6 2b       	or	r26, r22
    134a:	b7 2b       	or	r27, r23
    134c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    1350:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1354:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    1358:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    135c:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <mtable+0x14>
    1360:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <mtable+0x15>
    1364:	30 97       	sbiw	r30, 0x00	; 0
    1366:	39 f0       	breq	.+14     	; 0x1376 <__vector_15+0xb4>
    1368:	6a e0       	ldi	r22, 0x0A	; 10
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <otable+0x14>
    1370:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <otable+0x15>
    1374:	09 95       	icall
    1376:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    137a:	ff 91       	pop	r31
    137c:	ef 91       	pop	r30
    137e:	bf 91       	pop	r27
    1380:	af 91       	pop	r26
    1382:	9f 91       	pop	r25
    1384:	8f 91       	pop	r24
    1386:	7f 91       	pop	r23
    1388:	6f 91       	pop	r22
    138a:	5f 91       	pop	r21
    138c:	4f 91       	pop	r20
    138e:	3f 91       	pop	r19
    1390:	2f 91       	pop	r18
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <__vector_16>:
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    13ca:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    13ce:	ac 01       	movw	r20, r24
    13d0:	09 2e       	mov	r0, r25
    13d2:	00 0c       	add	r0, r0
    13d4:	66 0b       	sbc	r22, r22
    13d6:	77 0b       	sbc	r23, r23
    13d8:	9a 01       	movw	r18, r20
    13da:	11 27       	eor	r17, r17
    13dc:	00 27       	eor	r16, r16
    13de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	40 2b       	or	r20, r16
    13ec:	51 2b       	or	r21, r17
    13ee:	62 2b       	or	r22, r18
    13f0:	73 2b       	or	r23, r19
    13f2:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    13f6:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    13fa:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    13fe:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1402:	b0 9b       	sbis	0x16, 0	; 22
    1404:	1a c0       	rjmp	.+52     	; 0x143a <__vector_16+0x9a>
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	09 2e       	mov	r0, r25
    140a:	00 0c       	add	r0, r0
    140c:	aa 0b       	sbc	r26, r26
    140e:	bb 0b       	sbc	r27, r27
    1410:	bc 01       	movw	r22, r24
    1412:	55 27       	eor	r21, r21
    1414:	44 27       	eor	r20, r20
    1416:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    141a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    141e:	a0 e0       	ldi	r26, 0x00	; 0
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	84 2b       	or	r24, r20
    1424:	95 2b       	or	r25, r21
    1426:	a6 2b       	or	r26, r22
    1428:	b7 2b       	or	r27, r23
    142a:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    142e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1432:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    1436:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    143a:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <mtable+0x16>
    143e:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <mtable+0x17>
    1442:	30 97       	sbiw	r30, 0x00	; 0
    1444:	39 f0       	breq	.+14     	; 0x1454 <__vector_16+0xb4>
    1446:	6b e0       	ldi	r22, 0x0B	; 11
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <otable+0x16>
    144e:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <otable+0x17>
    1452:	09 95       	icall
    1454:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__vector_17>:
    147e:	1f 92       	push	r1
    1480:	0f 92       	push	r0
    1482:	0f b6       	in	r0, 0x3f	; 63
    1484:	0f 92       	push	r0
    1486:	11 24       	eor	r1, r1
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	2f 93       	push	r18
    148e:	3f 93       	push	r19
    1490:	4f 93       	push	r20
    1492:	5f 93       	push	r21
    1494:	6f 93       	push	r22
    1496:	7f 93       	push	r23
    1498:	8f 93       	push	r24
    149a:	9f 93       	push	r25
    149c:	af 93       	push	r26
    149e:	bf 93       	push	r27
    14a0:	ef 93       	push	r30
    14a2:	ff 93       	push	r31
    14a4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    14a8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    14ac:	ac 01       	movw	r20, r24
    14ae:	09 2e       	mov	r0, r25
    14b0:	00 0c       	add	r0, r0
    14b2:	66 0b       	sbc	r22, r22
    14b4:	77 0b       	sbc	r23, r23
    14b6:	9a 01       	movw	r18, r20
    14b8:	11 27       	eor	r17, r17
    14ba:	00 27       	eor	r16, r16
    14bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	40 2b       	or	r20, r16
    14ca:	51 2b       	or	r21, r17
    14cc:	62 2b       	or	r22, r18
    14ce:	73 2b       	or	r23, r19
    14d0:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    14d4:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    14d8:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    14dc:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    14e0:	b0 9b       	sbis	0x16, 0	; 22
    14e2:	1a c0       	rjmp	.+52     	; 0x1518 <__vector_17+0x9a>
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	09 2e       	mov	r0, r25
    14e8:	00 0c       	add	r0, r0
    14ea:	aa 0b       	sbc	r26, r26
    14ec:	bb 0b       	sbc	r27, r27
    14ee:	bc 01       	movw	r22, r24
    14f0:	55 27       	eor	r21, r21
    14f2:	44 27       	eor	r20, r20
    14f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	84 2b       	or	r24, r20
    1502:	95 2b       	or	r25, r21
    1504:	a6 2b       	or	r26, r22
    1506:	b7 2b       	or	r27, r23
    1508:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    150c:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1510:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    1514:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    1518:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <mtable+0x18>
    151c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <mtable+0x19>
    1520:	30 97       	sbiw	r30, 0x00	; 0
    1522:	39 f0       	breq	.+14     	; 0x1532 <__vector_17+0xb4>
    1524:	6c e0       	ldi	r22, 0x0C	; 12
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <otable+0x18>
    152c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <otable+0x19>
    1530:	09 95       	icall
    1532:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1536:	ff 91       	pop	r31
    1538:	ef 91       	pop	r30
    153a:	bf 91       	pop	r27
    153c:	af 91       	pop	r26
    153e:	9f 91       	pop	r25
    1540:	8f 91       	pop	r24
    1542:	7f 91       	pop	r23
    1544:	6f 91       	pop	r22
    1546:	5f 91       	pop	r21
    1548:	4f 91       	pop	r20
    154a:	3f 91       	pop	r19
    154c:	2f 91       	pop	r18
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_18>:
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1586:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    158a:	ac 01       	movw	r20, r24
    158c:	09 2e       	mov	r0, r25
    158e:	00 0c       	add	r0, r0
    1590:	66 0b       	sbc	r22, r22
    1592:	77 0b       	sbc	r23, r23
    1594:	9a 01       	movw	r18, r20
    1596:	11 27       	eor	r17, r17
    1598:	00 27       	eor	r16, r16
    159a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    159e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	40 2b       	or	r20, r16
    15a8:	51 2b       	or	r21, r17
    15aa:	62 2b       	or	r22, r18
    15ac:	73 2b       	or	r23, r19
    15ae:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    15b2:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    15b6:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    15ba:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    15be:	b0 9b       	sbis	0x16, 0	; 22
    15c0:	1a c0       	rjmp	.+52     	; 0x15f6 <__vector_18+0x9a>
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	09 2e       	mov	r0, r25
    15c6:	00 0c       	add	r0, r0
    15c8:	aa 0b       	sbc	r26, r26
    15ca:	bb 0b       	sbc	r27, r27
    15cc:	bc 01       	movw	r22, r24
    15ce:	55 27       	eor	r21, r21
    15d0:	44 27       	eor	r20, r20
    15d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	84 2b       	or	r24, r20
    15e0:	95 2b       	or	r25, r21
    15e2:	a6 2b       	or	r26, r22
    15e4:	b7 2b       	or	r27, r23
    15e6:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    15ea:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    15ee:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    15f2:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    15f6:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <mtable+0x1a>
    15fa:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <mtable+0x1b>
    15fe:	30 97       	sbiw	r30, 0x00	; 0
    1600:	39 f0       	breq	.+14     	; 0x1610 <__vector_18+0xb4>
    1602:	6d e0       	ldi	r22, 0x0D	; 13
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <otable+0x1a>
    160a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <otable+0x1b>
    160e:	09 95       	icall
    1610:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_19>:
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1664:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1668:	ac 01       	movw	r20, r24
    166a:	09 2e       	mov	r0, r25
    166c:	00 0c       	add	r0, r0
    166e:	66 0b       	sbc	r22, r22
    1670:	77 0b       	sbc	r23, r23
    1672:	9a 01       	movw	r18, r20
    1674:	11 27       	eor	r17, r17
    1676:	00 27       	eor	r16, r16
    1678:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    167c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	40 2b       	or	r20, r16
    1686:	51 2b       	or	r21, r17
    1688:	62 2b       	or	r22, r18
    168a:	73 2b       	or	r23, r19
    168c:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    1690:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    1694:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1698:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    169c:	b0 9b       	sbis	0x16, 0	; 22
    169e:	1a c0       	rjmp	.+52     	; 0x16d4 <__vector_19+0x9a>
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	09 2e       	mov	r0, r25
    16a4:	00 0c       	add	r0, r0
    16a6:	aa 0b       	sbc	r26, r26
    16a8:	bb 0b       	sbc	r27, r27
    16aa:	bc 01       	movw	r22, r24
    16ac:	55 27       	eor	r21, r21
    16ae:	44 27       	eor	r20, r20
    16b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	84 2b       	or	r24, r20
    16be:	95 2b       	or	r25, r21
    16c0:	a6 2b       	or	r26, r22
    16c2:	b7 2b       	or	r27, r23
    16c4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    16c8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    16cc:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    16d0:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    16d4:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <mtable+0x1c>
    16d8:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <mtable+0x1d>
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	39 f0       	breq	.+14     	; 0x16ee <__vector_19+0xb4>
    16e0:	6e e0       	ldi	r22, 0x0E	; 14
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <otable+0x1c>
    16e8:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <otable+0x1d>
    16ec:	09 95       	icall
    16ee:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_20>:
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
    173e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1742:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1746:	ac 01       	movw	r20, r24
    1748:	09 2e       	mov	r0, r25
    174a:	00 0c       	add	r0, r0
    174c:	66 0b       	sbc	r22, r22
    174e:	77 0b       	sbc	r23, r23
    1750:	9a 01       	movw	r18, r20
    1752:	11 27       	eor	r17, r17
    1754:	00 27       	eor	r16, r16
    1756:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	40 2b       	or	r20, r16
    1764:	51 2b       	or	r21, r17
    1766:	62 2b       	or	r22, r18
    1768:	73 2b       	or	r23, r19
    176a:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    176e:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    1772:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1776:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    177a:	b0 9b       	sbis	0x16, 0	; 22
    177c:	1a c0       	rjmp	.+52     	; 0x17b2 <__vector_20+0x9a>
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	09 2e       	mov	r0, r25
    1782:	00 0c       	add	r0, r0
    1784:	aa 0b       	sbc	r26, r26
    1786:	bb 0b       	sbc	r27, r27
    1788:	bc 01       	movw	r22, r24
    178a:	55 27       	eor	r21, r21
    178c:	44 27       	eor	r20, r20
    178e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1792:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1796:	a0 e0       	ldi	r26, 0x00	; 0
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	84 2b       	or	r24, r20
    179c:	95 2b       	or	r25, r21
    179e:	a6 2b       	or	r26, r22
    17a0:	b7 2b       	or	r27, r23
    17a2:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    17a6:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    17aa:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    17ae:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    17b2:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <mtable+0x1e>
    17b6:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <mtable+0x1f>
    17ba:	30 97       	sbiw	r30, 0x00	; 0
    17bc:	39 f0       	breq	.+14     	; 0x17cc <__vector_20+0xb4>
    17be:	6f e0       	ldi	r22, 0x0F	; 15
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <otable+0x1e>
    17c6:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <otable+0x1f>
    17ca:	09 95       	icall
    17cc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    17d0:	ff 91       	pop	r31
    17d2:	ef 91       	pop	r30
    17d4:	bf 91       	pop	r27
    17d6:	af 91       	pop	r26
    17d8:	9f 91       	pop	r25
    17da:	8f 91       	pop	r24
    17dc:	7f 91       	pop	r23
    17de:	6f 91       	pop	r22
    17e0:	5f 91       	pop	r21
    17e2:	4f 91       	pop	r20
    17e4:	3f 91       	pop	r19
    17e6:	2f 91       	pop	r18
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	0f 90       	pop	r0
    17f2:	1f 90       	pop	r1
    17f4:	18 95       	reti

000017f6 <__vector_21>:
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	2f 93       	push	r18
    1806:	3f 93       	push	r19
    1808:	4f 93       	push	r20
    180a:	5f 93       	push	r21
    180c:	6f 93       	push	r22
    180e:	7f 93       	push	r23
    1810:	8f 93       	push	r24
    1812:	9f 93       	push	r25
    1814:	af 93       	push	r26
    1816:	bf 93       	push	r27
    1818:	ef 93       	push	r30
    181a:	ff 93       	push	r31
    181c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1820:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1824:	ac 01       	movw	r20, r24
    1826:	09 2e       	mov	r0, r25
    1828:	00 0c       	add	r0, r0
    182a:	66 0b       	sbc	r22, r22
    182c:	77 0b       	sbc	r23, r23
    182e:	9a 01       	movw	r18, r20
    1830:	11 27       	eor	r17, r17
    1832:	00 27       	eor	r16, r16
    1834:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1838:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	40 2b       	or	r20, r16
    1842:	51 2b       	or	r21, r17
    1844:	62 2b       	or	r22, r18
    1846:	73 2b       	or	r23, r19
    1848:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    184c:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    1850:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1854:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1858:	b0 9b       	sbis	0x16, 0	; 22
    185a:	1a c0       	rjmp	.+52     	; 0x1890 <__vector_21+0x9a>
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	09 2e       	mov	r0, r25
    1860:	00 0c       	add	r0, r0
    1862:	aa 0b       	sbc	r26, r26
    1864:	bb 0b       	sbc	r27, r27
    1866:	bc 01       	movw	r22, r24
    1868:	55 27       	eor	r21, r21
    186a:	44 27       	eor	r20, r20
    186c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1870:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	84 2b       	or	r24, r20
    187a:	95 2b       	or	r25, r21
    187c:	a6 2b       	or	r26, r22
    187e:	b7 2b       	or	r27, r23
    1880:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    1884:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1888:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    188c:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    1890:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <mtable+0x20>
    1894:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <mtable+0x21>
    1898:	30 97       	sbiw	r30, 0x00	; 0
    189a:	39 f0       	breq	.+14     	; 0x18aa <__vector_21+0xb4>
    189c:	60 e1       	ldi	r22, 0x10	; 16
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <otable+0x20>
    18a4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <otable+0x21>
    18a8:	09 95       	icall
    18aa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	bf 91       	pop	r27
    18b4:	af 91       	pop	r26
    18b6:	9f 91       	pop	r25
    18b8:	8f 91       	pop	r24
    18ba:	7f 91       	pop	r23
    18bc:	6f 91       	pop	r22
    18be:	5f 91       	pop	r21
    18c0:	4f 91       	pop	r20
    18c2:	3f 91       	pop	r19
    18c4:	2f 91       	pop	r18
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	0f 90       	pop	r0
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	0f 90       	pop	r0
    18d0:	1f 90       	pop	r1
    18d2:	18 95       	reti

000018d4 <__vector_22>:
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	6f 93       	push	r22
    18ec:	7f 93       	push	r23
    18ee:	8f 93       	push	r24
    18f0:	9f 93       	push	r25
    18f2:	af 93       	push	r26
    18f4:	bf 93       	push	r27
    18f6:	ef 93       	push	r30
    18f8:	ff 93       	push	r31
    18fa:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    18fe:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1902:	ac 01       	movw	r20, r24
    1904:	09 2e       	mov	r0, r25
    1906:	00 0c       	add	r0, r0
    1908:	66 0b       	sbc	r22, r22
    190a:	77 0b       	sbc	r23, r23
    190c:	9a 01       	movw	r18, r20
    190e:	11 27       	eor	r17, r17
    1910:	00 27       	eor	r16, r16
    1912:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1916:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	40 2b       	or	r20, r16
    1920:	51 2b       	or	r21, r17
    1922:	62 2b       	or	r22, r18
    1924:	73 2b       	or	r23, r19
    1926:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <timestamp>
    192a:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <timestamp+0x1>
    192e:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <timestamp+0x2>
    1932:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <timestamp+0x3>
    1936:	b0 9b       	sbis	0x16, 0	; 22
    1938:	1a c0       	rjmp	.+52     	; 0x196e <__vector_22+0x9a>
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	09 2e       	mov	r0, r25
    193e:	00 0c       	add	r0, r0
    1940:	aa 0b       	sbc	r26, r26
    1942:	bb 0b       	sbc	r27, r27
    1944:	bc 01       	movw	r22, r24
    1946:	55 27       	eor	r21, r21
    1948:	44 27       	eor	r20, r20
    194a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    194e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	84 2b       	or	r24, r20
    1958:	95 2b       	or	r25, r21
    195a:	a6 2b       	or	r26, r22
    195c:	b7 2b       	or	r27, r23
    195e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <timestamp>
    1962:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <timestamp+0x1>
    1966:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <timestamp+0x2>
    196a:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <timestamp+0x3>
    196e:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <mtable+0x22>
    1972:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <mtable+0x23>
    1976:	30 97       	sbiw	r30, 0x00	; 0
    1978:	39 f0       	breq	.+14     	; 0x1988 <__vector_22+0xb4>
    197a:	61 e1       	ldi	r22, 0x11	; 17
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <otable+0x22>
    1982:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <otable+0x23>
    1986:	09 95       	icall
    1988:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <idle>:
    19b2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    19b6:	78 94       	sei
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	83 bf       	out	0x33, r24	; 51
    19bc:	88 95       	sleep
    19be:	fc cf       	rjmp	.-8      	; 0x19b8 <idle+0x6>

000019c0 <__vector_9>:
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
    19de:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    19e2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    19e6:	01 96       	adiw	r24, 0x01	; 1
    19e8:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <overflows+0x1>
    19ec:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <overflows>
    19f0:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <timerQ>
    19f4:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <timerQ+0x1>
    19f8:	30 97       	sbiw	r30, 0x00	; 0
    19fa:	01 f1       	breq	.+64     	; 0x1a3c <__vector_9+0x7c>
    19fc:	42 81       	ldd	r20, Z+2	; 0x02
    19fe:	53 81       	ldd	r21, Z+3	; 0x03
    1a00:	64 81       	ldd	r22, Z+4	; 0x04
    1a02:	75 81       	ldd	r23, Z+5	; 0x05
    1a04:	86 17       	cp	r24, r22
    1a06:	97 07       	cpc	r25, r23
    1a08:	c9 f4       	brne	.+50     	; 0x1a3c <__vector_9+0x7c>
    1a0a:	ca 01       	movw	r24, r20
    1a0c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a10:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a14:	42 1b       	sub	r20, r18
    1a16:	53 0b       	sbc	r21, r19
    1a18:	41 30       	cpi	r20, 0x01	; 1
    1a1a:	51 05       	cpc	r21, r1
    1a1c:	29 f4       	brne	.+10     	; 0x1a28 <__vector_9+0x68>
    1a1e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a22:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a26:	01 96       	adiw	r24, 0x01	; 1
    1a28:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a2c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a30:	ef e6       	ldi	r30, 0x6F	; 111
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	80 83       	st	Z, r24
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <__vector_9+0x86>
    1a3c:	ef e6       	ldi	r30, 0x6F	; 111
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8d 7f       	andi	r24, 0xFD	; 253
    1a44:	80 83       	st	Z, r24
    1a46:	ff 91       	pop	r31
    1a48:	ef 91       	pop	r30
    1a4a:	9f 91       	pop	r25
    1a4c:	8f 91       	pop	r24
    1a4e:	7f 91       	pop	r23
    1a50:	6f 91       	pop	r22
    1a52:	5f 91       	pop	r21
    1a54:	4f 91       	pop	r20
    1a56:	3f 91       	pop	r19
    1a58:	2f 91       	pop	r18
    1a5a:	0f 90       	pop	r0
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	0f 90       	pop	r0
    1a60:	1f 90       	pop	r1
    1a62:	18 95       	reti

00001a64 <__vector_7>:
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	2f 93       	push	r18
    1a78:	3f 93       	push	r19
    1a7a:	4f 93       	push	r20
    1a7c:	5f 93       	push	r21
    1a7e:	6f 93       	push	r22
    1a80:	7f 93       	push	r23
    1a82:	8f 93       	push	r24
    1a84:	9f 93       	push	r25
    1a86:	af 93       	push	r26
    1a88:	bf 93       	push	r27
    1a8a:	ef 93       	push	r30
    1a8c:	ff 93       	push	r31
    1a8e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <overflows>
    1a92:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <overflows+0x1>
    1a96:	6c 01       	movw	r12, r24
    1a98:	09 2e       	mov	r0, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	ee 08       	sbc	r14, r14
    1a9e:	ff 08       	sbc	r15, r15
    1aa0:	76 01       	movw	r14, r12
    1aa2:	dd 24       	eor	r13, r13
    1aa4:	cc 24       	eor	r12, r12
    1aa6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aaa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	c4 2a       	or	r12, r20
    1ab4:	d5 2a       	or	r13, r21
    1ab6:	e6 2a       	or	r14, r22
    1ab8:	f7 2a       	or	r15, r23
    1aba:	b0 9b       	sbis	0x16, 0	; 22
    1abc:	1e c0       	rjmp	.+60     	; 0x1afa <__vector_7+0x96>
    1abe:	6c 01       	movw	r12, r24
    1ac0:	2f ef       	ldi	r18, 0xFF	; 255
    1ac2:	c2 1a       	sub	r12, r18
    1ac4:	d2 0a       	sbc	r13, r18
    1ac6:	0d 2c       	mov	r0, r13
    1ac8:	00 0c       	add	r0, r0
    1aca:	ee 08       	sbc	r14, r14
    1acc:	ff 08       	sbc	r15, r15
    1ace:	d6 01       	movw	r26, r12
    1ad0:	99 27       	eor	r25, r25
    1ad2:	88 27       	eor	r24, r24
    1ad4:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ad8:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1adc:	e1 2c       	mov	r14, r1
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	c8 2a       	or	r12, r24
    1ae2:	d9 2a       	or	r13, r25
    1ae4:	ea 2a       	or	r14, r26
    1ae6:	fb 2a       	or	r15, r27
    1ae8:	08 c0       	rjmp	.+16     	; 0x1afa <__vector_7+0x96>
    1aea:	88 e6       	ldi	r24, 0x68	; 104
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	0e 94 a2 04 	call	0x944	; 0x944 <dequeue>
    1af2:	6a e6       	ldi	r22, 0x6A	; 106
    1af4:	71 e0       	ldi	r23, 0x01	; 1
    1af6:	0e 94 40 04 	call	0x880	; 0x880 <enqueueByDeadline>
    1afa:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <timerQ>
    1afe:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <timerQ+0x1>
    1b02:	30 97       	sbiw	r30, 0x00	; 0
    1b04:	69 f0       	breq	.+26     	; 0x1b20 <__vector_7+0xbc>
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	a4 81       	ldd	r26, Z+4	; 0x04
    1b0c:	b5 81       	ldd	r27, Z+5	; 0x05
    1b0e:	8c 19       	sub	r24, r12
    1b10:	9d 09       	sbc	r25, r13
    1b12:	ae 09       	sbc	r26, r14
    1b14:	bf 09       	sbc	r27, r15
    1b16:	18 16       	cp	r1, r24
    1b18:	19 06       	cpc	r1, r25
    1b1a:	1a 06       	cpc	r1, r26
    1b1c:	1b 06       	cpc	r1, r27
    1b1e:	2c f7       	brge	.-54     	; 0x1aea <__vector_7+0x86>
    1b20:	30 97       	sbiw	r30, 0x00	; 0
    1b22:	21 f1       	breq	.+72     	; 0x1b6c <__vector_7+0x108>
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	a4 81       	ldd	r26, Z+4	; 0x04
    1b2a:	b5 81       	ldd	r27, Z+5	; 0x05
    1b2c:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <overflows>
    1b30:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <overflows+0x1>
    1b34:	2a 17       	cp	r18, r26
    1b36:	3b 07       	cpc	r19, r27
    1b38:	c9 f4       	brne	.+50     	; 0x1b6c <__vector_7+0x108>
    1b3a:	9c 01       	movw	r18, r24
    1b3c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b40:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b44:	84 1b       	sub	r24, r20
    1b46:	95 0b       	sbc	r25, r21
    1b48:	01 97       	sbiw	r24, 0x01	; 1
    1b4a:	31 f4       	brne	.+12     	; 0x1b58 <__vector_7+0xf4>
    1b4c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b50:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b54:	2f 5f       	subi	r18, 0xFF	; 255
    1b56:	3f 4f       	sbci	r19, 0xFF	; 255
    1b58:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b5c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b60:	ef e6       	ldi	r30, 0x6F	; 111
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	82 60       	ori	r24, 0x02	; 2
    1b68:	80 83       	st	Z, r24
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <__vector_7+0x112>
    1b6c:	ef e6       	ldi	r30, 0x6F	; 111
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	80 83       	st	Z, r24
    1b76:	0e 94 d7 04 	call	0x9ae	; 0x9ae <schedule>
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <async>:
    1ba4:	3f 92       	push	r3
    1ba6:	4f 92       	push	r4
    1ba8:	5f 92       	push	r5
    1baa:	6f 92       	push	r6
    1bac:	7f 92       	push	r7
    1bae:	8f 92       	push	r8
    1bb0:	9f 92       	push	r9
    1bb2:	af 92       	push	r10
    1bb4:	bf 92       	push	r11
    1bb6:	cf 92       	push	r12
    1bb8:	df 92       	push	r13
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	2b 01       	movw	r4, r22
    1bc8:	3c 01       	movw	r6, r24
    1bca:	49 01       	movw	r8, r18
    1bcc:	5a 01       	movw	r10, r20
    1bce:	8f b7       	in	r24, 0x3f	; 63
    1bd0:	80 78       	andi	r24, 0x80	; 128
    1bd2:	38 2e       	mov	r3, r24
    1bd4:	f8 94       	cli
    1bd6:	83 e3       	ldi	r24, 0x33	; 51
    1bd8:	91 e0       	ldi	r25, 0x01	; 1
    1bda:	0e 94 a2 04 	call	0x944	; 0x944 <dequeue>
    1bde:	ec 01       	movw	r28, r24
    1be0:	1b 87       	std	Y+11, r17	; 0x0b
    1be2:	0a 87       	std	Y+10, r16	; 0x0a
    1be4:	fd 86       	std	Y+13, r15	; 0x0d
    1be6:	ec 86       	std	Y+12, r14	; 0x0c
    1be8:	df 86       	std	Y+15, r13	; 0x0f
    1bea:	ce 86       	std	Y+14, r12	; 0x0e
    1bec:	33 20       	and	r3, r3
    1bee:	61 f0       	breq	.+24     	; 0x1c08 <async+0x64>
    1bf0:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <current>
    1bf4:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <current+0x1>
    1bf8:	02 80       	ldd	r0, Z+2	; 0x02
    1bfa:	f3 81       	ldd	r31, Z+3	; 0x03
    1bfc:	e0 2d       	mov	r30, r0
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	a4 81       	ldd	r26, Z+4	; 0x04
    1c04:	b5 81       	ldd	r27, Z+5	; 0x05
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <async+0x74>
    1c08:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <timestamp>
    1c0c:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <timestamp+0x1>
    1c10:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <timestamp+0x2>
    1c14:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <timestamp+0x3>
    1c18:	48 0e       	add	r4, r24
    1c1a:	59 1e       	adc	r5, r25
    1c1c:	6a 1e       	adc	r6, r26
    1c1e:	7b 1e       	adc	r7, r27
    1c20:	4a 82       	std	Y+2, r4	; 0x02
    1c22:	5b 82       	std	Y+3, r5	; 0x03
    1c24:	6c 82       	std	Y+4, r6	; 0x04
    1c26:	7d 82       	std	Y+5, r7	; 0x05
    1c28:	18 14       	cp	r1, r8
    1c2a:	19 04       	cpc	r1, r9
    1c2c:	1a 04       	cpc	r1, r10
    1c2e:	1b 04       	cpc	r1, r11
    1c30:	44 f0       	brlt	.+16     	; 0x1c42 <async+0x9e>
    1c32:	0f 2e       	mov	r0, r31
    1c34:	88 24       	eor	r8, r8
    1c36:	8a 94       	dec	r8
    1c38:	98 2c       	mov	r9, r8
    1c3a:	a8 2c       	mov	r10, r8
    1c3c:	ff e7       	ldi	r31, 0x7F	; 127
    1c3e:	bf 2e       	mov	r11, r31
    1c40:	f0 2d       	mov	r31, r0
    1c42:	84 0c       	add	r8, r4
    1c44:	95 1c       	adc	r9, r5
    1c46:	a6 1c       	adc	r10, r6
    1c48:	b7 1c       	adc	r11, r7
    1c4a:	8e 82       	std	Y+6, r8	; 0x06
    1c4c:	9f 82       	std	Y+7, r9	; 0x07
    1c4e:	a8 86       	std	Y+8, r10	; 0x08
    1c50:	b9 86       	std	Y+9, r11	; 0x09
    1c52:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <overflows>
    1c56:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <overflows+0x1>
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	03 2e       	mov	r0, r19
    1c5e:	00 0c       	add	r0, r0
    1c60:	aa 0b       	sbc	r26, r26
    1c62:	bb 0b       	sbc	r27, r27
    1c64:	dc 01       	movw	r26, r24
    1c66:	99 27       	eor	r25, r25
    1c68:	88 27       	eor	r24, r24
    1c6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	84 2b       	or	r24, r20
    1c78:	95 2b       	or	r25, r21
    1c7a:	a6 2b       	or	r26, r22
    1c7c:	b7 2b       	or	r27, r23
    1c7e:	b0 9b       	sbis	0x16, 0	; 22
    1c80:	13 c0       	rjmp	.+38     	; 0x1ca8 <async+0x104>
    1c82:	c9 01       	movw	r24, r18
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	09 2e       	mov	r0, r25
    1c88:	00 0c       	add	r0, r0
    1c8a:	aa 0b       	sbc	r26, r26
    1c8c:	bb 0b       	sbc	r27, r27
    1c8e:	dc 01       	movw	r26, r24
    1c90:	99 27       	eor	r25, r25
    1c92:	88 27       	eor	r24, r24
    1c94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	84 2b       	or	r24, r20
    1ca2:	95 2b       	or	r25, r21
    1ca4:	a6 2b       	or	r26, r22
    1ca6:	b7 2b       	or	r27, r23
    1ca8:	48 1a       	sub	r4, r24
    1caa:	59 0a       	sbc	r5, r25
    1cac:	6a 0a       	sbc	r6, r26
    1cae:	7b 0a       	sbc	r7, r27
    1cb0:	14 14       	cp	r1, r4
    1cb2:	15 04       	cpc	r1, r5
    1cb4:	16 04       	cpc	r1, r6
    1cb6:	17 04       	cpc	r1, r7
    1cb8:	ac f5       	brge	.+106    	; 0x1d24 <async+0x180>
    1cba:	68 e6       	ldi	r22, 0x68	; 104
    1cbc:	71 e0       	ldi	r23, 0x01	; 1
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <enqueueByBaseline>
    1cc4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <timerQ>
    1cc8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <timerQ+0x1>
    1ccc:	30 97       	sbiw	r30, 0x00	; 0
    1cce:	21 f1       	breq	.+72     	; 0x1d18 <async+0x174>
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	a4 81       	ldd	r26, Z+4	; 0x04
    1cd6:	b5 81       	ldd	r27, Z+5	; 0x05
    1cd8:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <overflows>
    1cdc:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <overflows+0x1>
    1ce0:	2a 17       	cp	r18, r26
    1ce2:	3b 07       	cpc	r19, r27
    1ce4:	c9 f4       	brne	.+50     	; 0x1d18 <async+0x174>
    1ce6:	9c 01       	movw	r18, r24
    1ce8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cf0:	84 1b       	sub	r24, r20
    1cf2:	95 0b       	sbc	r25, r21
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	31 f4       	brne	.+12     	; 0x1d04 <async+0x160>
    1cf8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cfc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d00:	2f 5f       	subi	r18, 0xFF	; 255
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d08:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d0c:	ef e6       	ldi	r30, 0x6F	; 111
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	82 60       	ori	r24, 0x02	; 2
    1d14:	80 83       	st	Z, r24
    1d16:	39 c0       	rjmp	.+114    	; 0x1d8a <async+0x1e6>
    1d18:	ef e6       	ldi	r30, 0x6F	; 111
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8d 7f       	andi	r24, 0xFD	; 253
    1d20:	80 83       	st	Z, r24
    1d22:	33 c0       	rjmp	.+102    	; 0x1d8a <async+0x1e6>
    1d24:	6a e6       	ldi	r22, 0x6A	; 106
    1d26:	71 e0       	ldi	r23, 0x01	; 1
    1d28:	ce 01       	movw	r24, r28
    1d2a:	0e 94 40 04 	call	0x880	; 0x880 <enqueueByDeadline>
    1d2e:	33 20       	and	r3, r3
    1d30:	61 f1       	breq	.+88     	; 0x1d8a <async+0x1e6>
    1d32:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <threadPool>
    1d36:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <threadPool+0x1>
    1d3a:	89 2b       	or	r24, r25
    1d3c:	31 f1       	breq	.+76     	; 0x1d8a <async+0x1e6>
    1d3e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <msgQ>
    1d42:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <msgQ+0x1>
    1d46:	86 81       	ldd	r24, Z+6	; 0x06
    1d48:	97 81       	ldd	r25, Z+7	; 0x07
    1d4a:	a0 85       	ldd	r26, Z+8	; 0x08
    1d4c:	b1 85       	ldd	r27, Z+9	; 0x09
    1d4e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <activeStack>
    1d52:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <activeStack+0x1>
    1d56:	02 80       	ldd	r0, Z+2	; 0x02
    1d58:	f3 81       	ldd	r31, Z+3	; 0x03
    1d5a:	e0 2d       	mov	r30, r0
    1d5c:	46 81       	ldd	r20, Z+6	; 0x06
    1d5e:	57 81       	ldd	r21, Z+7	; 0x07
    1d60:	60 85       	ldd	r22, Z+8	; 0x08
    1d62:	71 85       	ldd	r23, Z+9	; 0x09
    1d64:	84 1b       	sub	r24, r20
    1d66:	95 0b       	sbc	r25, r21
    1d68:	a6 0b       	sbc	r26, r22
    1d6a:	b7 0b       	sbc	r27, r23
    1d6c:	72 f4       	brpl	.+28     	; 0x1d8a <async+0x1e6>
    1d6e:	81 e3       	ldi	r24, 0x31	; 49
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	0e 94 cd 04 	call	0x99a	; 0x99a <pop>
    1d76:	6f e2       	ldi	r22, 0x2F	; 47
    1d78:	71 e0       	ldi	r23, 0x01	; 1
    1d7a:	0e 94 c3 04 	call	0x986	; 0x986 <push>
    1d7e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <activeStack>
    1d82:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <activeStack+0x1>
    1d86:	0e 94 20 04 	call	0x840	; 0x840 <dispatch>
    1d8a:	33 20       	and	r3, r3
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <async+0x1ec>
    1d8e:	78 94       	sei
    1d90:	ce 01       	movw	r24, r28
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	cf 90       	pop	r12
    1da2:	bf 90       	pop	r11
    1da4:	af 90       	pop	r10
    1da6:	9f 90       	pop	r9
    1da8:	8f 90       	pop	r8
    1daa:	7f 90       	pop	r7
    1dac:	6f 90       	pop	r6
    1dae:	5f 90       	pop	r5
    1db0:	4f 90       	pop	r4
    1db2:	3f 90       	pop	r3
    1db4:	08 95       	ret

00001db6 <sync>:
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	7b 01       	movw	r14, r22
    1dca:	6a 01       	movw	r12, r20
    1dcc:	1f b7       	in	r17, 0x3f	; 63
    1dce:	10 78       	andi	r17, 0x80	; 128
    1dd0:	f8 94       	cli
    1dd2:	a8 81       	ld	r26, Y
    1dd4:	b9 81       	ldd	r27, Y+1	; 0x01
    1dd6:	10 97       	sbiw	r26, 0x00	; 0
    1dd8:	19 f4       	brne	.+6      	; 0x1de0 <sync+0x2a>
    1dda:	35 c0       	rjmp	.+106    	; 0x1e46 <sync+0x90>
    1ddc:	a0 81       	ld	r26, Z
    1dde:	b1 81       	ldd	r27, Z+1	; 0x01
    1de0:	14 96       	adiw	r26, 0x04	; 4
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	15 97       	sbiw	r26, 0x05	; 5
    1de8:	30 97       	sbiw	r30, 0x00	; 0
    1dea:	c1 f7       	brne	.-16     	; 0x1ddc <sync+0x26>
    1dec:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <current>
    1df0:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <current+0x1>
    1df4:	a2 17       	cp	r26, r18
    1df6:	b3 07       	cpc	r27, r19
    1df8:	11 f0       	breq	.+4      	; 0x1dfe <sync+0x48>
    1dfa:	11 11       	cpse	r17, r1
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <sync+0x56>
    1dfe:	11 23       	and	r17, r17
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <sync+0x4e>
    1e02:	4a c0       	rjmp	.+148    	; 0x1e98 <sync+0xe2>
    1e04:	78 94       	sei
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	9f ef       	ldi	r25, 0xFF	; 255
    1e0a:	4e c0       	rjmp	.+156    	; 0x1ea8 <sync+0xf2>
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	19 f0       	breq	.+6      	; 0x1e1a <sync+0x64>
    1e14:	fc 01       	movw	r30, r24
    1e16:	15 82       	std	Z+5, r1	; 0x05
    1e18:	14 82       	std	Z+4, r1	; 0x04
    1e1a:	3b 83       	std	Y+3, r19	; 0x03
    1e1c:	2a 83       	std	Y+2, r18	; 0x02
    1e1e:	f9 01       	movw	r30, r18
    1e20:	d5 83       	std	Z+5, r29	; 0x05
    1e22:	c4 83       	std	Z+4, r28	; 0x04
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 20 04 	call	0x840	; 0x840 <dispatch>
    1e2a:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <current>
    1e2e:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <current+0x1>
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	89 2b       	or	r24, r25
    1e38:	31 f4       	brne	.+12     	; 0x1e46 <sync+0x90>
    1e3a:	11 23       	and	r17, r17
    1e3c:	81 f1       	breq	.+96     	; 0x1e9e <sync+0xe8>
    1e3e:	78 94       	sei
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	31 c0       	rjmp	.+98     	; 0x1ea8 <sync+0xf2>
    1e46:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <current>
    1e4a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <current+0x1>
    1e4e:	99 83       	std	Y+1, r25	; 0x01
    1e50:	88 83       	st	Y, r24
    1e52:	11 23       	and	r17, r17
    1e54:	29 f0       	breq	.+10     	; 0x1e60 <sync+0xaa>
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <sync+0xaa>
    1e5e:	78 94       	sei
    1e60:	b6 01       	movw	r22, r12
    1e62:	ce 01       	movw	r24, r28
    1e64:	f7 01       	movw	r30, r14
    1e66:	09 95       	icall
    1e68:	f8 2e       	mov	r15, r24
    1e6a:	09 2f       	mov	r16, r25
    1e6c:	8f b7       	in	r24, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	19 82       	std	Y+1, r1	; 0x01
    1e72:	18 82       	st	Y, r1
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	38 f0       	brcs	.+14     	; 0x1e8c <sync+0xd6>
    1e7e:	1b 82       	std	Y+3, r1	; 0x03
    1e80:	1a 82       	std	Y+2, r1	; 0x02
    1e82:	fc 01       	movw	r30, r24
    1e84:	15 82       	std	Z+5, r1	; 0x05
    1e86:	14 82       	std	Z+4, r1	; 0x04
    1e88:	0e 94 20 04 	call	0x840	; 0x840 <dispatch>
    1e8c:	11 23       	and	r17, r17
    1e8e:	51 f0       	breq	.+20     	; 0x1ea4 <sync+0xee>
    1e90:	78 94       	sei
    1e92:	8f 2d       	mov	r24, r15
    1e94:	90 2f       	mov	r25, r16
    1e96:	08 c0       	rjmp	.+16     	; 0x1ea8 <sync+0xf2>
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	05 c0       	rjmp	.+10     	; 0x1ea8 <sync+0xf2>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <sync+0xf2>
    1ea4:	8f 2d       	mov	r24, r15
    1ea6:	90 2f       	mov	r25, r16
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	08 95       	ret

00001eba <run>:
    1eba:	00 91 2d 01 	lds	r16, 0x012D	; 0x80012d <current>
    1ebe:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <current+0x1>
    1ec2:	8a e6       	ldi	r24, 0x6A	; 106
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	0e 94 a2 04 	call	0x944	; 0x944 <dequeue>
    1eca:	ec 01       	movw	r28, r24
    1ecc:	f8 01       	movw	r30, r16
    1ece:	93 83       	std	Z+3, r25	; 0x03
    1ed0:	82 83       	std	Z+2, r24	; 0x02
    1ed2:	78 94       	sei
    1ed4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ed6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ed8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eda:	5f 85       	ldd	r21, Y+15	; 0x0f
    1edc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ede:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ee0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <sync>
    1ee4:	8f b7       	in	r24, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	63 e3       	ldi	r22, 0x33	; 51
    1eea:	71 e0       	ldi	r23, 0x01	; 1
    1eec:	ce 01       	movw	r24, r28
    1eee:	0e 94 b9 04 	call	0x972	; 0x972 <insert>
    1ef2:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <activeStack>
    1ef6:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <activeStack+0x1>
    1efa:	01 90       	ld	r0, Z+
    1efc:	f0 81       	ld	r31, Z
    1efe:	e0 2d       	mov	r30, r0
    1f00:	c2 81       	ldd	r28, Z+2	; 0x02
    1f02:	d3 81       	ldd	r29, Z+3	; 0x03
    1f04:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <msgQ>
    1f08:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <msgQ+0x1>
    1f0c:	30 97       	sbiw	r30, 0x00	; 0
    1f0e:	a1 f0       	breq	.+40     	; 0x1f38 <run+0x7e>
    1f10:	20 97       	sbiw	r28, 0x00	; 0
    1f12:	99 f2       	breq	.-90     	; 0x1eba <run>
    1f14:	86 81       	ldd	r24, Z+6	; 0x06
    1f16:	97 81       	ldd	r25, Z+7	; 0x07
    1f18:	a0 85       	ldd	r26, Z+8	; 0x08
    1f1a:	b1 85       	ldd	r27, Z+9	; 0x09
    1f1c:	4e 81       	ldd	r20, Y+6	; 0x06
    1f1e:	5f 81       	ldd	r21, Y+7	; 0x07
    1f20:	68 85       	ldd	r22, Y+8	; 0x08
    1f22:	79 85       	ldd	r23, Y+9	; 0x09
    1f24:	84 1b       	sub	r24, r20
    1f26:	95 0b       	sbc	r25, r21
    1f28:	a6 0b       	sbc	r26, r22
    1f2a:	b7 0b       	sbc	r27, r23
    1f2c:	18 16       	cp	r1, r24
    1f2e:	19 06       	cpc	r1, r25
    1f30:	1a 06       	cpc	r1, r26
    1f32:	1b 06       	cpc	r1, r27
    1f34:	0c f0       	brlt	.+2      	; 0x1f38 <run+0x7e>
    1f36:	c1 cf       	rjmp	.-126    	; 0x1eba <run>
    1f38:	8f e2       	ldi	r24, 0x2F	; 47
    1f3a:	91 e0       	ldi	r25, 0x01	; 1
    1f3c:	0e 94 cd 04 	call	0x99a	; 0x99a <pop>
    1f40:	61 e3       	ldi	r22, 0x31	; 49
    1f42:	71 e0       	ldi	r23, 0x01	; 1
    1f44:	0e 94 c3 04 	call	0x986	; 0x986 <push>
    1f48:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <activeStack>
    1f4c:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <activeStack+0x1>
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <run+0x9c>
    1f52:	a0 81       	ld	r26, Z
    1f54:	b1 81       	ldd	r27, Z+1	; 0x01
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	15 97       	sbiw	r26, 0x05	; 5
    1f5e:	30 97       	sbiw	r30, 0x00	; 0
    1f60:	c1 f7       	brne	.-16     	; 0x1f52 <run+0x98>
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 20 04 	call	0x840	; 0x840 <dispatch>
    1f68:	a8 cf       	rjmp	.-176    	; 0x1eba <run>

00001f6a <ABORT>:
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
    1f72:	1f b7       	in	r17, 0x3f	; 63
    1f74:	10 78       	andi	r17, 0x80	; 128
    1f76:	f8 94       	cli
    1f78:	68 e6       	ldi	r22, 0x68	; 104
    1f7a:	71 e0       	ldi	r23, 0x01	; 1
    1f7c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <remove>
    1f80:	89 2b       	or	r24, r25
    1f82:	39 f4       	brne	.+14     	; 0x1f92 <ABORT+0x28>
    1f84:	6a e6       	ldi	r22, 0x6A	; 106
    1f86:	71 e0       	ldi	r23, 0x01	; 1
    1f88:	ce 01       	movw	r24, r28
    1f8a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <remove>
    1f8e:	89 2b       	or	r24, r25
    1f90:	31 f0       	breq	.+12     	; 0x1f9e <ABORT+0x34>
    1f92:	63 e3       	ldi	r22, 0x33	; 51
    1f94:	71 e0       	ldi	r23, 0x01	; 1
    1f96:	ce 01       	movw	r24, r28
    1f98:	0e 94 b9 04 	call	0x972	; 0x972 <insert>
    1f9c:	25 c0       	rjmp	.+74     	; 0x1fe8 <ABORT+0x7e>
    1f9e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <activeStack>
    1fa2:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <activeStack+0x1>
    1fa6:	1e c0       	rjmp	.+60     	; 0x1fe4 <ABORT+0x7a>
    1fa8:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <current>
    1fac:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <current+0x1>
    1fb0:	e8 17       	cp	r30, r24
    1fb2:	f9 07       	cpc	r31, r25
    1fb4:	a1 f0       	breq	.+40     	; 0x1fde <ABORT+0x74>
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	c8 17       	cp	r28, r24
    1fbc:	d9 07       	cpc	r29, r25
    1fbe:	79 f4       	brne	.+30     	; 0x1fde <ABORT+0x74>
    1fc0:	24 81       	ldd	r18, Z+4	; 0x04
    1fc2:	35 81       	ldd	r19, Z+5	; 0x05
    1fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	41 f4       	brne	.+16     	; 0x1fde <ABORT+0x74>
    1fce:	13 82       	std	Z+3, r1	; 0x03
    1fd0:	12 82       	std	Z+2, r1	; 0x02
    1fd2:	63 e3       	ldi	r22, 0x33	; 51
    1fd4:	71 e0       	ldi	r23, 0x01	; 1
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 b9 04 	call	0x972	; 0x972 <insert>
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <ABORT+0x7e>
    1fde:	01 90       	ld	r0, Z+
    1fe0:	f0 81       	ld	r31, Z
    1fe2:	e0 2d       	mov	r30, r0
    1fe4:	30 97       	sbiw	r30, 0x00	; 0
    1fe6:	01 f7       	brne	.-64     	; 0x1fa8 <ABORT+0x3e>
    1fe8:	11 23       	and	r17, r17
    1fea:	09 f0       	breq	.+2      	; 0x1fee <ABORT+0x84>
    1fec:	78 94       	sei
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	08 95       	ret

00001ff6 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1ff6:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1ff8:	42 31       	cpi	r20, 0x12	; 18
    1ffa:	b8 f4       	brcc	.+46     	; 0x202a <install+0x34>
        char status;
        DISABLE(status);
    1ffc:	9f b7       	in	r25, 0x3f	; 63
    1ffe:	90 78       	andi	r25, 0x80	; 128
    2000:	f8 94       	cli
        otable[i] = obj;
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	44 0f       	add	r20, r20
    2006:	55 1f       	adc	r21, r21
    2008:	da 01       	movw	r26, r20
    200a:	a4 59       	subi	r26, 0x94	; 148
    200c:	be 4f       	sbci	r27, 0xFE	; 254
    200e:	ed 93       	st	X+, r30
    2010:	fc 93       	st	X, r31
        mtable[i] = m;
    2012:	da 01       	movw	r26, r20
    2014:	ac 5f       	subi	r26, 0xFC	; 252
    2016:	bd 4f       	sbci	r27, 0xFD	; 253
    2018:	6d 93       	st	X+, r22
    201a:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    201c:	21 e0       	ldi	r18, 0x01	; 1
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	33 83       	std	Z+3, r19	; 0x03
    2022:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2024:	99 23       	and	r25, r25
    2026:	09 f0       	breq	.+2      	; 0x202a <install+0x34>
    2028:	78 94       	sei
    202a:	08 95       	ret

0000202c <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    202c:	8c 01       	movw	r16, r24
    202e:	7b 01       	movw	r14, r22
    2030:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2032:	8f b7       	in	r24, 0x3f	; 63
    2034:	f8 94       	cli
    initialize();
    2036:	0e 94 81 03 	call	0x702	; 0x702 <initialize>
    ENABLE(1);
    203a:	78 94       	sei
    if (m != NULL)
    203c:	e1 14       	cp	r14, r1
    203e:	f1 04       	cpc	r15, r1
    2040:	41 f0       	breq	.+16     	; 0x2052 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	a9 01       	movw	r20, r18
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	cb 01       	movw	r24, r22
    204e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
    DISABLE(status);
    2052:	8f b7       	in	r24, 0x3f	; 63
    2054:	f8 94       	cli
    idle();
    2056:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <idle>

0000205a <update_display>:
		self->stored_freq[self->current_pulsegen] = current->freq;
		ASYNC(current,change_freq,0);
	}
	ASYNC(self,update_display,0);
}
void update_display(app_object * self, int arg){
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	8c 01       	movw	r16, r24
	// Just to make it a bit prettier
	for(int i = 0; i < self->number_of_pulsegens; i++)
    2064:	c0 e0       	ldi	r28, 0x00	; 0
    2066:	d0 e0       	ldi	r29, 0x00	; 0
    2068:	15 c0       	rjmp	.+42     	; 0x2094 <update_display+0x3a>
		print_at((self->pulse_gens+i)->freq,4*i,2);
    206a:	d8 01       	movw	r26, r16
    206c:	14 96       	adiw	r26, 0x04	; 4
    206e:	ed 91       	ld	r30, X+
    2070:	fc 91       	ld	r31, X
    2072:	15 97       	sbiw	r26, 0x05	; 5
    2074:	2b e0       	ldi	r18, 0x0B	; 11
    2076:	2c 9f       	mul	r18, r28
    2078:	c0 01       	movw	r24, r0
    207a:	2d 9f       	mul	r18, r29
    207c:	90 0d       	add	r25, r0
    207e:	11 24       	eor	r1, r1
    2080:	e8 0f       	add	r30, r24
    2082:	f9 1f       	adc	r31, r25
    2084:	6c 2f       	mov	r22, r28
    2086:	66 0f       	add	r22, r22
    2088:	66 0f       	add	r22, r22
    208a:	42 e0       	ldi	r20, 0x02	; 2
    208c:	84 81       	ldd	r24, Z+4	; 0x04
    208e:	0e 94 28 02 	call	0x450	; 0x450 <print_at>
	}
	ASYNC(self,update_display,0);
}
void update_display(app_object * self, int arg){
	// Just to make it a bit prettier
	for(int i = 0; i < self->number_of_pulsegens; i++)
    2092:	21 96       	adiw	r28, 0x01	; 1
    2094:	f8 01       	movw	r30, r16
    2096:	87 81       	ldd	r24, Z+7	; 0x07
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	c8 17       	cp	r28, r24
    209c:	d9 07       	cpc	r29, r25
    209e:	2c f3       	brlt	.-54     	; 0x206a <update_display+0x10>
		print_at((self->pulse_gens+i)->freq,4*i,2);
	if(self->current_pulsegen == 0)
    20a0:	86 81       	ldd	r24, Z+6	; 0x06
    20a2:	81 11       	cpse	r24, r1
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <update_display+0x5a>
		LCDDR0 = LCDDR0^(1<<2);
    20a6:	ec ee       	ldi	r30, 0xEC	; 236
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	90 81       	ld	r25, Z
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	89 27       	eor	r24, r25
    20b0:	80 83       	st	Z, r24
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <update_display+0x66>
	else{
		LCDDR2 = LCDDR2^(1<<2);
    20b4:	ee ee       	ldi	r30, 0xEE	; 238
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	90 81       	ld	r25, Z
    20ba:	84 e0       	ldi	r24, 0x04	; 4
    20bc:	89 27       	eor	r24, r25
    20be:	80 83       	st	Z, r24
	}
}
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <change_pulse_gen>:
 *
 * Created: 2022-02-22 16:35:29
 *  Author: ivarj
 */ 
#include "../include/app.h"
void change_pulse_gen(app_object * self,uint8_t new_index){
    20ca:	cf 92       	push	r12
    20cc:	df 92       	push	r13
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
	// sets new pulse gen
	self->current_pulsegen = new_index;
    20d6:	fc 01       	movw	r30, r24
    20d8:	66 83       	std	Z+6, r22	; 0x06
	ASYNC(self,update_display,0);
    20da:	c1 2c       	mov	r12, r1
    20dc:	d1 2c       	mov	r13, r1
    20de:	0f 2e       	mov	r0, r31
    20e0:	fd e2       	ldi	r31, 0x2D	; 45
    20e2:	ef 2e       	mov	r14, r31
    20e4:	f0 e1       	ldi	r31, 0x10	; 16
    20e6:	ff 2e       	mov	r15, r31
    20e8:	f0 2d       	mov	r31, r0
    20ea:	8c 01       	movw	r16, r24
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	a9 01       	movw	r20, r18
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	cb 01       	movw	r24, r22
    20f8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
}
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	08 95       	ret

0000210a <itterate_freq>:
void itterate_freq(app_object * self,int8_t increment){
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
	// Get current pulse gen
	pulse_gen * current = self->pulse_gens+\
    211c:	0c 81       	ldd	r16, Y+4	; 0x04
    211e:	1d 81       	ldd	r17, Y+5	; 0x05
						  self->current_pulsegen;
    2120:	8e 81       	ldd	r24, Y+6	; 0x06
	self->current_pulsegen = new_index;
	ASYNC(self,update_display,0);
}
void itterate_freq(app_object * self,int8_t increment){
	// Get current pulse gen
	pulse_gen * current = self->pulse_gens+\
    2122:	9b e0       	ldi	r25, 0x0B	; 11
    2124:	89 9f       	mul	r24, r25
    2126:	00 0d       	add	r16, r0
    2128:	11 1d       	adc	r17, r1
    212a:	11 24       	eor	r1, r1
						  self->current_pulsegen;
	uint8_t new_freq = (current->freq+increment);
    212c:	f8 01       	movw	r30, r16
    212e:	84 81       	ldd	r24, Z+4	; 0x04
    2130:	68 0f       	add	r22, r24
	// just keep the lowest 2 digits
	new_freq%=100;
    2132:	89 e2       	ldi	r24, 0x29	; 41
    2134:	68 9f       	mul	r22, r24
    2136:	c1 2c       	mov	r12, r1
    2138:	11 24       	eor	r1, r1
    213a:	c6 94       	lsr	r12
    213c:	c6 94       	lsr	r12
    213e:	c6 94       	lsr	r12
    2140:	c6 94       	lsr	r12
    2142:	f4 e6       	ldi	r31, 0x64	; 100
    2144:	cf 9e       	mul	r12, r31
    2146:	60 19       	sub	r22, r0
    2148:	11 24       	eor	r1, r1
	// Message current pulse gen that there is a new freq
	ASYNC(current,change_freq,new_freq);
    214a:	c6 2e       	mov	r12, r22
    214c:	d1 2c       	mov	r13, r1
    214e:	0f 2e       	mov	r0, r31
    2150:	f4 e2       	ldi	r31, 0x24	; 36
    2152:	ef 2e       	mov	r14, r31
    2154:	f3 e0       	ldi	r31, 0x03	; 3
    2156:	ff 2e       	mov	r15, r31
    2158:	f0 2d       	mov	r31, r0
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	cb 01       	movw	r24, r22
    2166:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
	ASYNC(self,update_display,0);
    216a:	c1 2c       	mov	r12, r1
    216c:	d1 2c       	mov	r13, r1
    216e:	0f 2e       	mov	r0, r31
    2170:	fd e2       	ldi	r31, 0x2D	; 45
    2172:	ef 2e       	mov	r14, r31
    2174:	f0 e1       	ldi	r31, 0x10	; 16
    2176:	ff 2e       	mov	r15, r31
    2178:	f0 2d       	mov	r31, r0
    217a:	8e 01       	movw	r16, r28
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	a9 01       	movw	r20, r18
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	cb 01       	movw	r24, r22
    2188:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
}
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	08 95       	ret

0000219e <save_freq>:
void save_freq(app_object * self,uint8_t arg){
    219e:	cf 92       	push	r12
    21a0:	df 92       	push	r13
    21a2:	ef 92       	push	r14
    21a4:	ff 92       	push	r15
    21a6:	0f 93       	push	r16
    21a8:	1f 93       	push	r17
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	ec 01       	movw	r28, r24
	// Get the current pulse gen
	pulse_gen * current = self->pulse_gens+\
    21b0:	0c 81       	ldd	r16, Y+4	; 0x04
    21b2:	1d 81       	ldd	r17, Y+5	; 0x05
						  self->current_pulsegen;
    21b4:	8e 81       	ldd	r24, Y+6	; 0x06
	ASYNC(current,change_freq,new_freq);
	ASYNC(self,update_display,0);
}
void save_freq(app_object * self,uint8_t arg){
	// Get the current pulse gen
	pulse_gen * current = self->pulse_gens+\
    21b6:	9b e0       	ldi	r25, 0x0B	; 11
    21b8:	89 9f       	mul	r24, r25
    21ba:	00 0d       	add	r16, r0
    21bc:	11 1d       	adc	r17, r1
    21be:	11 24       	eor	r1, r1
						  self->current_pulsegen;
	if(current->freq == 0){
    21c0:	f8 01       	movw	r30, r16
    21c2:	94 81       	ldd	r25, Z+4	; 0x04
    21c4:	91 11       	cpse	r25, r1
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <save_freq+0x52>
		// if we are a 0 we should restore the last stored frequenzy, initiates to 0
		ASYNC(current,change_freq,self->\
    21c8:	fe 01       	movw	r30, r28
    21ca:	e8 0f       	add	r30, r24
    21cc:	f1 1d       	adc	r31, r1
    21ce:	c0 84       	ldd	r12, Z+8	; 0x08
    21d0:	d1 2c       	mov	r13, r1
    21d2:	0f 2e       	mov	r0, r31
    21d4:	f4 e2       	ldi	r31, 0x24	; 36
    21d6:	ef 2e       	mov	r14, r31
    21d8:	f3 e0       	ldi	r31, 0x03	; 3
    21da:	ff 2e       	mov	r15, r31
    21dc:	f0 2d       	mov	r31, r0
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	a9 01       	movw	r20, r18
    21e4:	60 e0       	ldi	r22, 0x00	; 0
    21e6:	70 e0       	ldi	r23, 0x00	; 0
    21e8:	cb 01       	movw	r24, r22
    21ea:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
    21ee:	14 c0       	rjmp	.+40     	; 0x2218 <save_freq+0x7a>
	}
	else{
		// if we are on annything else but 0, set the new freq to 0 and save previous value
		pulse_gen * current = self->pulse_gens+\
					self->current_pulsegen;
		self->stored_freq[self->current_pulsegen] = current->freq;
    21f0:	fe 01       	movw	r30, r28
    21f2:	e8 0f       	add	r30, r24
    21f4:	f1 1d       	adc	r31, r1
    21f6:	90 87       	std	Z+8, r25	; 0x08
		ASYNC(current,change_freq,0);
    21f8:	c1 2c       	mov	r12, r1
    21fa:	d1 2c       	mov	r13, r1
    21fc:	0f 2e       	mov	r0, r31
    21fe:	f4 e2       	ldi	r31, 0x24	; 36
    2200:	ef 2e       	mov	r14, r31
    2202:	f3 e0       	ldi	r31, 0x03	; 3
    2204:	ff 2e       	mov	r15, r31
    2206:	f0 2d       	mov	r31, r0
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	a9 01       	movw	r20, r18
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	cb 01       	movw	r24, r22
    2214:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
	}
	ASYNC(self,update_display,0);
    2218:	c1 2c       	mov	r12, r1
    221a:	d1 2c       	mov	r13, r1
    221c:	0f 2e       	mov	r0, r31
    221e:	fd e2       	ldi	r31, 0x2D	; 45
    2220:	ef 2e       	mov	r14, r31
    2222:	f0 e1       	ldi	r31, 0x10	; 16
    2224:	ff 2e       	mov	r15, r31
    2226:	f0 2d       	mov	r31, r0
    2228:	8e 01       	movw	r16, r28
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	a9 01       	movw	r20, r18
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	cb 01       	movw	r24, r22
    2236:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
}
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	08 95       	ret

0000224c <app_entry>:
		LCDDR0 = LCDDR0^(1<<2);
	else{
		LCDDR2 = LCDDR2^(1<<2);
	}
}
void app_entry(app_object *self,int arg){
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	5c 01       	movw	r10, r24
		// Runs first time setups that should not be run in the main.c file
		for(int i = 0; i < self->number_of_pulsegens; i++)
    2262:	c0 e0       	ldi	r28, 0x00	; 0
    2264:	d0 e0       	ldi	r29, 0x00	; 0
    2266:	1c c0       	rjmp	.+56     	; 0x22a0 <app_entry+0x54>
			ASYNC((self->pulse_gens+i),pulse,0);
    2268:	f5 01       	movw	r30, r10
    226a:	04 81       	ldd	r16, Z+4	; 0x04
    226c:	15 81       	ldd	r17, Z+5	; 0x05
    226e:	2b e0       	ldi	r18, 0x0B	; 11
    2270:	2c 9f       	mul	r18, r28
    2272:	c0 01       	movw	r24, r0
    2274:	2d 9f       	mul	r18, r29
    2276:	90 0d       	add	r25, r0
    2278:	11 24       	eor	r1, r1
    227a:	08 0f       	add	r16, r24
    227c:	19 1f       	adc	r17, r25
    227e:	c1 2c       	mov	r12, r1
    2280:	d1 2c       	mov	r13, r1
    2282:	0f 2e       	mov	r0, r31
    2284:	f8 e8       	ldi	r31, 0x88	; 136
    2286:	ef 2e       	mov	r14, r31
    2288:	f2 e0       	ldi	r31, 0x02	; 2
    228a:	ff 2e       	mov	r15, r31
    228c:	f0 2d       	mov	r31, r0
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	a9 01       	movw	r20, r18
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	cb 01       	movw	r24, r22
    229a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
		LCDDR2 = LCDDR2^(1<<2);
	}
}
void app_entry(app_object *self,int arg){
		// Runs first time setups that should not be run in the main.c file
		for(int i = 0; i < self->number_of_pulsegens; i++)
    229e:	21 96       	adiw	r28, 0x01	; 1
    22a0:	f5 01       	movw	r30, r10
    22a2:	87 81       	ldd	r24, Z+7	; 0x07
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	c8 17       	cp	r28, r24
    22a8:	d9 07       	cpc	r29, r25
    22aa:	f4 f2       	brlt	.-68     	; 0x2268 <app_entry+0x1c>
			ASYNC((self->pulse_gens+i),pulse,0);
		ASYNC(self,update_display,0);
    22ac:	c1 2c       	mov	r12, r1
    22ae:	d1 2c       	mov	r13, r1
    22b0:	0f 2e       	mov	r0, r31
    22b2:	fd e2       	ldi	r31, 0x2D	; 45
    22b4:	ef 2e       	mov	r14, r31
    22b6:	f0 e1       	ldi	r31, 0x10	; 16
    22b8:	ff 2e       	mov	r15, r31
    22ba:	f0 2d       	mov	r31, r0
    22bc:	85 01       	movw	r16, r10
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	a9 01       	movw	r20, r18
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	cb 01       	movw	r24, r22
    22ca:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <async>
	
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	df 90       	pop	r13
    22dc:	cf 90       	pop	r12
    22de:	bf 90       	pop	r11
    22e0:	af 90       	pop	r10
    22e2:	08 95       	ret

000022e4 <__divmodsi4>:
    22e4:	05 2e       	mov	r0, r21
    22e6:	97 fb       	bst	r25, 7
    22e8:	1e f4       	brtc	.+6      	; 0x22f0 <__divmodsi4+0xc>
    22ea:	00 94       	com	r0
    22ec:	0e 94 89 11 	call	0x2312	; 0x2312 <__negsi2>
    22f0:	57 fd       	sbrc	r21, 7
    22f2:	07 d0       	rcall	.+14     	; 0x2302 <__divmodsi4_neg2>
    22f4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__udivmodsi4>
    22f8:	07 fc       	sbrc	r0, 7
    22fa:	03 d0       	rcall	.+6      	; 0x2302 <__divmodsi4_neg2>
    22fc:	4e f4       	brtc	.+18     	; 0x2310 <__divmodsi4_exit>
    22fe:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__negsi2>

00002302 <__divmodsi4_neg2>:
    2302:	50 95       	com	r21
    2304:	40 95       	com	r20
    2306:	30 95       	com	r19
    2308:	21 95       	neg	r18
    230a:	3f 4f       	sbci	r19, 0xFF	; 255
    230c:	4f 4f       	sbci	r20, 0xFF	; 255
    230e:	5f 4f       	sbci	r21, 0xFF	; 255

00002310 <__divmodsi4_exit>:
    2310:	08 95       	ret

00002312 <__negsi2>:
    2312:	90 95       	com	r25
    2314:	80 95       	com	r24
    2316:	70 95       	com	r23
    2318:	61 95       	neg	r22
    231a:	7f 4f       	sbci	r23, 0xFF	; 255
    231c:	8f 4f       	sbci	r24, 0xFF	; 255
    231e:	9f 4f       	sbci	r25, 0xFF	; 255
    2320:	08 95       	ret

00002322 <__ashldi3>:
    2322:	0f 93       	push	r16
    2324:	08 30       	cpi	r16, 0x08	; 8
    2326:	90 f0       	brcs	.+36     	; 0x234c <__ashldi3+0x2a>
    2328:	98 2f       	mov	r25, r24
    232a:	87 2f       	mov	r24, r23
    232c:	76 2f       	mov	r23, r22
    232e:	65 2f       	mov	r22, r21
    2330:	54 2f       	mov	r21, r20
    2332:	43 2f       	mov	r20, r19
    2334:	32 2f       	mov	r19, r18
    2336:	22 27       	eor	r18, r18
    2338:	08 50       	subi	r16, 0x08	; 8
    233a:	f4 cf       	rjmp	.-24     	; 0x2324 <__ashldi3+0x2>
    233c:	22 0f       	add	r18, r18
    233e:	33 1f       	adc	r19, r19
    2340:	44 1f       	adc	r20, r20
    2342:	55 1f       	adc	r21, r21
    2344:	66 1f       	adc	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	88 1f       	adc	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	0a 95       	dec	r16
    234e:	b2 f7       	brpl	.-20     	; 0x233c <__ashldi3+0x1a>
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <__ashrdi3>:
    2354:	97 fb       	bst	r25, 7
    2356:	10 f8       	bld	r1, 0

00002358 <__lshrdi3>:
    2358:	16 94       	lsr	r1
    235a:	00 08       	sbc	r0, r0
    235c:	0f 93       	push	r16
    235e:	08 30       	cpi	r16, 0x08	; 8
    2360:	98 f0       	brcs	.+38     	; 0x2388 <__lshrdi3+0x30>
    2362:	08 50       	subi	r16, 0x08	; 8
    2364:	23 2f       	mov	r18, r19
    2366:	34 2f       	mov	r19, r20
    2368:	45 2f       	mov	r20, r21
    236a:	56 2f       	mov	r21, r22
    236c:	67 2f       	mov	r22, r23
    236e:	78 2f       	mov	r23, r24
    2370:	89 2f       	mov	r24, r25
    2372:	90 2d       	mov	r25, r0
    2374:	f4 cf       	rjmp	.-24     	; 0x235e <__lshrdi3+0x6>
    2376:	05 94       	asr	r0
    2378:	97 95       	ror	r25
    237a:	87 95       	ror	r24
    237c:	77 95       	ror	r23
    237e:	67 95       	ror	r22
    2380:	57 95       	ror	r21
    2382:	47 95       	ror	r20
    2384:	37 95       	ror	r19
    2386:	27 95       	ror	r18
    2388:	0a 95       	dec	r16
    238a:	aa f7       	brpl	.-22     	; 0x2376 <__lshrdi3+0x1e>
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <__adddi3>:
    2390:	2a 0d       	add	r18, r10
    2392:	3b 1d       	adc	r19, r11
    2394:	4c 1d       	adc	r20, r12
    2396:	5d 1d       	adc	r21, r13
    2398:	6e 1d       	adc	r22, r14
    239a:	7f 1d       	adc	r23, r15
    239c:	80 1f       	adc	r24, r16
    239e:	91 1f       	adc	r25, r17
    23a0:	08 95       	ret

000023a2 <__subdi3>:
    23a2:	2a 19       	sub	r18, r10
    23a4:	3b 09       	sbc	r19, r11
    23a6:	4c 09       	sbc	r20, r12
    23a8:	5d 09       	sbc	r21, r13
    23aa:	6e 09       	sbc	r22, r14
    23ac:	7f 09       	sbc	r23, r15
    23ae:	80 0b       	sbc	r24, r16
    23b0:	91 0b       	sbc	r25, r17
    23b2:	08 95       	ret

000023b4 <__udivmodsi4>:
    23b4:	a1 e2       	ldi	r26, 0x21	; 33
    23b6:	1a 2e       	mov	r1, r26
    23b8:	aa 1b       	sub	r26, r26
    23ba:	bb 1b       	sub	r27, r27
    23bc:	fd 01       	movw	r30, r26
    23be:	0d c0       	rjmp	.+26     	; 0x23da <__udivmodsi4_ep>

000023c0 <__udivmodsi4_loop>:
    23c0:	aa 1f       	adc	r26, r26
    23c2:	bb 1f       	adc	r27, r27
    23c4:	ee 1f       	adc	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	a2 17       	cp	r26, r18
    23ca:	b3 07       	cpc	r27, r19
    23cc:	e4 07       	cpc	r30, r20
    23ce:	f5 07       	cpc	r31, r21
    23d0:	20 f0       	brcs	.+8      	; 0x23da <__udivmodsi4_ep>
    23d2:	a2 1b       	sub	r26, r18
    23d4:	b3 0b       	sbc	r27, r19
    23d6:	e4 0b       	sbc	r30, r20
    23d8:	f5 0b       	sbc	r31, r21

000023da <__udivmodsi4_ep>:
    23da:	66 1f       	adc	r22, r22
    23dc:	77 1f       	adc	r23, r23
    23de:	88 1f       	adc	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	1a 94       	dec	r1
    23e4:	69 f7       	brne	.-38     	; 0x23c0 <__udivmodsi4_loop>
    23e6:	60 95       	com	r22
    23e8:	70 95       	com	r23
    23ea:	80 95       	com	r24
    23ec:	90 95       	com	r25
    23ee:	9b 01       	movw	r18, r22
    23f0:	ac 01       	movw	r20, r24
    23f2:	bd 01       	movw	r22, r26
    23f4:	cf 01       	movw	r24, r30
    23f6:	08 95       	ret

000023f8 <setjmp>:
    23f8:	dc 01       	movw	r26, r24
    23fa:	2d 92       	st	X+, r2
    23fc:	3d 92       	st	X+, r3
    23fe:	4d 92       	st	X+, r4
    2400:	5d 92       	st	X+, r5
    2402:	6d 92       	st	X+, r6
    2404:	7d 92       	st	X+, r7
    2406:	8d 92       	st	X+, r8
    2408:	9d 92       	st	X+, r9
    240a:	ad 92       	st	X+, r10
    240c:	bd 92       	st	X+, r11
    240e:	cd 92       	st	X+, r12
    2410:	dd 92       	st	X+, r13
    2412:	ed 92       	st	X+, r14
    2414:	fd 92       	st	X+, r15
    2416:	0d 93       	st	X+, r16
    2418:	1d 93       	st	X+, r17
    241a:	cd 93       	st	X+, r28
    241c:	dd 93       	st	X+, r29
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	8d b7       	in	r24, 0x3d	; 61
    2424:	8d 93       	st	X+, r24
    2426:	8e b7       	in	r24, 0x3e	; 62
    2428:	8d 93       	st	X+, r24
    242a:	8f b7       	in	r24, 0x3f	; 63
    242c:	8d 93       	st	X+, r24
    242e:	ed 93       	st	X+, r30
    2430:	fd 93       	st	X+, r31
    2432:	88 27       	eor	r24, r24
    2434:	99 27       	eor	r25, r25
    2436:	09 94       	ijmp

00002438 <longjmp>:
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	81 1d       	adc	r24, r1
    2442:	2d 90       	ld	r2, X+
    2444:	3d 90       	ld	r3, X+
    2446:	4d 90       	ld	r4, X+
    2448:	5d 90       	ld	r5, X+
    244a:	6d 90       	ld	r6, X+
    244c:	7d 90       	ld	r7, X+
    244e:	8d 90       	ld	r8, X+
    2450:	9d 90       	ld	r9, X+
    2452:	ad 90       	ld	r10, X+
    2454:	bd 90       	ld	r11, X+
    2456:	cd 90       	ld	r12, X+
    2458:	dd 90       	ld	r13, X+
    245a:	ed 90       	ld	r14, X+
    245c:	fd 90       	ld	r15, X+
    245e:	0d 91       	ld	r16, X+
    2460:	1d 91       	ld	r17, X+
    2462:	cd 91       	ld	r28, X+
    2464:	dd 91       	ld	r29, X+
    2466:	ed 91       	ld	r30, X+
    2468:	fd 91       	ld	r31, X+
    246a:	0d 90       	ld	r0, X+
    246c:	f8 94       	cli
    246e:	fe bf       	out	0x3e, r31	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	ed bf       	out	0x3d, r30	; 61
    2474:	ed 91       	ld	r30, X+
    2476:	fd 91       	ld	r31, X+
    2478:	09 94       	ijmp

0000247a <_exit>:
    247a:	f8 94       	cli

0000247c <__stop_program>:
    247c:	ff cf       	rjmp	.-2      	; 0x247c <__stop_program>
