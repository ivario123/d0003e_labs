
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000065e  000006f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  0080012c  0080012c  0000071e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001321  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be3  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000880  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a06  00000000  00000000  0000393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e5       	ldi	r30, 0x5E	; 94
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 32       	cpi	r26, 0x2C	; 44
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ac e2       	ldi	r26, 0x2C	; 44
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 35       	cpi	r26, 0x51	; 81
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  92:	0c 94 2d 03 	jmp	0x65a	; 0x65a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
	}
	while(pos>=0){
		write_char(0,pos);
		pos--;
	}
}
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
  b6:	e5 ee       	ldi	r30, 0xE5	; 229
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e6 ee       	ldi	r30, 0xE6	; 230
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 78       	andi	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	e7 ee       	ldi	r30, 0xE7	; 231
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <write_char>:
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	c0 f5       	brcc	.+112    	; 0x16e <write_char+0x7a>
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	fb 01       	movw	r30, r22
 104:	e4 51       	subi	r30, 0x14	; 20
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	90 ed       	ldi	r25, 0xD0	; 208
 10a:	98 0f       	add	r25, r24
 10c:	9a 30       	cpi	r25, 0x0A	; 10
 10e:	60 f4       	brcc	.+24     	; 0x128 <write_char+0x34>
 110:	a8 2f       	mov	r26, r24
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	d0 97       	sbiw	r26, 0x30	; 48
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	4d 91       	ld	r20, X+
 124:	5c 91       	ld	r21, X
 126:	02 c0       	rjmp	.+4      	; 0x12c <write_char+0x38>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	1b c0       	rjmp	.+54     	; 0x168 <write_char+0x74>
 132:	94 2f       	mov	r25, r20
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	c0 fd       	sbrc	r28, 0
 144:	05 c0       	rjmp	.+10     	; 0x150 <write_char+0x5c>
 146:	80 81       	ld	r24, Z
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <write_char+0x6e>
 150:	80 81       	ld	r24, Z
 152:	68 2f       	mov	r22, r24
 154:	6f 70       	andi	r22, 0x0F	; 15
 156:	70 e1       	ldi	r23, 0x10	; 16
 158:	97 9f       	mul	r25, r23
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	86 2b       	or	r24, r22
 160:	80 83       	st	Z, r24
 162:	35 96       	adiw	r30, 0x05	; 5
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 30       	cpi	r18, 0x04	; 4
 16a:	31 05       	cpc	r19, r1
 16c:	14 f3       	brlt	.-60     	; 0x132 <write_char+0x3e>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <is_prime>:


int is_prime(long num){
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
	
	// base cases 0-3
	if (num <= 3)
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	88 16       	cp	r8, r24
 18a:	91 04       	cpc	r9, r1
 18c:	a1 04       	cpc	r10, r1
 18e:	b1 04       	cpc	r11, r1
 190:	0c f1       	brlt	.+66     	; 0x1d4 <is_prime+0x62>
	return 1;
	// base case num is even
	if(num%2 == 0)
 192:	80 fe       	sbrs	r8, 0
 194:	22 c0       	rjmp	.+68     	; 0x1da <is_prime+0x68>
 196:	0f 2e       	mov	r0, r31
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	cf 2e       	mov	r12, r31
 19c:	d1 2c       	mov	r13, r1
 19e:	e1 2c       	mov	r14, r1
 1a0:	f1 2c       	mov	r15, r1
 1a2:	f0 2d       	mov	r31, r0
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <is_prime+0x52>
	return 0;
	// Start on 3
	long counter = 3;
	// Check all numbers n = 3 ... num since optimizing is not allowed
	while(counter <num){
		if(num%counter == 0)
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 ab 02 	call	0x556	; 0x556 <__divmodsi4>
 1b2:	67 2b       	or	r22, r23
 1b4:	68 2b       	or	r22, r24
 1b6:	69 2b       	or	r22, r25
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <is_prime+0x6e>
		return 0;
		// In reality you would increment by two.
		counter++;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	c8 1a       	sub	r12, r24
 1be:	d8 0a       	sbc	r13, r24
 1c0:	e8 0a       	sbc	r14, r24
 1c2:	f8 0a       	sbc	r15, r24
	if(num%2 == 0)
	return 0;
	// Start on 3
	long counter = 3;
	// Check all numbers n = 3 ... num since optimizing is not allowed
	while(counter <num){
 1c4:	c8 14       	cp	r12, r8
 1c6:	d9 04       	cpc	r13, r9
 1c8:	ea 04       	cpc	r14, r10
 1ca:	fb 04       	cpc	r15, r11
 1cc:	64 f3       	brlt	.-40     	; 0x1a6 <is_prime+0x34>
		if(num%counter == 0)
		return 0;
		// In reality you would increment by two.
		counter++;
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x72>

int is_prime(long num){
	
	// base cases 0-3
	if (num <= 3)
	return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x72>
	// base case num is even
	if(num%2 == 0)
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x72>
	// Start on 3
	long counter = 3;
	// Check all numbers n = 3 ... num since optimizing is not allowed
	while(counter <num){
		if(num%counter == 0)
		return 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		// In reality you would increment by two.
		counter++;
	}
	return 1;
}
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <printAt>:

//void writeChar(char ch, int pos); // from lab 1

//bool is_prime(long i); // from lab 1

void printAt(long num, int pos) {
 1f6:	8f 92       	push	r8
 1f8:	9f 92       	push	r9
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	4b 01       	movw	r8, r22
 20c:	5c 01       	movw	r10, r24
 20e:	ea 01       	movw	r28, r20
    int pp = pos;
    write_char( (num % 100) / 10 + '0', pp);
 210:	24 e6       	ldi	r18, 0x64	; 100
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	0e 94 ab 02 	call	0x556	; 0x556 <__divmodsi4>
 21c:	0f 2e       	mov	r0, r31
 21e:	fa e0       	ldi	r31, 0x0A	; 10
 220:	cf 2e       	mov	r12, r31
 222:	d1 2c       	mov	r13, r1
 224:	e1 2c       	mov	r14, r1
 226:	f1 2c       	mov	r15, r1
 228:	f0 2d       	mov	r31, r0
 22a:	a7 01       	movw	r20, r14
 22c:	96 01       	movw	r18, r12
 22e:	0e 94 ab 02 	call	0x556	; 0x556 <__divmodsi4>
 232:	be 01       	movw	r22, r28
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	82 0f       	add	r24, r18
 238:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
    pp++;
 23c:	21 96       	adiw	r28, 0x01	; 1
    write_char( num % 10 + '0', pp);
 23e:	c5 01       	movw	r24, r10
 240:	b4 01       	movw	r22, r8
 242:	a7 01       	movw	r20, r14
 244:	96 01       	movw	r18, r12
 246:	0e 94 ab 02 	call	0x556	; 0x556 <__divmodsi4>
 24a:	86 2f       	mov	r24, r22
 24c:	be 01       	movw	r22, r28
 24e:	80 5d       	subi	r24, 0xD0	; 208
 250:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	9f 90       	pop	r9
 266:	8f 90       	pop	r8
 268:	08 95       	ret

0000026a <computePrimes>:

void computePrimes(int pos) {
 26a:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 26c:	c1 2c       	mov	r12, r1
 26e:	d1 2c       	mov	r13, r1
 270:	76 01       	movw	r14, r12
 272:	c3 94       	inc	r12
        if (is_prime((long)n)) {
 274:	c7 01       	movw	r24, r14
 276:	b6 01       	movw	r22, r12
 278:	0e 94 b9 00 	call	0x172	; 0x172 <is_prime>
 27c:	89 2b       	or	r24, r25
 27e:	29 f0       	breq	.+10     	; 0x28a <computePrimes+0x20>
            printAt(n, pos);
 280:	ae 01       	movw	r20, r28
 282:	c7 01       	movw	r24, r14
 284:	b6 01       	movw	r22, r12
 286:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	c8 1a       	sub	r12, r24
 28e:	d8 0a       	sbc	r13, r24
 290:	e8 0a       	sbc	r14, r24
 292:	f8 0a       	sbc	r15, r24
        if (is_prime((long)n)) {
            printAt(n, pos);
			//yield();
        }
    }
 294:	ef cf       	rjmp	.-34     	; 0x274 <computePrimes+0xa>

00000296 <main>:
}


int main() {
	init();
 296:	0e 94 9d 02 	call	0x53a	; 0x53a <init>
	init_lcd();
 29a:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
    spawn(computePrimes, 0);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	85 e3       	ldi	r24, 0x35	; 53
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <spawn>
    computePrimes(3);
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 35 01 	call	0x26a	; 0x26a <computePrimes>

000002b2 <initialize>:

void lock(mutex *m) {

}

void unlock(mutex *m) {
 2b2:	84 b7       	in	r24, 0x34	; 52
 2b4:	80 68       	ori	r24, 0x80	; 128
 2b6:	84 bf       	out	0x34, r24	; 52
 2b8:	e9 e6       	ldi	r30, 0x69	; 105
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	83 60       	ori	r24, 0x03	; 3
 2c0:	80 83       	st	Z, r24
 2c2:	8d b3       	in	r24, 0x1d	; 29
 2c4:	81 68       	ori	r24, 0x81	; 129
 2c6:	8d bb       	out	0x1d, r24	; 29
 2c8:	ec e6       	ldi	r30, 0x6C	; 108
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	80 83       	st	Z, r24
 2d2:	ef e6       	ldi	r30, 0x6F	; 111
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	80 83       	st	Z, r24
 2dc:	87 e8       	ldi	r24, 0x87	; 135
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 2e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 2e8:	78 94       	sei
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	15 c0       	rjmp	.+42     	; 0x31a <initialize+0x68>
 2f0:	ac 01       	movw	r20, r24
 2f2:	4f 5f       	subi	r20, 0xFF	; 255
 2f4:	5f 4f       	sbci	r21, 0xFF	; 255
 2f6:	6d e6       	ldi	r22, 0x6D	; 109
 2f8:	64 9f       	mul	r22, r20
 2fa:	90 01       	movw	r18, r0
 2fc:	65 9f       	mul	r22, r21
 2fe:	30 0d       	add	r19, r0
 300:	11 24       	eor	r1, r1
 302:	23 56       	subi	r18, 0x63	; 99
 304:	3e 4f       	sbci	r19, 0xFE	; 254
 306:	68 9f       	mul	r22, r24
 308:	f0 01       	movw	r30, r0
 30a:	69 9f       	mul	r22, r25
 30c:	f0 0d       	add	r31, r0
 30e:	11 24       	eor	r1, r1
 310:	e3 56       	subi	r30, 0x63	; 99
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	35 83       	std	Z+5, r19	; 0x05
 316:	24 83       	std	Z+4, r18	; 0x04
 318:	ca 01       	movw	r24, r20
 31a:	83 30       	cpi	r24, 0x03	; 3
 31c:	91 05       	cpc	r25, r1
 31e:	44 f3       	brlt	.-48     	; 0x2f0 <initialize+0x3e>
 320:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <threads+0x14c>
 324:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <threads+0x14b>
 328:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 32c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 338:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 33c:	08 95       	ret

0000033e <enqueue>:
 33e:	dc 01       	movw	r26, r24
 340:	15 96       	adiw	r26, 0x05	; 5
 342:	1c 92       	st	X, r1
 344:	1e 92       	st	-X, r1
 346:	14 97       	sbiw	r26, 0x04	; 4
 348:	db 01       	movw	r26, r22
 34a:	ed 91       	ld	r30, X+
 34c:	fc 91       	ld	r31, X
 34e:	11 97       	sbiw	r26, 0x01	; 1
 350:	30 97       	sbiw	r30, 0x00	; 0
 352:	21 f4       	brne	.+8      	; 0x35c <enqueue+0x1e>
 354:	8d 93       	st	X+, r24
 356:	9c 93       	st	X, r25
 358:	08 95       	ret
 35a:	f9 01       	movw	r30, r18
 35c:	24 81       	ldd	r18, Z+4	; 0x04
 35e:	35 81       	ldd	r19, Z+5	; 0x05
 360:	21 15       	cp	r18, r1
 362:	31 05       	cpc	r19, r1
 364:	d1 f7       	brne	.-12     	; 0x35a <enqueue+0x1c>
 366:	95 83       	std	Z+5, r25	; 0x05
 368:	84 83       	std	Z+4, r24	; 0x04
 36a:	08 95       	ret

0000036c <dequeue>:
 36c:	dc 01       	movw	r26, r24
 36e:	ed 91       	ld	r30, X+
 370:	fc 91       	ld	r31, X
 372:	11 97       	sbiw	r26, 0x01	; 1
 374:	30 97       	sbiw	r30, 0x00	; 0
 376:	09 f4       	brne	.+2      	; 0x37a <dequeue+0xe>
 378:	ff cf       	rjmp	.-2      	; 0x378 <dequeue+0xc>
 37a:	24 81       	ldd	r18, Z+4	; 0x04
 37c:	35 81       	ldd	r19, Z+5	; 0x05
 37e:	2d 93       	st	X+, r18
 380:	3c 93       	st	X, r19
 382:	cf 01       	movw	r24, r30
 384:	08 95       	ret

00000386 <dispatch>:
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	00 d0       	rcall	.+0      	; 0x38c <dispatch+0x6>
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	9a 83       	std	Y+2, r25	; 0x02
 392:	89 83       	std	Y+1, r24	; 0x01
 394:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 398:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 39c:	06 96       	adiw	r24, 0x06	; 6
 39e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <setjmp>
 3a2:	89 2b       	or	r24, r25
 3a4:	59 f4       	brne	.+22     	; 0x3bc <dispatch+0x36>
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	9a 81       	ldd	r25, Y+2	; 0x02
 3aa:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
 3ae:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	06 96       	adiw	r24, 0x06	; 6
 3b8:	0e 94 0c 03 	call	0x618	; 0x618 <longjmp>
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <spawn>:
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <spawn+0xe>
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	7c 01       	movw	r14, r24
 3da:	8b 01       	movw	r16, r22
 3dc:	f8 94       	cli
 3de:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 3e2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 3e6:	89 2b       	or	r24, r25
 3e8:	11 f4       	brne	.+4      	; 0x3ee <spawn+0x28>
 3ea:	0e 94 59 01 	call	0x2b2	; 0x2b2 <initialize>
 3ee:	8a e2       	ldi	r24, 0x2A	; 42
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 b6 01 	call	0x36c	; 0x36c <dequeue>
 3f6:	9a 83       	std	Y+2, r25	; 0x02
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	fc 01       	movw	r30, r24
 3fc:	f1 82       	std	Z+1, r15	; 0x01
 3fe:	e0 82       	st	Z, r14
 400:	13 83       	std	Z+3, r17	; 0x03
 402:	02 83       	std	Z+2, r16	; 0x02
 404:	15 82       	std	Z+5, r1	; 0x05
 406:	14 82       	std	Z+4, r1	; 0x04
 408:	06 96       	adiw	r24, 0x06	; 6
 40a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <setjmp>
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	e1 f4       	brne	.+56     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 412:	78 94       	sei
 414:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <current>
 418:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <current+0x1>
 41c:	ed 91       	ld	r30, X+
 41e:	fc 91       	ld	r31, X
 420:	11 97       	sbiw	r26, 0x01	; 1
 422:	12 96       	adiw	r26, 0x02	; 2
 424:	8d 91       	ld	r24, X+
 426:	9c 91       	ld	r25, X
 428:	13 97       	sbiw	r26, 0x03	; 3
 42a:	09 95       	icall
 42c:	f8 94       	cli
 42e:	6a e2       	ldi	r22, 0x2A	; 42
 430:	71 e0       	ldi	r23, 0x01	; 1
 432:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 436:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 43a:	0e 94 9f 01 	call	0x33e	; 0x33e <enqueue>
 43e:	8e e2       	ldi	r24, 0x2E	; 46
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	0e 94 b6 01 	call	0x36c	; 0x36c <dequeue>
 446:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
 44a:	e9 81       	ldd	r30, Y+1	; 0x01
 44c:	fa 81       	ldd	r31, Y+2	; 0x02
 44e:	36 96       	adiw	r30, 0x06	; 6
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	9a 81       	ldd	r25, Y+2	; 0x02
 454:	87 59       	subi	r24, 0x97	; 151
 456:	9f 4f       	sbci	r25, 0xFF	; 255
 458:	91 8b       	std	Z+17, r25	; 0x11
 45a:	80 8b       	std	Z+16, r24	; 0x10
 45c:	e9 81       	ldd	r30, Y+1	; 0x01
 45e:	fa 81       	ldd	r31, Y+2	; 0x02
 460:	91 8f       	std	Z+25, r25	; 0x19
 462:	80 8f       	std	Z+24, r24	; 0x18
 464:	6e e2       	ldi	r22, 0x2E	; 46
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	cf 01       	movw	r24, r30
 46a:	0e 94 9f 01 	call	0x33e	; 0x33e <enqueue>
 46e:	78 94       	sei
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	08 95       	ret

00000482 <yield>:
 482:	6e e2       	ldi	r22, 0x2E	; 46
 484:	71 e0       	ldi	r23, 0x01	; 1
 486:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 48a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 48e:	0e 94 9f 01 	call	0x33e	; 0x33e <enqueue>
 492:	8e e2       	ldi	r24, 0x2E	; 46
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 b6 01 	call	0x36c	; 0x36c <dequeue>
 49a:	0e 94 c3 01 	call	0x386	; 0x386 <dispatch>
 49e:	08 95       	ret

000004a0 <__vector_3>:
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
 4c2:	1f 9b       	sbis	0x03, 7	; 3
 4c4:	0e 94 41 02 	call	0x482	; 0x482 <yield>
 4c8:	ff 91       	pop	r31
 4ca:	ef 91       	pop	r30
 4cc:	bf 91       	pop	r27
 4ce:	af 91       	pop	r26
 4d0:	9f 91       	pop	r25
 4d2:	8f 91       	pop	r24
 4d4:	7f 91       	pop	r23
 4d6:	6f 91       	pop	r22
 4d8:	5f 91       	pop	r21
 4da:	4f 91       	pop	r20
 4dc:	3f 91       	pop	r19
 4de:	2f 91       	pop	r18
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <__vector_7>:
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
 50c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 510:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 514:	0e 94 41 02 	call	0x482	; 0x482 <yield>
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <init>:
}


void init(void){
	// Setting power options
	CLKPR = 0x80;
 53a:	e1 e6       	ldi	r30, 0x61	; 97
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 e8       	ldi	r24, 0x80	; 128
 540:	80 83       	st	Z, r24
	CLKPR = 0X00;
 542:	10 82       	st	Z, r1
	
	// Setting the pre-scaling factor to 256
	TCCR1B = TCCR1B|TIMER_SCALING_1024;
 544:	e1 e8       	ldi	r30, 0x81	; 129
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	85 60       	ori	r24, 0x05	; 5
 54c:	80 83       	st	Z, r24
	
	
	
	
	// Setting the pull up
	PORTB = PORTB|(1<<7);
 54e:	85 b1       	in	r24, 0x05	; 5
 550:	80 68       	ori	r24, 0x80	; 128
 552:	85 b9       	out	0x05, r24	; 5
 554:	08 95       	ret

00000556 <__divmodsi4>:
 556:	05 2e       	mov	r0, r21
 558:	97 fb       	bst	r25, 7
 55a:	1e f4       	brtc	.+6      	; 0x562 <__divmodsi4+0xc>
 55c:	00 94       	com	r0
 55e:	0e 94 c2 02 	call	0x584	; 0x584 <__negsi2>
 562:	57 fd       	sbrc	r21, 7
 564:	07 d0       	rcall	.+14     	; 0x574 <__divmodsi4_neg2>
 566:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodsi4>
 56a:	07 fc       	sbrc	r0, 7
 56c:	03 d0       	rcall	.+6      	; 0x574 <__divmodsi4_neg2>
 56e:	4e f4       	brtc	.+18     	; 0x582 <__divmodsi4_exit>
 570:	0c 94 c2 02 	jmp	0x584	; 0x584 <__negsi2>

00000574 <__divmodsi4_neg2>:
 574:	50 95       	com	r21
 576:	40 95       	com	r20
 578:	30 95       	com	r19
 57a:	21 95       	neg	r18
 57c:	3f 4f       	sbci	r19, 0xFF	; 255
 57e:	4f 4f       	sbci	r20, 0xFF	; 255
 580:	5f 4f       	sbci	r21, 0xFF	; 255

00000582 <__divmodsi4_exit>:
 582:	08 95       	ret

00000584 <__negsi2>:
 584:	90 95       	com	r25
 586:	80 95       	com	r24
 588:	70 95       	com	r23
 58a:	61 95       	neg	r22
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8f 4f       	sbci	r24, 0xFF	; 255
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	08 95       	ret

00000594 <__udivmodsi4>:
 594:	a1 e2       	ldi	r26, 0x21	; 33
 596:	1a 2e       	mov	r1, r26
 598:	aa 1b       	sub	r26, r26
 59a:	bb 1b       	sub	r27, r27
 59c:	fd 01       	movw	r30, r26
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <__udivmodsi4_ep>

000005a0 <__udivmodsi4_loop>:
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	ee 1f       	adc	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	a2 17       	cp	r26, r18
 5aa:	b3 07       	cpc	r27, r19
 5ac:	e4 07       	cpc	r30, r20
 5ae:	f5 07       	cpc	r31, r21
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__udivmodsi4_ep>
 5b2:	a2 1b       	sub	r26, r18
 5b4:	b3 0b       	sbc	r27, r19
 5b6:	e4 0b       	sbc	r30, r20
 5b8:	f5 0b       	sbc	r31, r21

000005ba <__udivmodsi4_ep>:
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	1a 94       	dec	r1
 5c4:	69 f7       	brne	.-38     	; 0x5a0 <__udivmodsi4_loop>
 5c6:	60 95       	com	r22
 5c8:	70 95       	com	r23
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	9b 01       	movw	r18, r22
 5d0:	ac 01       	movw	r20, r24
 5d2:	bd 01       	movw	r22, r26
 5d4:	cf 01       	movw	r24, r30
 5d6:	08 95       	ret

000005d8 <setjmp>:
 5d8:	dc 01       	movw	r26, r24
 5da:	2d 92       	st	X+, r2
 5dc:	3d 92       	st	X+, r3
 5de:	4d 92       	st	X+, r4
 5e0:	5d 92       	st	X+, r5
 5e2:	6d 92       	st	X+, r6
 5e4:	7d 92       	st	X+, r7
 5e6:	8d 92       	st	X+, r8
 5e8:	9d 92       	st	X+, r9
 5ea:	ad 92       	st	X+, r10
 5ec:	bd 92       	st	X+, r11
 5ee:	cd 92       	st	X+, r12
 5f0:	dd 92       	st	X+, r13
 5f2:	ed 92       	st	X+, r14
 5f4:	fd 92       	st	X+, r15
 5f6:	0d 93       	st	X+, r16
 5f8:	1d 93       	st	X+, r17
 5fa:	cd 93       	st	X+, r28
 5fc:	dd 93       	st	X+, r29
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	8d b7       	in	r24, 0x3d	; 61
 604:	8d 93       	st	X+, r24
 606:	8e b7       	in	r24, 0x3e	; 62
 608:	8d 93       	st	X+, r24
 60a:	8f b7       	in	r24, 0x3f	; 63
 60c:	8d 93       	st	X+, r24
 60e:	ed 93       	st	X+, r30
 610:	fd 93       	st	X+, r31
 612:	88 27       	eor	r24, r24
 614:	99 27       	eor	r25, r25
 616:	09 94       	ijmp

00000618 <longjmp>:
 618:	dc 01       	movw	r26, r24
 61a:	cb 01       	movw	r24, r22
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 05       	cpc	r25, r1
 620:	81 1d       	adc	r24, r1
 622:	2d 90       	ld	r2, X+
 624:	3d 90       	ld	r3, X+
 626:	4d 90       	ld	r4, X+
 628:	5d 90       	ld	r5, X+
 62a:	6d 90       	ld	r6, X+
 62c:	7d 90       	ld	r7, X+
 62e:	8d 90       	ld	r8, X+
 630:	9d 90       	ld	r9, X+
 632:	ad 90       	ld	r10, X+
 634:	bd 90       	ld	r11, X+
 636:	cd 90       	ld	r12, X+
 638:	dd 90       	ld	r13, X+
 63a:	ed 90       	ld	r14, X+
 63c:	fd 90       	ld	r15, X+
 63e:	0d 91       	ld	r16, X+
 640:	1d 91       	ld	r17, X+
 642:	cd 91       	ld	r28, X+
 644:	dd 91       	ld	r29, X+
 646:	ed 91       	ld	r30, X+
 648:	fd 91       	ld	r31, X+
 64a:	0d 90       	ld	r0, X+
 64c:	f8 94       	cli
 64e:	fe bf       	out	0x3e, r31	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	ed bf       	out	0x3d, r30	; 61
 654:	ed 91       	ld	r30, X+
 656:	fd 91       	ld	r31, X+
 658:	09 94       	ijmp

0000065a <_exit>:
 65a:	f8 94       	cli

0000065c <__stop_program>:
 65c:	ff cf       	rjmp	.-2      	; 0x65c <__stop_program>
