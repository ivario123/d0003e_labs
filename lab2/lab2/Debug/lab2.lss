
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000742  000007d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080012c  0080012c  00000802  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001547  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c3d  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092b  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000341c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f5  00000000  00000000  0000376c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ca6  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004a07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e4       	ldi	r30, 0x42	; 66
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 32       	cpi	r26, 0x2C	; 44
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ac e2       	ldi	r26, 0x2C	; 44
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a7 35       	cpi	r26, 0x57	; 87
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  92:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
	}
	while(pos>=0){
		write_char(0,pos);
		pos--;
	}
}
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
  b6:	e5 ee       	ldi	r30, 0xE5	; 229
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e6 ee       	ldi	r30, 0xE6	; 230
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 78       	andi	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	e7 ee       	ldi	r30, 0xE7	; 231
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <write_char>:
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	c0 f5       	brcc	.+112    	; 0x16e <write_char+0x7a>
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	fb 01       	movw	r30, r22
 104:	e4 51       	subi	r30, 0x14	; 20
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	90 ed       	ldi	r25, 0xD0	; 208
 10a:	98 0f       	add	r25, r24
 10c:	9a 30       	cpi	r25, 0x0A	; 10
 10e:	60 f4       	brcc	.+24     	; 0x128 <write_char+0x34>
 110:	a8 2f       	mov	r26, r24
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	d0 97       	sbiw	r26, 0x30	; 48
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	4d 91       	ld	r20, X+
 124:	5c 91       	ld	r21, X
 126:	02 c0       	rjmp	.+4      	; 0x12c <write_char+0x38>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	1b c0       	rjmp	.+54     	; 0x168 <write_char+0x74>
 132:	94 2f       	mov	r25, r20
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	c0 fd       	sbrc	r28, 0
 144:	05 c0       	rjmp	.+10     	; 0x150 <write_char+0x5c>
 146:	80 81       	ld	r24, Z
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <write_char+0x6e>
 150:	80 81       	ld	r24, Z
 152:	68 2f       	mov	r22, r24
 154:	6f 70       	andi	r22, 0x0F	; 15
 156:	70 e1       	ldi	r23, 0x10	; 16
 158:	97 9f       	mul	r25, r23
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	86 2b       	or	r24, r22
 160:	80 83       	st	Z, r24
 162:	35 96       	adiw	r30, 0x05	; 5
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 30       	cpi	r18, 0x04	; 4
 16a:	31 05       	cpc	r19, r1
 16c:	14 f3       	brlt	.-60     	; 0x132 <write_char+0x3e>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <is_prime>:

/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/

int is_prime(long num){
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
	
	if (num <= 3)
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	88 16       	cp	r8, r24
 18a:	91 04       	cpc	r9, r1
 18c:	a1 04       	cpc	r10, r1
 18e:	b1 04       	cpc	r11, r1
 190:	0c f1       	brlt	.+66     	; 0x1d4 <is_prime+0x62>
	return 1;
	
	if(num%2 == 0)
 192:	80 fe       	sbrs	r8, 0
 194:	22 c0       	rjmp	.+68     	; 0x1da <is_prime+0x68>
 196:	0f 2e       	mov	r0, r31
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	cf 2e       	mov	r12, r31
 19c:	d1 2c       	mov	r13, r1
 19e:	e1 2c       	mov	r14, r1
 1a0:	f1 2c       	mov	r15, r1
 1a2:	f0 2d       	mov	r31, r0
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <is_prime+0x52>
	return 0;
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 1b2:	67 2b       	or	r22, r23
 1b4:	68 2b       	or	r22, r24
 1b6:	69 2b       	or	r22, r25
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <is_prime+0x6e>
		return 0;
		counter++;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	c8 1a       	sub	r12, r24
 1be:	d8 0a       	sbc	r13, r24
 1c0:	e8 0a       	sbc	r14, r24
 1c2:	f8 0a       	sbc	r15, r24
	if(num%2 == 0)
	return 0;
	
	long counter = 3;
	
	while(counter <num){
 1c4:	c8 14       	cp	r12, r8
 1c6:	d9 04       	cpc	r13, r9
 1c8:	ea 04       	cpc	r14, r10
 1ca:	fb 04       	cpc	r15, r11
 1cc:	64 f3       	brlt	.-40     	; 0x1a6 <is_prime+0x34>
		if(num%counter == 0)
		return 0;
		counter++;
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x72>
/************************************************************************/

int is_prime(long num){
	
	if (num <= 3)
	return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x72>
	
	if(num%2 == 0)
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x72>
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
		return 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		counter++;
	}
	return 1;
}
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <printAt>:
	yield();
	for(int i = 0; i <1000; i++);
	pp_1 = pos+1;
	write_char( num % 10 + '0', pp_1);
	yield();
}
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
 206:	ea 01       	movw	r28, r20
 208:	8c e2       	ldi	r24, 0x2C	; 44
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 c1 02 	call	0x582	; 0x582 <lock>
 210:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <pp+0x1>
 214:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <pp>
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	24 e6       	ldi	r18, 0x64	; 100
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 228:	2a e0       	ldi	r18, 0x0A	; 10
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 234:	be 01       	movw	r22, r28
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	82 0f       	add	r24, r18
 23a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	01 c0       	rjmp	.+2      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	88 3e       	cpi	r24, 0xE8	; 232
 248:	23 e0       	ldi	r18, 0x03	; 3
 24a:	92 07       	cpc	r25, r18
 24c:	dc f3       	brlt	.-10     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 24e:	c0 91 30 01 	lds	r28, 0x0130	; 0x800130 <pp>
 252:	d0 91 31 01 	lds	r29, 0x0131	; 0x800131 <pp+0x1>
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <pp+0x1>
 25c:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <pp>
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	2a e0       	ldi	r18, 0x0A	; 10
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	0e 94 1d 03 	call	0x63a	; 0x63a <__divmodsi4>
 270:	86 2f       	mov	r24, r22
 272:	be 01       	movw	r22, r28
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
 27a:	8c e2       	ldi	r24, 0x2C	; 44
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <unlock>
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <computePrimes>:
 290:	ec 01       	movw	r28, r24
 292:	c1 2c       	mov	r12, r1
 294:	d1 2c       	mov	r13, r1
 296:	76 01       	movw	r14, r12
 298:	c3 94       	inc	r12
 29a:	c7 01       	movw	r24, r14
 29c:	b6 01       	movw	r22, r12
 29e:	0e 94 b9 00 	call	0x172	; 0x172 <is_prime>
 2a2:	89 2b       	or	r24, r25
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <computePrimes+0x20>
 2a6:	ae 01       	movw	r20, r28
 2a8:	c7 01       	movw	r24, r14
 2aa:	b6 01       	movw	r22, r12
 2ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <printAt>
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	c8 1a       	sub	r12, r24
 2b4:	d8 0a       	sbc	r13, r24
 2b6:	e8 0a       	sbc	r14, r24
 2b8:	f8 0a       	sbc	r15, r24
 2ba:	ef cf       	rjmp	.-34     	; 0x29a <computePrimes+0xa>

000002bc <main>:
    }
}


int main() {
	init_lcd();
 2bc:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
    spawn(computePrimes, 0);
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	88 e4       	ldi	r24, 0x48	; 72
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 01 02 	call	0x402	; 0x402 <spawn>
    computePrimes(3);
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 48 01 	call	0x290	; 0x290 <computePrimes>

000002d4 <initialize>:
static void initialize(void) {
	// Setting a pointer to timer 1 reg
	volatile uint16_t * timer = (uint16_t *)0x84;
	
	// Setting power options
	CLKPR = 0x80;
 2d4:	e1 e6       	ldi	r30, 0x61	; 97
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 e8       	ldi	r24, 0x80	; 128
 2da:	80 83       	st	Z, r24
	CLKPR = 0X00;
 2dc:	10 82       	st	Z, r1
	
	// Setting the pre-scaling factor to 256
	TCCR1B = TCCR1B|TIMER_SCALING_1024;
 2de:	e1 e8       	ldi	r30, 0x81	; 129
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	85 60       	ori	r24, 0x05	; 5
 2e6:	80 83       	st	Z, r24
	
	// Setting the pull up
	PORTB = PORTB|(1<<7);
 2e8:	85 b1       	in	r24, 0x05	; 5
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	85 b9       	out	0x05, r24	; 5
	
	// Enabling interrupts
	MCUSR = MCUSR|1<<7;
 2ee:	84 b7       	in	r24, 0x34	; 52
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	84 bf       	out	0x34, r24	; 52
	EICRA = EICRA|3;
 2f4:	e9 e6       	ldi	r30, 0x69	; 105
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	83 60       	ori	r24, 0x03	; 3
 2fc:	80 83       	st	Z, r24
	EIMSK = EIMSK | 1<<7|1;
 2fe:	8d b3       	in	r24, 0x1d	; 29
 300:	81 68       	ori	r24, 0x81	; 129
 302:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = PCMSK1|1<<7;
 304:	ec e6       	ldi	r30, 0x6C	; 108
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	80 83       	st	Z, r24
	
	// Setting timer int enabled
	TIMSK1 = TIMSK1|2;
 30e:	ef e6       	ldi	r30, 0x6F	; 111
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	82 60       	ori	r24, 0x02	; 2
 316:	80 83       	st	Z, r24
	
	
	
	uint16_t * target_time = (uint16_t *)0x88;
	*target_time = 391;												// Approximate form of 50ms in clock cycles * 1024
 318:	87 e8       	ldi	r24, 0x87	; 135
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 320:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	15 c0       	rjmp	.+42     	; 0x354 <initialize+0x80>
        threads[i].next = &threads[i+1];
 32a:	ac 01       	movw	r20, r24
 32c:	4f 5f       	subi	r20, 0xFF	; 255
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	6d e6       	ldi	r22, 0x6D	; 109
 332:	64 9f       	mul	r22, r20
 334:	90 01       	movw	r18, r0
 336:	65 9f       	mul	r22, r21
 338:	30 0d       	add	r19, r0
 33a:	11 24       	eor	r1, r1
 33c:	2d 55       	subi	r18, 0x5D	; 93
 33e:	3e 4f       	sbci	r19, 0xFE	; 254
 340:	68 9f       	mul	r22, r24
 342:	f0 01       	movw	r30, r0
 344:	69 9f       	mul	r22, r25
 346:	f0 0d       	add	r31, r0
 348:	11 24       	eor	r1, r1
 34a:	ed 55       	subi	r30, 0x5D	; 93
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	35 83       	std	Z+5, r19	; 0x05
 350:	24 83       	std	Z+4, r18	; 0x04
	uint16_t * target_time = (uint16_t *)0x88;
	*target_time = 391;												// Approximate form of 50ms in clock cycles * 1024
	
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 352:	ca 01       	movw	r24, r20
 354:	83 30       	cpi	r24, 0x03	; 3
 356:	91 05       	cpc	r25, r1
 358:	44 f3       	brlt	.-48     	; 0x32a <initialize+0x56>
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
 35a:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <threads+0x14c>
 35e:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <threads+0x14b>

	// reseting timer
	*timer = 0;
 362:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 366:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

    initialized = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <initialized+0x1>
 372:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <initialized>
	ENABLE();
 376:	78 94       	sei
 378:	08 95       	ret

0000037a <enqueue>:
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 37a:	dc 01       	movw	r26, r24
 37c:	15 96       	adiw	r26, 0x05	; 5
 37e:	1c 92       	st	X, r1
 380:	1e 92       	st	-X, r1
 382:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 384:	db 01       	movw	r26, r22
 386:	ed 91       	ld	r30, X+
 388:	fc 91       	ld	r31, X
 38a:	11 97       	sbiw	r26, 0x01	; 1
 38c:	30 97       	sbiw	r30, 0x00	; 0
 38e:	21 f4       	brne	.+8      	; 0x398 <enqueue+0x1e>
        *queue = p;
 390:	8d 93       	st	X+, r24
 392:	9c 93       	st	X, r25
 394:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 396:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 398:	24 81       	ldd	r18, Z+4	; 0x04
 39a:	35 81       	ldd	r19, Z+5	; 0x05
 39c:	21 15       	cp	r18, r1
 39e:	31 05       	cpc	r19, r1
 3a0:	d1 f7       	brne	.-12     	; 0x396 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 3a2:	95 83       	std	Z+5, r25	; 0x05
 3a4:	84 83       	std	Z+4, r24	; 0x04
 3a6:	08 95       	ret

000003a8 <dequeue>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3a8:	dc 01       	movw	r26, r24
 3aa:	ed 91       	ld	r30, X+
 3ac:	fc 91       	ld	r31, X
 3ae:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 3b0:	30 97       	sbiw	r30, 0x00	; 0
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <dequeue+0xe>
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <dequeue+0xc>
        *queue = (*queue)->next;
 3b6:	24 81       	ldd	r18, Z+4	; 0x04
 3b8:	35 81       	ldd	r19, Z+5	; 0x05
 3ba:	2d 93       	st	X+, r18
 3bc:	3c 93       	st	X, r19
    } else {
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
}
 3be:	cf 01       	movw	r24, r30
 3c0:	08 95       	ret

000003c2 <dispatch>:

static void dispatch(thread next) {
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	00 d0       	rcall	.+0      	; 0x3c8 <dispatch+0x6>
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 3d0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 3d4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 3d8:	06 96       	adiw	r24, 0x06	; 6
 3da:	0e 94 5e 03 	call	0x6bc	; 0x6bc <setjmp>
 3de:	89 2b       	or	r24, r25
 3e0:	59 f4       	brne	.+22     	; 0x3f8 <dispatch+0x36>
        current = next;
 3e2:	89 81       	ldd	r24, Y+1	; 0x01
 3e4:	9a 81       	ldd	r25, Y+2	; 0x02
 3e6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
 3ea:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
        longjmp(next->context,1);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	70 e0       	ldi	r23, 0x00	; 0
 3f2:	06 96       	adiw	r24, 0x06	; 6
 3f4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <longjmp>
    }
}
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <spawn>:

void spawn(void (* function)(int), int arg) {
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	00 d0       	rcall	.+0      	; 0x410 <spawn+0xe>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	7c 01       	movw	r14, r24
 416:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 418:	f8 94       	cli
    if (!initialized) initialize();
 41a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <initialized>
 41e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <initialized+0x1>
 422:	89 2b       	or	r24, r25
 424:	11 f4       	brne	.+4      	; 0x42a <spawn+0x28>
 426:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <initialize>

    newp = dequeue(&freeQ);
 42a:	8a e2       	ldi	r24, 0x2A	; 42
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 432:	9a 83       	std	Y+2, r25	; 0x02
 434:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 436:	fc 01       	movw	r30, r24
 438:	f1 82       	std	Z+1, r15	; 0x01
 43a:	e0 82       	st	Z, r14
    newp->arg = arg;
 43c:	13 83       	std	Z+3, r17	; 0x03
 43e:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 440:	15 82       	std	Z+5, r1	; 0x05
 442:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 444:	06 96       	adiw	r24, 0x06	; 6
 446:	0e 94 5e 03 	call	0x6bc	; 0x6bc <setjmp>
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	e1 f4       	brne	.+56     	; 0x486 <spawn+0x84>
        ENABLE();
 44e:	78 94       	sei
        current->function(current->arg);
 450:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <current>
 454:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <current+0x1>
 458:	ed 91       	ld	r30, X+
 45a:	fc 91       	ld	r31, X
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	12 96       	adiw	r26, 0x02	; 2
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	13 97       	sbiw	r26, 0x03	; 3
 466:	09 95       	icall
        DISABLE();
 468:	f8 94       	cli
        enqueue(current, &freeQ);
 46a:	6a e2       	ldi	r22, 0x2A	; 42
 46c:	71 e0       	ldi	r23, 0x01	; 1
 46e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 472:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 476:	0e 94 bd 01 	call	0x37a	; 0x37a <enqueue>
        dispatch(dequeue(&readyQ));
 47a:	84 e3       	ldi	r24, 0x34	; 52
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 482:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 486:	e9 81       	ldd	r30, Y+1	; 0x01
 488:	fa 81       	ldd	r31, Y+2	; 0x02
 48a:	36 96       	adiw	r30, 0x06	; 6
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	9a 81       	ldd	r25, Y+2	; 0x02
 490:	87 59       	subi	r24, 0x97	; 151
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	91 8b       	std	Z+17, r25	; 0x11
 496:	80 8b       	std	Z+16, r24	; 0x10
 498:	e9 81       	ldd	r30, Y+1	; 0x01
 49a:	fa 81       	ldd	r31, Y+2	; 0x02
 49c:	91 8f       	std	Z+25, r25	; 0x19
 49e:	80 8f       	std	Z+24, r24	; 0x18

    enqueue(newp, &readyQ);
 4a0:	64 e3       	ldi	r22, 0x34	; 52
 4a2:	71 e0       	ldi	r23, 0x01	; 1
 4a4:	cf 01       	movw	r24, r30
 4a6:	0e 94 bd 01 	call	0x37a	; 0x37a <enqueue>
    ENABLE();
 4aa:	78 94       	sei
}
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <yield>:

void yield(void) {
	if(readyQ!=NULL){
 4be:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <readyQ>
 4c2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <readyQ+0x1>
 4c6:	89 2b       	or	r24, r25
 4c8:	71 f0       	breq	.+28     	; 0x4e6 <yield+0x28>
		// Pluck the first thread from the queue
		// Enqueue the thread that was plucked
		enqueue(current,&readyQ);
 4ca:	64 e3       	ldi	r22, 0x34	; 52
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 4d2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 4d6:	0e 94 bd 01 	call	0x37a	; 0x37a <enqueue>
		// Dequeue and execute next thread
		dispatch(dequeue(&readyQ));
 4da:	84 e3       	ldi	r24, 0x34	; 52
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 4e2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dispatch>
 4e6:	08 95       	ret

000004e8 <__vector_3>:
	}
}


ISR(PCINT1_vect) {
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	af 93       	push	r26
 504:	bf 93       	push	r27
 506:	ef 93       	push	r30
 508:	ff 93       	push	r31
	// Yield only on press, not release
	if(0==(PINB&(1<<7))>>7)
 50a:	1f 9b       	sbis	0x03, 7	; 3
		yield();	
 50c:	0e 94 5f 02 	call	0x4be	; 0x4be <yield>
}
 510:	ff 91       	pop	r31
 512:	ef 91       	pop	r30
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	0f 90       	pop	r0
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	0f 90       	pop	r0
 52e:	1f 90       	pop	r1
 530:	18 95       	reti

00000532 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	volatile uint16_t * timer = (uint16_t *)0x84;
	*timer = 0;
 554:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 558:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	yield();
 55c:	0e 94 5f 02 	call	0x4be	; 0x4be <yield>
}
 560:	ff 91       	pop	r31
 562:	ef 91       	pop	r30
 564:	bf 91       	pop	r27
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <lock>:

void lock(mutex *m) {
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	00 d0       	rcall	.+0      	; 0x588 <lock+0x6>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
	DISABLE();
 58c:	f8 94       	cli
	if(m->locked==0){
 58e:	fc 01       	movw	r30, r24
 590:	20 81       	ld	r18, Z
 592:	31 81       	ldd	r19, Z+1	; 0x01
 594:	23 2b       	or	r18, r19
 596:	29 f4       	brne	.+10     	; 0x5a2 <lock+0x20>
		// Mutex is free, just lock and return
		m->locked = 1;
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	31 83       	std	Z+1, r19	; 0x01
 59e:	20 83       	st	Z, r18
 5a0:	1c c0       	rjmp	.+56     	; 0x5da <lock+0x58>
	}
	else{
		// Mutex is not free, wait until it is free
		enqueue(current,&(m->waitQ));
 5a2:	bc 01       	movw	r22, r24
 5a4:	6e 5f       	subi	r22, 0xFE	; 254
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 5ac:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 5b0:	0e 94 bd 01 	call	0x37a	; 0x37a <enqueue>
		if(readyQ!=NULL)
 5b4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <readyQ>
 5b8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <readyQ+0x1>
 5bc:	89 2b       	or	r24, r25
 5be:	39 f0       	breq	.+14     	; 0x5ce <lock+0x4c>
			dispatch(dequeue(&readyQ));
 5c0:	84 e3       	ldi	r24, 0x34	; 52
 5c2:	91 e0       	ldi	r25, 0x01	; 1
 5c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 5c8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dispatch>
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <lock+0x58>
		else{
			volatile int i = 0;
 5ce:	1a 82       	std	Y+2, r1	; 0x02
 5d0:	19 82       	std	Y+1, r1	; 0x01
			while(i!=1);			// Deadlocked because of mutex
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	9a 81       	ldd	r25, Y+2	; 0x02
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <lock+0x50>
		}
	}	
	ENABLE();
 5da:	78 94       	sei
}
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <unlock>:

void unlock(mutex *m) {
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
	DISABLE();
 5ea:	f8 94       	cli
	if(m->locked!=0){
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 81       	ld	r18, Z
 5f0:	31 81       	ldd	r19, Z+1	; 0x01
 5f2:	23 2b       	or	r18, r19
 5f4:	f1 f0       	breq	.+60     	; 0x632 <unlock+0x4c>
 5f6:	ec 01       	movw	r28, r24
		enqueue(current,&readyQ);
 5f8:	64 e3       	ldi	r22, 0x34	; 52
 5fa:	71 e0       	ldi	r23, 0x01	; 1
 5fc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 600:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 604:	0e 94 bd 01 	call	0x37a	; 0x37a <enqueue>
		if(m->waitQ!=NULL){
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	9b 81       	ldd	r25, Y+3	; 0x03
 60c:	89 2b       	or	r24, r25
 60e:	41 f0       	breq	.+16     	; 0x620 <unlock+0x3a>
			ENABLE();
 610:	78 94       	sei
			dispatch(dequeue(&(m->waitQ)));
 612:	ce 01       	movw	r24, r28
 614:	02 96       	adiw	r24, 0x02	; 2
 616:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 61a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dispatch>
 61e:	09 c0       	rjmp	.+18     	; 0x632 <unlock+0x4c>
		}
		else{
			m->locked = 0;
 620:	19 82       	std	Y+1, r1	; 0x01
 622:	18 82       	st	Y, r1
			ENABLE();
 624:	78 94       	sei
			dispatch(dequeue(&readyQ));
 626:	84 e3       	ldi	r24, 0x34	; 52
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <dequeue>
 62e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dispatch>
		}
	}
	ENABLE();
 632:	78 94       	sei
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <__divmodsi4>:
 63a:	05 2e       	mov	r0, r21
 63c:	97 fb       	bst	r25, 7
 63e:	1e f4       	brtc	.+6      	; 0x646 <__divmodsi4+0xc>
 640:	00 94       	com	r0
 642:	0e 94 34 03 	call	0x668	; 0x668 <__negsi2>
 646:	57 fd       	sbrc	r21, 7
 648:	07 d0       	rcall	.+14     	; 0x658 <__divmodsi4_neg2>
 64a:	0e 94 3c 03 	call	0x678	; 0x678 <__udivmodsi4>
 64e:	07 fc       	sbrc	r0, 7
 650:	03 d0       	rcall	.+6      	; 0x658 <__divmodsi4_neg2>
 652:	4e f4       	brtc	.+18     	; 0x666 <__divmodsi4_exit>
 654:	0c 94 34 03 	jmp	0x668	; 0x668 <__negsi2>

00000658 <__divmodsi4_neg2>:
 658:	50 95       	com	r21
 65a:	40 95       	com	r20
 65c:	30 95       	com	r19
 65e:	21 95       	neg	r18
 660:	3f 4f       	sbci	r19, 0xFF	; 255
 662:	4f 4f       	sbci	r20, 0xFF	; 255
 664:	5f 4f       	sbci	r21, 0xFF	; 255

00000666 <__divmodsi4_exit>:
 666:	08 95       	ret

00000668 <__negsi2>:
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__udivmodsi4>:
 678:	a1 e2       	ldi	r26, 0x21	; 33
 67a:	1a 2e       	mov	r1, r26
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	fd 01       	movw	r30, r26
 682:	0d c0       	rjmp	.+26     	; 0x69e <__udivmodsi4_ep>

00000684 <__udivmodsi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	ee 1f       	adc	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	a2 17       	cp	r26, r18
 68e:	b3 07       	cpc	r27, r19
 690:	e4 07       	cpc	r30, r20
 692:	f5 07       	cpc	r31, r21
 694:	20 f0       	brcs	.+8      	; 0x69e <__udivmodsi4_ep>
 696:	a2 1b       	sub	r26, r18
 698:	b3 0b       	sbc	r27, r19
 69a:	e4 0b       	sbc	r30, r20
 69c:	f5 0b       	sbc	r31, r21

0000069e <__udivmodsi4_ep>:
 69e:	66 1f       	adc	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	1a 94       	dec	r1
 6a8:	69 f7       	brne	.-38     	; 0x684 <__udivmodsi4_loop>
 6aa:	60 95       	com	r22
 6ac:	70 95       	com	r23
 6ae:	80 95       	com	r24
 6b0:	90 95       	com	r25
 6b2:	9b 01       	movw	r18, r22
 6b4:	ac 01       	movw	r20, r24
 6b6:	bd 01       	movw	r22, r26
 6b8:	cf 01       	movw	r24, r30
 6ba:	08 95       	ret

000006bc <setjmp>:
 6bc:	dc 01       	movw	r26, r24
 6be:	2d 92       	st	X+, r2
 6c0:	3d 92       	st	X+, r3
 6c2:	4d 92       	st	X+, r4
 6c4:	5d 92       	st	X+, r5
 6c6:	6d 92       	st	X+, r6
 6c8:	7d 92       	st	X+, r7
 6ca:	8d 92       	st	X+, r8
 6cc:	9d 92       	st	X+, r9
 6ce:	ad 92       	st	X+, r10
 6d0:	bd 92       	st	X+, r11
 6d2:	cd 92       	st	X+, r12
 6d4:	dd 92       	st	X+, r13
 6d6:	ed 92       	st	X+, r14
 6d8:	fd 92       	st	X+, r15
 6da:	0d 93       	st	X+, r16
 6dc:	1d 93       	st	X+, r17
 6de:	cd 93       	st	X+, r28
 6e0:	dd 93       	st	X+, r29
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	8d b7       	in	r24, 0x3d	; 61
 6e8:	8d 93       	st	X+, r24
 6ea:	8e b7       	in	r24, 0x3e	; 62
 6ec:	8d 93       	st	X+, r24
 6ee:	8f b7       	in	r24, 0x3f	; 63
 6f0:	8d 93       	st	X+, r24
 6f2:	ed 93       	st	X+, r30
 6f4:	fd 93       	st	X+, r31
 6f6:	88 27       	eor	r24, r24
 6f8:	99 27       	eor	r25, r25
 6fa:	09 94       	ijmp

000006fc <longjmp>:
 6fc:	dc 01       	movw	r26, r24
 6fe:	cb 01       	movw	r24, r22
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	91 05       	cpc	r25, r1
 704:	81 1d       	adc	r24, r1
 706:	2d 90       	ld	r2, X+
 708:	3d 90       	ld	r3, X+
 70a:	4d 90       	ld	r4, X+
 70c:	5d 90       	ld	r5, X+
 70e:	6d 90       	ld	r6, X+
 710:	7d 90       	ld	r7, X+
 712:	8d 90       	ld	r8, X+
 714:	9d 90       	ld	r9, X+
 716:	ad 90       	ld	r10, X+
 718:	bd 90       	ld	r11, X+
 71a:	cd 90       	ld	r12, X+
 71c:	dd 90       	ld	r13, X+
 71e:	ed 90       	ld	r14, X+
 720:	fd 90       	ld	r15, X+
 722:	0d 91       	ld	r16, X+
 724:	1d 91       	ld	r17, X+
 726:	cd 91       	ld	r28, X+
 728:	dd 91       	ld	r29, X+
 72a:	ed 91       	ld	r30, X+
 72c:	fd 91       	ld	r31, X+
 72e:	0d 90       	ld	r0, X+
 730:	f8 94       	cli
 732:	fe bf       	out	0x3e, r31	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	ed bf       	out	0x3d, r30	; 61
 738:	ed 91       	ld	r30, X+
 73a:	fd 91       	ld	r31, X+
 73c:	09 94       	ijmp

0000073e <_exit>:
 73e:	f8 94       	cli

00000740 <__stop_program>:
 740:	ff cf       	rjmp	.-2      	; 0x740 <__stop_program>
