
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000005d0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1b  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b93  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007cb  00000000  00000000  00002272  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  00002a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000579  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000075f  00000000  00000000  000031f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 ed       	ldi	r30, 0xD0	; 208
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  82:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <write_char>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
  8e:	66 30       	cpi	r22, 0x06	; 6
  90:	71 05       	cpc	r23, r1
  92:	d8 f5       	brcc	.+118    	; 0x10a <write_char+0x80>
  94:	75 95       	asr	r23
  96:	67 95       	ror	r22
  98:	fb 01       	movw	r30, r22
  9a:	e4 51       	subi	r30, 0x14	; 20
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	90 ed       	ldi	r25, 0xD0	; 208
  a0:	98 0f       	add	r25, r24
  a2:	9a 30       	cpi	r25, 0x0A	; 10
  a4:	60 f4       	brcc	.+24     	; 0xbe <write_char+0x34>
  a6:	a8 2f       	mov	r26, r24
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	d0 97       	sbiw	r26, 0x30	; 48
  ac:	aa 0f       	add	r26, r26
  ae:	bb 1f       	adc	r27, r27
  b0:	aa 0f       	add	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	a0 50       	subi	r26, 0x00	; 0
  b6:	bf 4f       	sbci	r27, 0xFF	; 255
  b8:	4d 91       	ld	r20, X+
  ba:	5c 91       	ld	r21, X
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <write_char+0x38>
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	1e c0       	rjmp	.+60     	; 0x104 <write_char+0x7a>
  c8:	94 2f       	mov	r25, r20
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	52 95       	swap	r21
  ce:	42 95       	swap	r20
  d0:	4f 70       	andi	r20, 0x0F	; 15
  d2:	45 27       	eor	r20, r21
  d4:	5f 70       	andi	r21, 0x0F	; 15
  d6:	45 27       	eor	r20, r21
  d8:	c0 fd       	sbrc	r28, 0
  da:	07 c0       	rjmp	.+14     	; 0xea <write_char+0x60>
  dc:	80 81       	ld	r24, Z
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <write_char+0x74>
  ea:	80 81       	ld	r24, Z
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	80 83       	st	Z, r24
  f0:	60 81       	ld	r22, Z
  f2:	70 e1       	ldi	r23, 0x10	; 16
  f4:	97 9f       	mul	r25, r23
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	86 2b       	or	r24, r22
  fc:	80 83       	st	Z, r24
  fe:	35 96       	adiw	r30, 0x05	; 5
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	31 05       	cpc	r19, r1
 108:	fc f2       	brlt	.-66     	; 0xc8 <write_char+0x3e>
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <write_string>:
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	8c 01       	movw	r16, r24
 118:	cb 01       	movw	r24, r22
 11a:	65 e0       	ldi	r22, 0x05	; 5
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 122:	ec 01       	movw	r28, r24
 124:	0c c0       	rjmp	.+24     	; 0x13e <write_string+0x30>
 126:	be 01       	movw	r22, r28
 128:	0e 94 45 00 	call	0x8a	; 0x8a <write_char>
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	65 e0       	ldi	r22, 0x05	; 5
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 138:	ec 01       	movw	r28, r24
 13a:	0f 5f       	subi	r16, 0xFF	; 255
 13c:	1f 4f       	sbci	r17, 0xFF	; 255
 13e:	f8 01       	movw	r30, r16
 140:	80 81       	ld	r24, Z
 142:	81 11       	cpse	r24, r1
 144:	f0 cf       	rjmp	.-32     	; 0x126 <write_string+0x18>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <init_lcd>:
 150:	e4 ee       	ldi	r30, 0xE4	; 228
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 83       	st	Z, r24
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
 160:	80 81       	ld	r24, Z
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	80 83       	st	Z, r24
 166:	80 81       	ld	r24, Z
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	80 83       	st	Z, r24
 16c:	e5 ee       	ldi	r30, 0xE5	; 229
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 83       	st	Z, r24
 176:	80 81       	ld	r24, Z
 178:	8f 7b       	andi	r24, 0xBF	; 191
 17a:	80 83       	st	Z, r24
 17c:	80 81       	ld	r24, Z
 17e:	80 63       	ori	r24, 0x30	; 48
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	87 60       	ori	r24, 0x07	; 7
 186:	80 83       	st	Z, r24
 188:	e6 ee       	ldi	r30, 0xE6	; 230
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8f 78       	andi	r24, 0x8F	; 143
 190:	80 83       	st	Z, r24
 192:	80 81       	ld	r24, Z
 194:	87 60       	ori	r24, 0x07	; 7
 196:	80 83       	st	Z, r24
 198:	e7 ee       	ldi	r30, 0xE7	; 231
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	8f 71       	andi	r24, 0x1F	; 31
 1a0:	80 83       	st	Z, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	8f 60       	ori	r24, 0x0F	; 15
 1a6:	80 83       	st	Z, r24
 1a8:	08 95       	ret

000001aa <write_long>:
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	2c 97       	sbiw	r28, 0x0c	; 12
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	ae 01       	movw	r20, r28
 1c0:	4f 5f       	subi	r20, 0xFF	; 255
 1c2:	5f 4f       	sbci	r21, 0xFF	; 255
 1c4:	0e 94 37 02 	call	0x46e	; 0x46e <six_least_significant>
 1c8:	be 01       	movw	r22, r28
 1ca:	6d 5f       	subi	r22, 0xFD	; 253
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <int_to_str>
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	ce 01       	movw	r24, r28
 1dc:	03 96       	adiw	r24, 0x03	; 3
 1de:	0e 94 87 00 	call	0x10e	; 0x10e <write_string>
 1e2:	2c 96       	adiw	r28, 0x0c	; 12
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <is_prime>:
 1f4:	8f 92       	push	r8
 1f6:	9f 92       	push	r9
 1f8:	af 92       	push	r10
 1fa:	bf 92       	push	r11
 1fc:	cf 92       	push	r12
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	4b 01       	movw	r8, r22
 206:	5c 01       	movw	r10, r24
 208:	84 e0       	ldi	r24, 0x04	; 4
 20a:	88 16       	cp	r8, r24
 20c:	91 04       	cpc	r9, r1
 20e:	a1 04       	cpc	r10, r1
 210:	b1 04       	cpc	r11, r1
 212:	0c f1       	brlt	.+66     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 214:	80 fe       	sbrs	r8, 0
 216:	22 c0       	rjmp	.+68     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 218:	0f 2e       	mov	r0, r31
 21a:	f3 e0       	ldi	r31, 0x03	; 3
 21c:	cf 2e       	mov	r12, r31
 21e:	d1 2c       	mov	r13, r1
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
 224:	f0 2d       	mov	r31, r0
 226:	0f c0       	rjmp	.+30     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	a7 01       	movw	r20, r14
 22e:	96 01       	movw	r18, r12
 230:	0e 94 91 02 	call	0x522	; 0x522 <__divmodsi4>
 234:	67 2b       	or	r22, r23
 236:	68 2b       	or	r22, r24
 238:	69 2b       	or	r22, r25
 23a:	99 f0       	breq	.+38     	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	c8 1a       	sub	r12, r24
 240:	d8 0a       	sbc	r13, r24
 242:	e8 0a       	sbc	r14, r24
 244:	f8 0a       	sbc	r15, r24
 246:	c8 14       	cp	r12, r8
 248:	d9 04       	cpc	r13, r9
 24a:	ea 04       	cpc	r14, r10
 24c:	fb 04       	cpc	r15, r11
 24e:	64 f3       	brlt	.-40     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	08 c0       	rjmp	.+16     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	05 c0       	rjmp	.+10     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	df 90       	pop	r13
 26c:	cf 90       	pop	r12
 26e:	bf 90       	pop	r11
 270:	af 90       	pop	r10
 272:	9f 90       	pop	r9
 274:	8f 90       	pop	r8
 276:	08 95       	ret

00000278 <toggle_led_2>:




void toggle_led_2(){
	if((LCDDR8&1)== 0)
 278:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 27c:	80 fd       	sbrc	r24, 0
 27e:	06 c0       	rjmp	.+12     	; 0x28c <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 280:	e4 ef       	ldi	r30, 0xF4	; 244
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	81 60       	ori	r24, 0x01	; 1
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret
	else
	LCDDR8= LCDDR8^1;
 28c:	e4 ef       	ldi	r30, 0xF4	; 244
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	90 81       	ld	r25, Z
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	89 27       	eor	r24, r25
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 29a:	e1 e6       	ldi	r30, 0x61	; 97
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	80 83       	st	Z, r24
 2a2:	10 82       	st	Z, r1
 2a4:	e1 e8       	ldi	r30, 0x81	; 129
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	84 60       	ori	r24, 0x04	; 4
 2ac:	80 83       	st	Z, r24
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	85 b9       	out	0x05, r24	; 5
 2b4:	08 95       	ret

000002b6 <next_prime>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	88 81       	ld	r24, Y
 2be:	99 81       	ldd	r25, Y+1	; 0x01
 2c0:	aa 81       	ldd	r26, Y+2	; 0x02
 2c2:	bb 81       	ldd	r27, Y+3	; 0x03
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	91 05       	cpc	r25, r1
 2c8:	a1 05       	cpc	r26, r1
 2ca:	b1 05       	cpc	r27, r1
 2cc:	64 f0       	brlt	.+24     	; 0x2e6 <next_prime+0x30>
 2ce:	80 fd       	sbrc	r24, 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <next_prime+0x20>
 2d2:	24 96       	adiw	r28, 0x04	; 4
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <next_prime+0x32>
 2d6:	02 96       	adiw	r24, 0x02	; 2
 2d8:	a1 1d       	adc	r26, r1
 2da:	b1 1d       	adc	r27, r1
 2dc:	88 83       	st	Y, r24
 2de:	99 83       	std	Y+1, r25	; 0x01
 2e0:	aa 83       	std	Y+2, r26	; 0x02
 2e2:	bb 83       	std	Y+3, r27	; 0x03
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <next_prime+0x32>
 2e6:	24 96       	adiw	r28, 0x04	; 4
 2e8:	68 81       	ld	r22, Y
 2ea:	79 81       	ldd	r23, Y+1	; 0x01
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	9b 81       	ldd	r25, Y+3	; 0x03
 2f0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <is_prime>
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	11 f7       	brne	.-60     	; 0x2bc <next_prime+0x6>
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <toggle_button_2>:
		}
	}

}
void toggle_button_2(){
	if((LCDDR13&1)== 1){
 2fe:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 302:	80 ff       	sbrs	r24, 0
 304:	0c c0       	rjmp	.+24     	; 0x31e <toggle_button_2+0x20>
		LCDDR13 = LCDDR13^1;
 306:	e9 ef       	ldi	r30, 0xF9	; 249
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	90 81       	ld	r25, Z
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	89 27       	eor	r24, r25
 310:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 312:	ee ef       	ldi	r30, 0xFE	; 254
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	81 60       	ori	r24, 0x01	; 1
 31a:	80 83       	st	Z, r24
 31c:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 31e:	e9 ef       	ldi	r30, 0xF9	; 249
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	81 60       	ori	r24, 0x01	; 1
 326:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 328:	ee ef       	ldi	r30, 0xFE	; 254
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	90 81       	ld	r25, Z
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	89 27       	eor	r24, r25
 332:	80 83       	st	Z, r24
 334:	08 95       	ret

00000336 <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	ec 01       	movw	r28, r24
 344:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 346:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 34a:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	// Catches wrap around condition
	if( time >= target_time && !(( prev_time > target_time && time > prev_time ) || time < target_time ))
 34e:	e8 16       	cp	r14, r24
 350:	f9 06       	cpc	r15, r25
 352:	60 f0       	brcs	.+24     	; 0x36c <check_interrupts+0x36>
 354:	86 17       	cp	r24, r22
 356:	97 07       	cpc	r25, r23
 358:	18 f4       	brcc	.+6      	; 0x360 <check_interrupts+0x2a>
 35a:	6e 15       	cp	r22, r14
 35c:	7f 05       	cpc	r23, r15
 35e:	30 f0       	brcs	.+12     	; 0x36c <check_interrupts+0x36>
 360:	ec 16       	cp	r14, r28
 362:	fd 06       	cpc	r15, r29
 364:	18 f0       	brcs	.+6      	; 0x36c <check_interrupts+0x36>
	{	
		target_time=time;
		toggle_led_2();
 366:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_led_2>
	uint16_t time = (uint16_t)TCNT1;
	
	// Catches wrap around condition
	if( time >= target_time && !(( prev_time > target_time && time > prev_time ) || time < target_time ))
	{	
		target_time=time;
 36a:	e7 01       	movw	r28, r14
		toggle_led_2();
	}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 36c:	1f 99       	sbic	0x03, 7	; 3
 36e:	0f c0       	rjmp	.+30     	; 0x38e <check_interrupts+0x58>
	{
		if(*buttonstate==0){
 370:	f8 01       	movw	r30, r16
 372:	80 81       	ld	r24, Z
 374:	81 11       	cpse	r24, r1
 376:	02 c0       	rjmp	.+4      	; 0x37c <check_interrupts+0x46>
			*buttonstate=1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 83       	st	Z, r24
		}
		
		if(*buttonstate == 2){
 37c:	f8 01       	movw	r30, r16
 37e:	80 81       	ld	r24, Z
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	59 f4       	brne	.+22     	; 0x39a <check_interrupts+0x64>
			toggle_button_2();
 384:	0e 94 7f 01 	call	0x2fe	; 0x2fe <toggle_button_2>
			*buttonstate = 0;
 388:	f8 01       	movw	r30, r16
 38a:	10 82       	st	Z, r1
 38c:	06 c0       	rjmp	.+12     	; 0x39a <check_interrupts+0x64>
		}
	}
	else if(*buttonstate == 1){
 38e:	f8 01       	movw	r30, r16
 390:	80 81       	ld	r24, Z
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	11 f4       	brne	.+4      	; 0x39a <check_interrupts+0x64>
		*buttonstate =2 ;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
		
}
 39a:	ce 01       	movw	r24, r28
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	08 95       	ret

000003aa <task_4>:


void task_4(void){
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	29 97       	sbiw	r28, 0x09	; 9
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
	LCDDR13 = LCDDR13|1;
 3be:	e9 ef       	ldi	r30, 0xF9	; 249
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	80 81       	ld	r24, Z
 3c4:	81 60       	ori	r24, 0x01	; 1
 3c6:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 3cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3d0:	87 5f       	subi	r24, 0xF7	; 247
 3d2:	92 4c       	sbci	r25, 0xC2	; 194
 3d4:	9a 83       	std	Y+2, r25	; 0x02
 3d6:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggered, useful to look for overflows
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	9a 81       	ldd	r25, Y+2	; 0x02
 3dc:	89 50       	subi	r24, 0x09	; 9
 3de:	9d 43       	sbci	r25, 0x3D	; 61
 3e0:	9c 83       	std	Y+4, r25	; 0x04
 3e2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	8d 83       	std	Y+5, r24	; 0x05
	long num = 1;												// Last number checked
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a0 e0       	ldi	r26, 0x00	; 0
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	8e 83       	std	Y+6, r24	; 0x06
 3f2:	9f 83       	std	Y+7, r25	; 0x07
 3f4:	a8 87       	std	Y+8, r26	; 0x08
 3f6:	b9 87       	std	Y+9, r27	; 0x09
    
	while(1) 
    {	
		// Calculate the next prime
		next_prime(&num);
 3f8:	ce 01       	movw	r24, r28
 3fa:	06 96       	adiw	r24, 0x06	; 6
 3fc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <next_prime>
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 400:	6b 81       	ldd	r22, Y+3	; 0x03
 402:	7c 81       	ldd	r23, Y+4	; 0x04
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	9a 81       	ldd	r25, Y+2	; 0x02
 408:	ae 01       	movw	r20, r28
 40a:	4b 5f       	subi	r20, 0xFB	; 251
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	0e 94 9b 01 	call	0x336	; 0x336 <check_interrupts>
 412:	29 81       	ldd	r18, Y+1	; 0x01
 414:	3a 81       	ldd	r19, Y+2	; 0x02
 416:	82 17       	cp	r24, r18
 418:	93 07       	cpc	r25, r19
 41a:	51 f0       	breq	.+20     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	9c 83       	std	Y+4, r25	; 0x04
 422:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 424:	89 81       	ldd	r24, Y+1	; 0x01
 426:	9a 81       	ldd	r25, Y+2	; 0x02
 428:	87 5f       	subi	r24, 0xF7	; 247
 42a:	92 4c       	sbci	r25, 0xC2	; 194
 42c:	9a 83       	std	Y+2, r25	; 0x02
 42e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		
		write_long(num);
 430:	6e 81       	ldd	r22, Y+6	; 0x06
 432:	7f 81       	ldd	r23, Y+7	; 0x07
 434:	88 85       	ldd	r24, Y+8	; 0x08
 436:	99 85       	ldd	r25, Y+9	; 0x09
 438:	0e 94 d5 00 	call	0x1aa	; 0x1aa <write_long>
    }
 43c:	dd cf       	rjmp	.-70     	; 0x3f8 <task_4+0x4e>

0000043e <main>:
}

int main(void)
{
	init();
 43e:	0e 94 4d 01 	call	0x29a	; 0x29a <init>
	init_lcd();
 442:	0e 94 a8 00 	call	0x150	; 0x150 <init_lcd>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 446:	0e 94 d5 01 	call	0x3aa	; 0x3aa <task_4>

0000044a <revese>:

void revese(char* str){
 44a:	dc 01       	movw	r26, r24
	char * eos = str;
 44c:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 44e:	01 c0       	rjmp	.+2      	; 0x452 <revese+0x8>
	eos++;
 450:	31 96       	adiw	r30, 0x01	; 1

void revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 452:	80 81       	ld	r24, Z
 454:	81 11       	cpse	r24, r1
 456:	fc cf       	rjmp	.-8      	; 0x450 <revese+0x6>
	eos++;
	eos--;
 458:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 45a:	05 c0       	rjmp	.+10     	; 0x466 <revese+0x1c>
		char temp = *eos;
 45c:	80 81       	ld	r24, Z
		*eos = *str;
 45e:	9c 91       	ld	r25, X
 460:	90 83       	st	Z, r25
		*str = temp;
 462:	8d 93       	st	X+, r24
		eos--;
 464:	31 97       	sbiw	r30, 0x01	; 1
void revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 466:	ea 17       	cp	r30, r26
 468:	fb 07       	cpc	r31, r27
 46a:	c0 f7       	brcc	.-16     	; 0x45c <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 46c:	08 95       	ret

0000046e <six_least_significant>:
void six_least_significant(long num,int *ret){
 46e:	cf 92       	push	r12
 470:	df 92       	push	r13
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	6b 01       	movw	r12, r22
 47c:	7c 01       	movw	r14, r24
 47e:	ea 01       	movw	r28, r20
	*ret = (int)(num-(num/1000000)*1000000);
 480:	20 e4       	ldi	r18, 0x40	; 64
 482:	32 e4       	ldi	r19, 0x42	; 66
 484:	4f e0       	ldi	r20, 0x0F	; 15
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 91 02 	call	0x522	; 0x522 <__divmodsi4>
 48c:	60 e4       	ldi	r22, 0x40	; 64
 48e:	72 e4       	ldi	r23, 0x42	; 66
 490:	26 9f       	mul	r18, r22
 492:	c0 01       	movw	r24, r0
 494:	27 9f       	mul	r18, r23
 496:	90 0d       	add	r25, r0
 498:	36 9f       	mul	r19, r22
 49a:	90 0d       	add	r25, r0
 49c:	11 24       	eor	r1, r1
 49e:	c8 1a       	sub	r12, r24
 4a0:	d9 0a       	sbc	r13, r25
 4a2:	d9 82       	std	Y+1, r13	; 0x01
 4a4:	c8 82       	st	Y, r12
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	ff 90       	pop	r15
 4ac:	ef 90       	pop	r14
 4ae:	df 90       	pop	r13
 4b0:	cf 90       	pop	r12
 4b2:	08 95       	ret

000004b4 <int_to_str>:
void int_to_str(int num,char* buffer){
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	eb 01       	movw	r28, r22
	if (num == 0){
 4ba:	00 97       	sbiw	r24, 0x00	; 0
 4bc:	a1 f4       	brne	.+40     	; 0x4e6 <int_to_str+0x32>
		*buffer = 48;
 4be:	80 e3       	ldi	r24, 0x30	; 48
 4c0:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 4c2:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <int_to_str+0x40>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 4c6:	28 2f       	mov	r18, r24
 4c8:	6a e0       	ldi	r22, 0x0A	; 10
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__divmodhi4>
 4d0:	86 2f       	mov	r24, r22
 4d2:	97 2f       	mov	r25, r23
 4d4:	66 0f       	add	r22, r22
 4d6:	36 2f       	mov	r19, r22
 4d8:	33 0f       	add	r19, r19
 4da:	33 0f       	add	r19, r19
 4dc:	63 0f       	add	r22, r19
 4de:	26 1b       	sub	r18, r22
 4e0:	20 5d       	subi	r18, 0xD0	; 208
 4e2:	21 93       	st	Z+, r18
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <int_to_str+0x34>
 4e6:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 4e8:	00 97       	sbiw	r24, 0x00	; 0
 4ea:	69 f7       	brne	.-38     	; 0x4c6 <int_to_str+0x12>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 4ec:	10 82       	st	Z, r1
	revese(start);
 4ee:	ce 01       	movw	r24, r28
 4f0:	0e 94 25 02 	call	0x44a	; 0x44a <revese>
	return 0;
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <__divmodhi4>:
 4fa:	97 fb       	bst	r25, 7
 4fc:	07 2e       	mov	r0, r23
 4fe:	16 f4       	brtc	.+4      	; 0x504 <__stack+0x5>
 500:	00 94       	com	r0
 502:	07 d0       	rcall	.+14     	; 0x512 <__divmodhi4_neg1>
 504:	77 fd       	sbrc	r23, 7
 506:	09 d0       	rcall	.+18     	; 0x51a <__divmodhi4_neg2>
 508:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 50c:	07 fc       	sbrc	r0, 7
 50e:	05 d0       	rcall	.+10     	; 0x51a <__divmodhi4_neg2>
 510:	3e f4       	brtc	.+14     	; 0x520 <__divmodhi4_exit>

00000512 <__divmodhi4_neg1>:
 512:	90 95       	com	r25
 514:	81 95       	neg	r24
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	08 95       	ret

0000051a <__divmodhi4_neg2>:
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255

00000520 <__divmodhi4_exit>:
 520:	08 95       	ret

00000522 <__divmodsi4>:
 522:	05 2e       	mov	r0, r21
 524:	97 fb       	bst	r25, 7
 526:	1e f4       	brtc	.+6      	; 0x52e <__divmodsi4+0xc>
 528:	00 94       	com	r0
 52a:	0e 94 a8 02 	call	0x550	; 0x550 <__negsi2>
 52e:	57 fd       	sbrc	r21, 7
 530:	07 d0       	rcall	.+14     	; 0x540 <__divmodsi4_neg2>
 532:	0e 94 c4 02 	call	0x588	; 0x588 <__udivmodsi4>
 536:	07 fc       	sbrc	r0, 7
 538:	03 d0       	rcall	.+6      	; 0x540 <__divmodsi4_neg2>
 53a:	4e f4       	brtc	.+18     	; 0x54e <__divmodsi4_exit>
 53c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__negsi2>

00000540 <__divmodsi4_neg2>:
 540:	50 95       	com	r21
 542:	40 95       	com	r20
 544:	30 95       	com	r19
 546:	21 95       	neg	r18
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	4f 4f       	sbci	r20, 0xFF	; 255
 54c:	5f 4f       	sbci	r21, 0xFF	; 255

0000054e <__divmodsi4_exit>:
 54e:	08 95       	ret

00000550 <__negsi2>:
 550:	90 95       	com	r25
 552:	80 95       	com	r24
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__udivmodhi4>:
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	51 e1       	ldi	r21, 0x11	; 17
 566:	07 c0       	rjmp	.+14     	; 0x576 <__udivmodhi4_ep>

00000568 <__udivmodhi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	a6 17       	cp	r26, r22
 56e:	b7 07       	cpc	r27, r23
 570:	10 f0       	brcs	.+4      	; 0x576 <__udivmodhi4_ep>
 572:	a6 1b       	sub	r26, r22
 574:	b7 0b       	sbc	r27, r23

00000576 <__udivmodhi4_ep>:
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	5a 95       	dec	r21
 57c:	a9 f7       	brne	.-22     	; 0x568 <__udivmodhi4_loop>
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	bc 01       	movw	r22, r24
 584:	cd 01       	movw	r24, r26
 586:	08 95       	ret

00000588 <__udivmodsi4>:
 588:	a1 e2       	ldi	r26, 0x21	; 33
 58a:	1a 2e       	mov	r1, r26
 58c:	aa 1b       	sub	r26, r26
 58e:	bb 1b       	sub	r27, r27
 590:	fd 01       	movw	r30, r26
 592:	0d c0       	rjmp	.+26     	; 0x5ae <__udivmodsi4_ep>

00000594 <__udivmodsi4_loop>:
 594:	aa 1f       	adc	r26, r26
 596:	bb 1f       	adc	r27, r27
 598:	ee 1f       	adc	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	a2 17       	cp	r26, r18
 59e:	b3 07       	cpc	r27, r19
 5a0:	e4 07       	cpc	r30, r20
 5a2:	f5 07       	cpc	r31, r21
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <__udivmodsi4_ep>
 5a6:	a2 1b       	sub	r26, r18
 5a8:	b3 0b       	sbc	r27, r19
 5aa:	e4 0b       	sbc	r30, r20
 5ac:	f5 0b       	sbc	r31, r21

000005ae <__udivmodsi4_ep>:
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	1a 94       	dec	r1
 5b8:	69 f7       	brne	.-38     	; 0x594 <__udivmodsi4_loop>
 5ba:	60 95       	com	r22
 5bc:	70 95       	com	r23
 5be:	80 95       	com	r24
 5c0:	90 95       	com	r25
 5c2:	9b 01       	movw	r18, r22
 5c4:	ac 01       	movw	r20, r24
 5c6:	bd 01       	movw	r22, r26
 5c8:	cf 01       	movw	r24, r30
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
