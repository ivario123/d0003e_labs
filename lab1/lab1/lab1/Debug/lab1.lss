
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbc  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9a  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d1  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000565  00000000  00000000  00002a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e4       	ldi	r30, 0x4C	; 76
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  82:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <toggle_led_2>:




void toggle_led_2(){
	if((LCDDR8&1)== 0)
  e4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  e8:	80 fd       	sbrc	r24, 0
  ea:	06 c0       	rjmp	.+12     	; 0xf8 <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
  ec:	e4 ef       	ldi	r30, 0xF4	; 244
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret
	else
	LCDDR8= LCDDR8^1;
  f8:	e4 ef       	ldi	r30, 0xF4	; 244
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	89 27       	eor	r24, r25
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 106:	e1 e6       	ldi	r30, 0x61	; 97
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
 10e:	10 82       	st	Z, r1
 110:	e1 e8       	ldi	r30, 0x81	; 129
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	85 b9       	out	0x05, r24	; 5
 120:	08 95       	ret

00000122 <toggle_button_2>:
		}
	}

}
void toggle_button_2(){
	if((LCDDR13&1)== 1){
 122:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 126:	80 ff       	sbrs	r24, 0
 128:	0c c0       	rjmp	.+24     	; 0x142 <toggle_button_2+0x20>
		LCDDR13 = LCDDR13^1;
 12a:	e9 ef       	ldi	r30, 0xF9	; 249
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	89 27       	eor	r24, r25
 134:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 136:	ee ef       	ldi	r30, 0xFE	; 254
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
 140:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 142:	e9 ef       	ldi	r30, 0xF9	; 249
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 14c:	ee ef       	ldi	r30, 0xFE	; 254
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	90 81       	ld	r25, Z
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	89 27       	eor	r24, r25
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 166:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 16a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    
    // Catches wrap around condition
	//if(!((prev_time>target_time && time >= prev_time))){
		
	if(target_time <= time)
 16e:	8c 17       	cp	r24, r28
 170:	9d 07       	cpc	r25, r29
 172:	80 f0       	brcs	.+32     	; 0x194 <check_interrupts+0x3a>
		if((prev_time < time && target_time <= time )||(prev_time > time && time > target_time))
 174:	68 17       	cp	r22, r24
 176:	79 07       	cpc	r23, r25
 178:	18 f4       	brcc	.+6      	; 0x180 <check_interrupts+0x26>
 17a:	8c 17       	cp	r24, r28
 17c:	9d 07       	cpc	r25, r29
 17e:	38 f4       	brcc	.+14     	; 0x18e <check_interrupts+0x34>
 180:	86 17       	cp	r24, r22
 182:	97 07       	cpc	r25, r23
 184:	38 f4       	brcc	.+14     	; 0x194 <check_interrupts+0x3a>
 186:	c8 17       	cp	r28, r24
 188:	d9 07       	cpc	r29, r25
 18a:	18 f0       	brcs	.+6      	; 0x192 <check_interrupts+0x38>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <check_interrupts+0x3a>
		{    
			target_time=time;
 18e:	ec 01       	movw	r28, r24
 190:	01 c0       	rjmp	.+2      	; 0x194 <check_interrupts+0x3a>
 192:	ec 01       	movw	r28, r24
		}
	//}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 194:	1f 99       	sbic	0x03, 7	; 3
 196:	0f c0       	rjmp	.+30     	; 0x1b6 <check_interrupts+0x5c>
	{
		if(*buttonstate==0){
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <check_interrupts+0x4a>
			*buttonstate=1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 83       	st	Z, r24
		}
		
		if(*buttonstate == 2){
 1a4:	f8 01       	movw	r30, r16
 1a6:	80 81       	ld	r24, Z
 1a8:	82 30       	cpi	r24, 0x02	; 2
 1aa:	59 f4       	brne	.+22     	; 0x1c2 <check_interrupts+0x68>
			toggle_button_2();
 1ac:	0e 94 91 00 	call	0x122	; 0x122 <toggle_button_2>
			*buttonstate = 0;
 1b0:	f8 01       	movw	r30, r16
 1b2:	10 82       	st	Z, r1
 1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <check_interrupts+0x68>
		}
	}
	else if(*buttonstate == 1){
 1b6:	f8 01       	movw	r30, r16
 1b8:	80 81       	ld	r24, Z
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <check_interrupts+0x68>
		*buttonstate =2 ;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
	
}
 1c2:	ce 01       	movw	r24, r28
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <task_4>:


void task_4(void){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <task_4+0x6>
 1d4:	00 d0       	rcall	.+0      	; 0x1d6 <task_4+0x8>
 1d6:	1f 92       	push	r1
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	LCDDR13 = LCDDR13|1;
 1dc:	e9 ef       	ldi	r30, 0xF9	; 249
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 1e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 1ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 1ee:	87 5f       	subi	r24, 0xF7	; 247
 1f0:	92 4c       	sbci	r25, 0xC2	; 194
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggered, useful to look for overflows
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	89 50       	subi	r24, 0x09	; 9
 1fc:	9d 43       	sbci	r25, 0x3D	; 61
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 200:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	8d 83       	std	Y+5, r24	; 0x05
	while(1)
	{
		// Calculate the next prime
		//next_prime(&num);
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 206:	6b 81       	ldd	r22, Y+3	; 0x03
 208:	7c 81       	ldd	r23, Y+4	; 0x04
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	ae 01       	movw	r20, r28
 210:	4b 5f       	subi	r20, 0xFB	; 251
 212:	5f 4f       	sbci	r21, 0xFF	; 255
 214:	0e 94 ad 00 	call	0x15a	; 0x15a <check_interrupts>
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	3a 81       	ldd	r19, Y+2	; 0x02
 21c:	82 17       	cp	r24, r18
 21e:	93 07       	cpc	r25, r19
 220:	91 f3       	breq	.-28     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
			
			toggle_led_2();
 222:	0e 94 72 00 	call	0xe4	; 0xe4 <toggle_led_2>
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	9c 83       	std	Y+4, r25	; 0x04
 22c:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	87 5f       	subi	r24, 0xF7	; 247
 234:	92 4c       	sbci	r25, 0xC2	; 194
 236:	9a 83       	std	Y+2, r25	; 0x02
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	e5 cf       	rjmp	.-54     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>

0000023c <main>:
	}
}

int main(void)
{
	init();
 23c:	0e 94 83 00 	call	0x106	; 0x106 <init>
	init_lcd();
 240:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 244:	0e 94 e7 00 	call	0x1ce	; 0x1ce <task_4>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
