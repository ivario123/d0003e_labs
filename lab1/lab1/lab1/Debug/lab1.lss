
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000061a  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001164  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c16  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f6  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000029c  00000000  00000000  00002e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c6  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a7e  00000000  00000000  000036fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e1       	ldi	r30, 0x1A	; 26
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 40 02 	call	0x480	; 0x480 <main>
  82:	0c 94 0b 03 	jmp	0x616	; 0x616 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
	if((LCDDR8&1)== 0)
	LCDDR8 = LCDDR8|2;
	else
	LCDDR8= LCDDR8^2;
	return 0;
}
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <is_prime>:
  e8:	8f 92       	push	r8
  ea:	9f 92       	push	r9
  ec:	af 92       	push	r10
  ee:	bf 92       	push	r11
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	4b 01       	movw	r8, r22
  fa:	5c 01       	movw	r10, r24
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	88 16       	cp	r8, r24
 100:	91 04       	cpc	r9, r1
 102:	a1 04       	cpc	r10, r1
 104:	b1 04       	cpc	r11, r1
 106:	64 f1       	brlt	.+88     	; 0x160 <is_prime+0x78>
 108:	80 fe       	sbrs	r8, 0
 10a:	2d c0       	rjmp	.+90     	; 0x166 <is_prime+0x7e>
 10c:	0f 2e       	mov	r0, r31
 10e:	f3 e0       	ldi	r31, 0x03	; 3
 110:	cf 2e       	mov	r12, r31
 112:	d1 2c       	mov	r13, r1
 114:	e1 2c       	mov	r14, r1
 116:	f1 2c       	mov	r15, r1
 118:	f0 2d       	mov	r31, r0
 11a:	0f c0       	rjmp	.+30     	; 0x13a <is_prime+0x52>
 11c:	c5 01       	movw	r24, r10
 11e:	b4 01       	movw	r22, r8
 120:	a7 01       	movw	r20, r14
 122:	96 01       	movw	r18, r12
 124:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodsi4>
 128:	67 2b       	or	r22, r23
 12a:	68 2b       	or	r22, r24
 12c:	69 2b       	or	r22, r25
 12e:	f1 f0       	breq	.+60     	; 0x16c <is_prime+0x84>
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	c8 1a       	sub	r12, r24
 134:	d8 0a       	sbc	r13, r24
 136:	e8 0a       	sbc	r14, r24
 138:	f8 0a       	sbc	r15, r24
 13a:	d5 01       	movw	r26, r10
 13c:	c4 01       	movw	r24, r8
 13e:	bb 20       	and	r11, r11
 140:	1c f4       	brge	.+6      	; 0x148 <is_prime+0x60>
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	a1 1d       	adc	r26, r1
 146:	b1 1d       	adc	r27, r1
 148:	b5 95       	asr	r27
 14a:	a7 95       	ror	r26
 14c:	97 95       	ror	r25
 14e:	87 95       	ror	r24
 150:	c8 16       	cp	r12, r24
 152:	d9 06       	cpc	r13, r25
 154:	ea 06       	cpc	r14, r26
 156:	fb 06       	cpc	r15, r27
 158:	0c f3       	brlt	.-62     	; 0x11c <is_prime+0x34>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 c0       	rjmp	.+16     	; 0x170 <is_prime+0x88>
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <is_prime+0x88>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <is_prime+0x88>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	bf 90       	pop	r11
 17a:	af 90       	pop	r10
 17c:	9f 90       	pop	r9
 17e:	8f 90       	pop	r8
 180:	08 95       	ret

00000182 <toggle_led_2>:
 182:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 186:	80 fd       	sbrc	r24, 0
 188:	06 c0       	rjmp	.+12     	; 0x196 <toggle_led_2+0x14>
 18a:	e4 ef       	ldi	r30, 0xF4	; 244
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 83       	st	Z, r24
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <toggle_led_2+0x20>
 196:	e4 ef       	ldi	r30, 0xF4	; 244
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	90 81       	ld	r25, Z
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	89 27       	eor	r24, r25
 1a0:	80 83       	st	Z, r24
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <write_char_2>:

int write_char_2(char ch, int pos){
 1a8:	cf 93       	push	r28
	if(pos < 0 || pos > 5)
 1aa:	c6 2f       	mov	r28, r22
 1ac:	66 30       	cpi	r22, 0x06	; 6
 1ae:	71 05       	cpc	r23, r1
 1b0:	d8 f5       	brcc	.+118    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
	return 0;
	// Predefine num
	uint16_t num = 0x0;
	uint8_t *first_address = (uint8_t *)0xEC;
	volatile uint8_t *address = first_address+(pos>>1);
 1b2:	75 95       	asr	r23
 1b4:	67 95       	ror	r22
 1b6:	fb 01       	movw	r30, r22
 1b8:	e4 51       	subi	r30, 0x14	; 20
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
	// Clear the segment
	// Set num to a value if exists in array
	if(ch>=48&& ch<=57){
 1bc:	90 ed       	ldi	r25, 0xD0	; 208
 1be:	98 0f       	add	r25, r24
 1c0:	9a 30       	cpi	r25, 0x0A	; 10
 1c2:	60 f4       	brcc	.+24     	; 0x1dc <write_char_2+0x34>
		num = dict_arr[ch-48];
 1c4:	a8 2f       	mov	r26, r24
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	d0 97       	sbiw	r26, 0x30	; 48
 1ca:	aa 0f       	add	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	aa 0f       	add	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	a0 50       	subi	r26, 0x00	; 0
 1d4:	bf 4f       	sbci	r27, 0xFF	; 255
 1d6:	4d 91       	ld	r20, X+
 1d8:	5c 91       	ld	r21, X
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <write_char_2+0x38>

int write_char_2(char ch, int pos){
	if(pos < 0 || pos > 5)
	return 0;
	// Predefine num
	uint16_t num = 0x0;
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	50 e0       	ldi	r21, 0x00	; 0
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	1e c0       	rjmp	.+60     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
	}
	
	
	for( int i= 0; i < 4; i++){
		// Always grab the lowest 4 bits of the char as nibble
		uint8_t nibble = num&0xf;
 1e6:	94 2f       	mov	r25, r20
 1e8:	9f 70       	andi	r25, 0x0F	; 15
		num>>=4;
 1ea:	52 95       	swap	r21
 1ec:	42 95       	swap	r20
 1ee:	4f 70       	andi	r20, 0x0F	; 15
 1f0:	45 27       	eor	r20, r21
 1f2:	5f 70       	andi	r21, 0x0F	; 15
 1f4:	45 27       	eor	r20, r21
		
		
		if(pos%2==0)
 1f6:	c0 fd       	sbrc	r28, 0
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		{
			*address = (*address)&(0xf0);
 1fa:	80 81       	ld	r24, Z
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	80 83       	st	Z, r24
			*address = (*address)|nibble;
 200:	80 81       	ld	r24, Z
 202:	89 2b       	or	r24, r25
 204:	80 83       	st	Z, r24
 206:	0a c0       	rjmp	.+20     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
			// Write the data to the lower bits
		}
		else
		{
			*address = (*address)&(0x0f);
 208:	80 81       	ld	r24, Z
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	80 83       	st	Z, r24
			*address =  *address | (nibble << 4);
 20e:	60 81       	ld	r22, Z
 210:	70 e1       	ldi	r23, 0x10	; 16
 212:	97 9f       	mul	r25, r23
 214:	c0 01       	movw	r24, r0
 216:	11 24       	eor	r1, r1
 218:	86 2b       	or	r24, r22
 21a:	80 83       	st	Z, r24
			// Write the data to the higher bits
		}
		address+=5;
 21c:	35 96       	adiw	r30, 0x05	; 5
	if(ch>=48&& ch<=57){
		num = dict_arr[ch-48];
	}
	
	
	for( int i= 0; i < 4; i++){
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	24 30       	cpi	r18, 0x04	; 4
 224:	31 05       	cpc	r19, r1
 226:	fc f2       	brlt	.-66     	; 0x1e6 <write_char_2+0x3e>
		}
		address+=5;
		
	}
	return success;
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <write_string_2>:



int write_string_2(char * ch, int first_pos){
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	8c 01       	movw	r16, r24
 23a:	cb 01       	movw	r24, r22
	first_pos = first_pos%MAX_POS;
 23c:	65 e0       	ldi	r22, 0x05	; 5
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 244:	ec 01       	movw	r28, r24
	while(*ch != '\0'){
 246:	0c c0       	rjmp	.+24     	; 0x260 <write_string_2+0x30>
		write_char_2(*ch,first_pos);
 248:	be 01       	movw	r22, r28
 24a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <write_char_2>
		first_pos++;
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
		first_pos = first_pos%MAX_POS;
 252:	65 e0       	ldi	r22, 0x05	; 5
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 25a:	ec 01       	movw	r28, r24
		ch++;
 25c:	0f 5f       	subi	r16, 0xFF	; 255
 25e:	1f 4f       	sbci	r17, 0xFF	; 255



int write_string_2(char * ch, int first_pos){
	first_pos = first_pos%MAX_POS;
	while(*ch != '\0'){
 260:	f8 01       	movw	r30, r16
 262:	80 81       	ld	r24, Z
 264:	81 11       	cpse	r24, r1
 266:	f0 cf       	rjmp	.-32     	; 0x248 <write_string_2+0x18>
		first_pos++;
		first_pos = first_pos%MAX_POS;
		ch++;
	}
	return success;
}
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <writeLong_2>:




void writeLong_2(long num){
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2c 97       	sbiw	r28, 0x0c	; 12
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
	int temp;
	six_least_significant(num,&temp);
 28a:	ae 01       	movw	r20, r28
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <six_least_significant>
	char buffer[10];
	int_to_str(temp,buffer);
 294:	be 01       	movw	r22, r28
 296:	6d 5f       	subi	r22, 0xFD	; 253
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <int_to_str>
	write_string_2(buffer,0);
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	03 96       	adiw	r24, 0x03	; 3
 2aa:	0e 94 18 01 	call	0x230	; 0x230 <write_string_2>
}
 2ae:	2c 96       	adiw	r28, 0x0c	; 12
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 2c0:	e1 e6       	ldi	r30, 0x61	; 97
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
 2c8:	10 82       	st	Z, r1
 2ca:	e1 e8       	ldi	r30, 0x81	; 129
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	80 83       	st	Z, r24
 2d4:	85 b1       	in	r24, 0x05	; 5
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	85 b9       	out	0x05, r24	; 5
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

000002e0 <next_prime>:
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	6b 01       	movw	r12, r22
 2ea:	7c 01       	movw	r14, r24
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	c8 16       	cp	r12, r24
 2f0:	d1 04       	cpc	r13, r1
 2f2:	e1 04       	cpc	r14, r1
 2f4:	f1 04       	cpc	r15, r1
 2f6:	74 f0       	brlt	.+28     	; 0x314 <next_prime+0x34>
 2f8:	c0 fc       	sbrc	r12, 0
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <next_prime+0x28>
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	c8 1a       	sub	r12, r24
 300:	d8 0a       	sbc	r13, r24
 302:	e8 0a       	sbc	r14, r24
 304:	f8 0a       	sbc	r15, r24
 306:	0b c0       	rjmp	.+22     	; 0x31e <next_prime+0x3e>
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	c8 0e       	add	r12, r24
 30c:	d1 1c       	adc	r13, r1
 30e:	e1 1c       	adc	r14, r1
 310:	f1 1c       	adc	r15, r1
 312:	05 c0       	rjmp	.+10     	; 0x31e <next_prime+0x3e>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	c8 1a       	sub	r12, r24
 318:	d8 0a       	sbc	r13, r24
 31a:	e8 0a       	sbc	r14, r24
 31c:	f8 0a       	sbc	r15, r24
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 74 00 	call	0xe8	; 0xe8 <is_prime>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	09 f7       	brne	.-62     	; 0x2ec <next_prime+0xc>
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	08 95       	ret

00000338 <toggle_button_2>:
		}
	}

}
void toggle_button_2(){
	if((LCDDR13&1)== 1){
 338:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 33c:	80 ff       	sbrs	r24, 0
 33e:	0c c0       	rjmp	.+24     	; 0x358 <toggle_button_2+0x20>
		LCDDR13 = LCDDR13^1;
 340:	e9 ef       	ldi	r30, 0xF9	; 249
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	90 81       	ld	r25, Z
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	89 27       	eor	r24, r25
 34a:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 34c:	ee ef       	ldi	r30, 0xFE	; 254
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	80 83       	st	Z, r24
 356:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 358:	e9 ef       	ldi	r30, 0xF9	; 249
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 362:	ee ef       	ldi	r30, 0xFE	; 254
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	90 81       	ld	r25, Z
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	89 27       	eor	r24, r25
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <check_interrupts>:
	}
}
int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
 37e:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 380:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 384:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
 388:	8e 15       	cp	r24, r14
 38a:	9f 05       	cpc	r25, r15
 38c:	60 f4       	brcc	.+24     	; 0x3a6 <check_interrupts+0x36>
 38e:	86 17       	cp	r24, r22
 390:	97 07       	cpc	r25, r23
 392:	18 f4       	brcc	.+6      	; 0x39a <check_interrupts+0x2a>
 394:	6e 15       	cp	r22, r14
 396:	7f 05       	cpc	r23, r15
 398:	30 f0       	brcs	.+12     	; 0x3a6 <check_interrupts+0x36>
 39a:	ec 16       	cp	r14, r28
 39c:	fd 06       	cpc	r15, r29
 39e:	18 f0       	brcs	.+6      	; 0x3a6 <check_interrupts+0x36>
	{
		
		target_time=time;
		toggle_led_2();
 3a0:	0e 94 c1 00 	call	0x182	; 0x182 <toggle_led_2>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
	{
		
		target_time=time;
 3a4:	e7 01       	movw	r28, r14
		toggle_led_2();
	}
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 3a6:	1f 99       	sbic	0x03, 7	; 3
 3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <check_interrupts+0x58>
	{
		if(*buttonstate==0){
 3aa:	f8 01       	movw	r30, r16
 3ac:	80 81       	ld	r24, Z
 3ae:	81 11       	cpse	r24, r1
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <check_interrupts+0x46>
			*buttonstate=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 83       	st	Z, r24
		}
		
		if(*buttonstate == 2){
 3b6:	f8 01       	movw	r30, r16
 3b8:	80 81       	ld	r24, Z
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <check_interrupts+0x64>
			toggle_button_2();
 3be:	0e 94 9c 01 	call	0x338	; 0x338 <toggle_button_2>
			*buttonstate = 0;
 3c2:	f8 01       	movw	r30, r16
 3c4:	10 82       	st	Z, r1
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <check_interrupts+0x64>
		}
	}
	else if(*buttonstate == 1){
 3c8:	f8 01       	movw	r30, r16
 3ca:	80 81       	ld	r24, Z
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <check_interrupts+0x64>
		*buttonstate =2 ;
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
		
}
 3d4:	ce 01       	movw	r24, r28
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	08 95       	ret

000003e4 <task_4>:


void task_4(void){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <task_4+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <task_4+0x8>
 3ec:	1f 92       	push	r1
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
	LCDDR13 = LCDDR13|1;
 3f2:	e9 ef       	ldi	r30, 0xF9	; 249
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 400:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 404:	87 5f       	subi	r24, 0xF7	; 247
 406:	92 4c       	sbci	r25, 0xC2	; 194
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggerd, useful to look for overflows
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	89 50       	subi	r24, 0x09	; 9
 412:	9d 43       	sbci	r25, 0x3D	; 61
 414:	9c 83       	std	Y+4, r25	; 0x04
 416:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	8d 83       	std	Y+5, r24	; 0x05
	long num = 25;
 41c:	0f 2e       	mov	r0, r31
 41e:	f9 e1       	ldi	r31, 0x19	; 25
 420:	cf 2e       	mov	r12, r31
 422:	d1 2c       	mov	r13, r1
 424:	e1 2c       	mov	r14, r1
 426:	f1 2c       	mov	r15, r1
 428:	f0 2d       	mov	r31, r0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	return target_time;
		
}


void task_4(void){
 42c:	75 01       	movw	r14, r10
 42e:	64 01       	movw	r12, r8
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
	long num = 25;
    while(1) 
    {	
		// Calculate the next prime
		long new_num = next_prime(num);
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	0e 94 70 01 	call	0x2e0	; 0x2e0 <next_prime>
 438:	4b 01       	movw	r8, r22
 43a:	5c 01       	movw	r10, r24
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 43c:	6b 81       	ldd	r22, Y+3	; 0x03
 43e:	7c 81       	ldd	r23, Y+4	; 0x04
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	ae 01       	movw	r20, r28
 446:	4b 5f       	subi	r20, 0xFB	; 251
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	0e 94 b8 01 	call	0x370	; 0x370 <check_interrupts>
 44e:	29 81       	ldd	r18, Y+1	; 0x01
 450:	3a 81       	ldd	r19, Y+2	; 0x02
 452:	82 17       	cp	r24, r18
 454:	93 07       	cpc	r25, r19
 456:	51 f0       	breq	.+20     	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	9c 83       	std	Y+4, r25	; 0x04
 45e:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	87 5f       	subi	r24, 0xF7	; 247
 466:	92 4c       	sbci	r25, 0xC2	; 194
 468:	9a 83       	std	Y+2, r25	; 0x02
 46a:	89 83       	std	Y+1, r24	; 0x01
		}
		// Do the other stuff
		if(new_num!=num){
 46c:	c8 14       	cp	r12, r8
 46e:	d9 04       	cpc	r13, r9
 470:	ea 04       	cpc	r14, r10
 472:	fb 04       	cpc	r15, r11
 474:	d9 f2       	breq	.-74     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
			writeLong_2(num);
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	0e 94 3b 01 	call	0x276	; 0x276 <writeLong_2>
 47e:	d6 cf       	rjmp	.-84     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>

00000480 <main>:
    }
}

int main(void)
{
	init();
 480:	0e 94 60 01 	call	0x2c0	; 0x2c0 <init>
	init_lcd();
 484:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 488:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <task_4>

0000048c <revese>:
 * string.c
 *
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
 48c:	dc 01       	movw	r26, r24
	char * eos = str;
 48e:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 490:	01 c0       	rjmp	.+2      	; 0x494 <revese+0x8>
	eos++;
 492:	31 96       	adiw	r30, 0x01	; 1
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 494:	80 81       	ld	r24, Z
 496:	81 11       	cpse	r24, r1
 498:	fc cf       	rjmp	.-8      	; 0x492 <revese+0x6>
	eos++;
	eos--;
 49a:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <revese+0x1c>
		char temp = *eos;
 49e:	80 81       	ld	r24, Z
		*eos = *str;
 4a0:	9c 91       	ld	r25, X
 4a2:	90 83       	st	Z, r25
		*str = temp;
 4a4:	8d 93       	st	X+, r24
		eos--;
 4a6:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 4a8:	ea 17       	cp	r30, r26
 4aa:	fb 07       	cpc	r31, r27
 4ac:	c0 f7       	brcc	.-16     	; 0x49e <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	08 95       	ret

000004b4 <six_least_significant>:
void six_least_significant(long num,int *ret){
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	6b 01       	movw	r12, r22
 4c2:	7c 01       	movw	r14, r24
 4c4:	ea 01       	movw	r28, r20
	*ret = (int)(num-(num/1000000)*1000000);
 4c6:	20 e4       	ldi	r18, 0x40	; 64
 4c8:	32 e4       	ldi	r19, 0x42	; 66
 4ca:	4f e0       	ldi	r20, 0x0F	; 15
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	0e 94 b6 02 	call	0x56c	; 0x56c <__divmodsi4>
 4d2:	60 e4       	ldi	r22, 0x40	; 64
 4d4:	72 e4       	ldi	r23, 0x42	; 66
 4d6:	26 9f       	mul	r18, r22
 4d8:	c0 01       	movw	r24, r0
 4da:	27 9f       	mul	r18, r23
 4dc:	90 0d       	add	r25, r0
 4de:	36 9f       	mul	r19, r22
 4e0:	90 0d       	add	r25, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	c8 1a       	sub	r12, r24
 4e6:	d9 0a       	sbc	r13, r25
 4e8:	d9 82       	std	Y+1, r13	; 0x01
 4ea:	c8 82       	st	Y, r12
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	df 90       	pop	r13
 4f6:	cf 90       	pop	r12
 4f8:	08 95       	ret

000004fa <int_to_str>:
int int_to_str(int num,char* buffer){
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	eb 01       	movw	r28, r22
	if (num == 0){
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	a1 f4       	brne	.+40     	; 0x52c <__stack+0x2d>
		*buffer = 48;
 504:	80 e3       	ldi	r24, 0x30	; 48
 506:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 508:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 50a:	17 c0       	rjmp	.+46     	; 0x53a <__stack+0x3b>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 50c:	28 2f       	mov	r18, r24
 50e:	6a e0       	ldi	r22, 0x0A	; 10
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	0e 94 a2 02 	call	0x544	; 0x544 <__divmodhi4>
 516:	86 2f       	mov	r24, r22
 518:	97 2f       	mov	r25, r23
 51a:	66 0f       	add	r22, r22
 51c:	36 2f       	mov	r19, r22
 51e:	33 0f       	add	r19, r19
 520:	33 0f       	add	r19, r19
 522:	63 0f       	add	r22, r19
 524:	26 1b       	sub	r18, r22
 526:	20 5d       	subi	r18, 0xD0	; 208
 528:	21 93       	st	Z+, r18
 52a:	01 c0       	rjmp	.+2      	; 0x52e <__stack+0x2f>
 52c:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	69 f7       	brne	.-38     	; 0x50c <__stack+0xd>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 532:	10 82       	st	Z, r1
	revese(start);
 534:	ce 01       	movw	r24, r28
 536:	0e 94 46 02 	call	0x48c	; 0x48c <revese>
	return 0;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <__divmodhi4>:
 544:	97 fb       	bst	r25, 7
 546:	07 2e       	mov	r0, r23
 548:	16 f4       	brtc	.+4      	; 0x54e <__divmodhi4+0xa>
 54a:	00 94       	com	r0
 54c:	07 d0       	rcall	.+14     	; 0x55c <__divmodhi4_neg1>
 54e:	77 fd       	sbrc	r23, 7
 550:	09 d0       	rcall	.+18     	; 0x564 <__divmodhi4_neg2>
 552:	0e 94 d5 02 	call	0x5aa	; 0x5aa <__udivmodhi4>
 556:	07 fc       	sbrc	r0, 7
 558:	05 d0       	rcall	.+10     	; 0x564 <__divmodhi4_neg2>
 55a:	3e f4       	brtc	.+14     	; 0x56a <__divmodhi4_exit>

0000055c <__divmodhi4_neg1>:
 55c:	90 95       	com	r25
 55e:	81 95       	neg	r24
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	08 95       	ret

00000564 <__divmodhi4_neg2>:
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255

0000056a <__divmodhi4_exit>:
 56a:	08 95       	ret

0000056c <__divmodsi4>:
 56c:	05 2e       	mov	r0, r21
 56e:	97 fb       	bst	r25, 7
 570:	1e f4       	brtc	.+6      	; 0x578 <__divmodsi4+0xc>
 572:	00 94       	com	r0
 574:	0e 94 cd 02 	call	0x59a	; 0x59a <__negsi2>
 578:	57 fd       	sbrc	r21, 7
 57a:	07 d0       	rcall	.+14     	; 0x58a <__divmodsi4_neg2>
 57c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__udivmodsi4>
 580:	07 fc       	sbrc	r0, 7
 582:	03 d0       	rcall	.+6      	; 0x58a <__divmodsi4_neg2>
 584:	4e f4       	brtc	.+18     	; 0x598 <__divmodsi4_exit>
 586:	0c 94 cd 02 	jmp	0x59a	; 0x59a <__negsi2>

0000058a <__divmodsi4_neg2>:
 58a:	50 95       	com	r21
 58c:	40 95       	com	r20
 58e:	30 95       	com	r19
 590:	21 95       	neg	r18
 592:	3f 4f       	sbci	r19, 0xFF	; 255
 594:	4f 4f       	sbci	r20, 0xFF	; 255
 596:	5f 4f       	sbci	r21, 0xFF	; 255

00000598 <__divmodsi4_exit>:
 598:	08 95       	ret

0000059a <__negsi2>:
 59a:	90 95       	com	r25
 59c:	80 95       	com	r24
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255
 5a4:	8f 4f       	sbci	r24, 0xFF	; 255
 5a6:	9f 4f       	sbci	r25, 0xFF	; 255
 5a8:	08 95       	ret

000005aa <__udivmodhi4>:
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	51 e1       	ldi	r21, 0x11	; 17
 5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <__udivmodhi4_ep>

000005b2 <__udivmodhi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	a6 17       	cp	r26, r22
 5b8:	b7 07       	cpc	r27, r23
 5ba:	10 f0       	brcs	.+4      	; 0x5c0 <__udivmodhi4_ep>
 5bc:	a6 1b       	sub	r26, r22
 5be:	b7 0b       	sbc	r27, r23

000005c0 <__udivmodhi4_ep>:
 5c0:	88 1f       	adc	r24, r24
 5c2:	99 1f       	adc	r25, r25
 5c4:	5a 95       	dec	r21
 5c6:	a9 f7       	brne	.-22     	; 0x5b2 <__udivmodhi4_loop>
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	bc 01       	movw	r22, r24
 5ce:	cd 01       	movw	r24, r26
 5d0:	08 95       	ret

000005d2 <__udivmodsi4>:
 5d2:	a1 e2       	ldi	r26, 0x21	; 33
 5d4:	1a 2e       	mov	r1, r26
 5d6:	aa 1b       	sub	r26, r26
 5d8:	bb 1b       	sub	r27, r27
 5da:	fd 01       	movw	r30, r26
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <__udivmodsi4_ep>

000005de <__udivmodsi4_loop>:
 5de:	aa 1f       	adc	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	ee 1f       	adc	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	a2 17       	cp	r26, r18
 5e8:	b3 07       	cpc	r27, r19
 5ea:	e4 07       	cpc	r30, r20
 5ec:	f5 07       	cpc	r31, r21
 5ee:	20 f0       	brcs	.+8      	; 0x5f8 <__udivmodsi4_ep>
 5f0:	a2 1b       	sub	r26, r18
 5f2:	b3 0b       	sbc	r27, r19
 5f4:	e4 0b       	sbc	r30, r20
 5f6:	f5 0b       	sbc	r31, r21

000005f8 <__udivmodsi4_ep>:
 5f8:	66 1f       	adc	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	1a 94       	dec	r1
 602:	69 f7       	brne	.-38     	; 0x5de <__udivmodsi4_loop>
 604:	60 95       	com	r22
 606:	70 95       	com	r23
 608:	80 95       	com	r24
 60a:	90 95       	com	r25
 60c:	9b 01       	movw	r18, r22
 60e:	ac 01       	movw	r20, r24
 610:	bd 01       	movw	r22, r26
 612:	cf 01       	movw	r24, r30
 614:	08 95       	ret

00000616 <_exit>:
 616:	f8 94       	cli

00000618 <__stop_program>:
 618:	ff cf       	rjmp	.-2      	; 0x618 <__stop_program>
