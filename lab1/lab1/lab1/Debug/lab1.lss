
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d37  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a8b  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ae  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00002010  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000417  00000000  00000000  0000267f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002a96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e4       	ldi	r30, 0x4A	; 74
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  82:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB|(1<<LCDCS);
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB|((3<<LCDMUX0));
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(7);
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(7<<LCDPS0));
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR|(7);
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(7<< LCDDC0));
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR|((15));
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
		
		return success;
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	08 95       	ret

000000e8 <init>:
		// Do button interrupt things
		*buttonstate= (uint8_t)PINB;
	}
	
		
}
  e8:	e1 e6       	ldi	r30, 0x61	; 97
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	80 83       	st	Z, r24
  f0:	10 82       	st	Z, r1
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	85 b9       	out	0x05, r24	; 5
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	08 95       	ret

00000108 <button>:
 108:	1f 9b       	sbis	0x03, 7	; 3
 10a:	fe cf       	rjmp	.-4      	; 0x108 <button>
 10c:	1f 99       	sbic	0x03, 7	; 3
 10e:	fe cf       	rjmp	.-4      	; 0x10c <button+0x4>
 110:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	29 f4       	brne	.+10     	; 0x122 <button+0x1a>
 118:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 11c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 120:	f3 cf       	rjmp	.-26     	; 0x108 <button>
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 128:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 12c:	ed cf       	rjmp	.-38     	; 0x108 <button>

0000012e <main>:


int main(void)
{
	if(success != init())
 12e:	0e 94 74 00 	call	0xe8	; 0xe8 <init>
 132:	89 2b       	or	r24, r25
 134:	09 f0       	breq	.+2      	; 0x138 <main+0xa>
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x8>
		while(1);	// Blink on board LED or something indicating error
	if(success != init_lcd())
 138:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
 13c:	89 2b       	or	r24, r25
 13e:	09 f0       	breq	.+2      	; 0x142 <main+0x14>
 140:	ff cf       	rjmp	.-2      	; 0x140 <main+0x12>
		while(1);	// Blink on board LED or something indicating error
	//write_char('a',1);
	//blink();
	button();
 142:	0e 94 84 00 	call	0x108	; 0x108 <button>

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
