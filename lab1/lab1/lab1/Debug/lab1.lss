
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000428  0000049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee8  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b52  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000639  00000000  00000000  00002026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000519  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000545  00000000  00000000  00002d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003256  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e2       	ldi	r30, 0x28	; 40
  70:	f4 e0       	ldi	r31, 0x04	; 4
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  82:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <write_char>:
	0x1B51
};
int write_char(char ch,int pos){
	
	// The address of the first segment of the display
	LCDDR0 = dict_arr[0];
  8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  8e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	
	return success;
	
	
}
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <write_string>:
int write_string(char* ch, int first_pos){
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	8c 01       	movw	r16, r24
  a2:	cb 01       	movw	r24, r22
	first_pos = first_pos%MAX_POS;
  a4:	65 e0       	ldi	r22, 0x05	; 5
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
  ac:	ec 01       	movw	r28, r24
	while(*ch != '\0'){
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <write_string+0x30>
		write_char(*ch,first_pos);
  b0:	be 01       	movw	r22, r28
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <write_char>
		first_pos++;
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
		first_pos = first_pos%MAX_POS;
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
  c2:	ec 01       	movw	r28, r24
		ch++;
  c4:	0f 5f       	subi	r16, 0xFF	; 255
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
	
	
}
int write_string(char* ch, int first_pos){
	first_pos = first_pos%MAX_POS;
	while(*ch != '\0'){
  c8:	f8 01       	movw	r30, r16
  ca:	80 81       	ld	r24, Z
  cc:	81 11       	cpse	r24, r1
  ce:	f0 cf       	rjmp	.-32     	; 0xb0 <write_string+0x18>
		first_pos++;
		first_pos = first_pos%MAX_POS;
		ch++;
	}
	return success;
}
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <init_lcd>:
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
  de:	e4 ee       	ldi	r30, 0xE4	; 228
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
  ee:	80 81       	ld	r24, Z
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
  f4:	80 81       	ld	r24, Z
  f6:	8e 7f       	andi	r24, 0xFE	; 254
  f8:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB|(1<<LCDCS);
  fa:	e5 ee       	ldi	r30, 0xE5	; 229
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
 104:	80 81       	ld	r24, Z
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB|((3<<LCDMUX0));
 10a:	80 81       	ld	r24, Z
 10c:	80 63       	ori	r24, 0x30	; 48
 10e:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(7);
 110:	80 81       	ld	r24, Z
 112:	87 60       	ori	r24, 0x07	; 7
 114:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(7<<LCDPS0));
 116:	e6 ee       	ldi	r30, 0xE6	; 230
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8f 78       	andi	r24, 0x8F	; 143
 11e:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR|(7);
 120:	80 81       	ld	r24, Z
 122:	87 60       	ori	r24, 0x07	; 7
 124:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(7<< LCDDC0));
 126:	e7 ee       	ldi	r30, 0xE7	; 231
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8f 71       	andi	r24, 0x1F	; 31
 12e:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR|((15));
 130:	80 81       	ld	r24, Z
 132:	8f 60       	ori	r24, 0x0F	; 15
 134:	80 83       	st	Z, r24
		
		return success;
}
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <is_prime>:





int is_prime(long num){
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	cf 93       	push	r28
 146:	6b 01       	movw	r12, r22
 148:	7c 01       	movw	r14, r24
	
	// base cases 0-3
	if (num <= 3)
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	c8 16       	cp	r12, r24
 14e:	d1 04       	cpc	r13, r1
 150:	e1 04       	cpc	r14, r1
 152:	f1 04       	cpc	r15, r1
 154:	24 f1       	brlt	.+72     	; 0x19e <is_prime+0x62>
		return 1;
	// base case num is even
	if(num%2 == 0)
 156:	c0 fe       	sbrs	r12, 0
 158:	25 c0       	rjmp	.+74     	; 0x1a4 <is_prime+0x68>
 15a:	c3 e0       	ldi	r28, 0x03	; 3
 15c:	09 c0       	rjmp	.+18     	; 0x170 <is_prime+0x34>
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	0e 94 bd 01 	call	0x37a	; 0x37a <__divmodsi4>
 166:	67 2b       	or	r22, r23
 168:	68 2b       	or	r22, r24
 16a:	69 2b       	or	r22, r25
 16c:	f1 f0       	breq	.+60     	; 0x1aa <is_prime+0x6e>
			return 0;
		counter+=2;
 16e:	ce 5f       	subi	r28, 0xFE	; 254
	if(num%2 == 0)
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
 170:	2c 2f       	mov	r18, r28
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	d7 01       	movw	r26, r14
 17a:	c6 01       	movw	r24, r12
 17c:	ff 20       	and	r15, r15
 17e:	1c f4       	brge	.+6      	; 0x186 <is_prime+0x4a>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	b5 95       	asr	r27
 188:	a7 95       	ror	r26
 18a:	97 95       	ror	r25
 18c:	87 95       	ror	r24
 18e:	28 17       	cp	r18, r24
 190:	39 07       	cpc	r19, r25
 192:	4a 07       	cpc	r20, r26
 194:	5b 07       	cpc	r21, r27
 196:	1c f3       	brlt	.-58     	; 0x15e <is_prime+0x22>
		if(num%counter == 0)
			return 0;
		counter+=2;
	}
	return 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <is_prime+0x72>

int is_prime(long num){
	
	// base cases 0-3
	if (num <= 3)
		return 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <is_prime+0x72>
	// base case num is even
	if(num%2 == 0)
		return 0;
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <is_prime+0x72>
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
			return 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
		counter+=2;
	}
	return 1;
}
 1ae:	cf 91       	pop	r28
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	df 90       	pop	r13
 1b6:	cf 90       	pop	r12
 1b8:	08 95       	ret

000001ba <init>:
#define TIMER_SCALING_1    0b001
#define TIMER_STOP		   0b000

int init(void){
	// Setting power options
	CLKPR = 0x80;
 1ba:	e1 e6       	ldi	r30, 0x61	; 97
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
	CLKPR = 0X00;
 1c2:	10 82       	st	Z, r1
	
	
	// Setting the presacling factor to 256
	TCCR1B = TCCR1B|TIMER_SCALING_256;
 1c4:	e1 e8       	ldi	r30, 0x81	; 129
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 83       	st	Z, r24
	
	// Setting the pullup
	PORTB = PORTB|(1<<7);
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	85 b9       	out	0x05, r24	; 5
	
	return success;
}
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret

000001da <next_prime>:

long next_prime(long num){
 1da:	cf 92       	push	r12
 1dc:	df 92       	push	r13
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	6b 01       	movw	r12, r22
 1e4:	7c 01       	movw	r14, r24
	while(1)
	{
		if(num >= 3){
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	c8 16       	cp	r12, r24
 1ea:	d1 04       	cpc	r13, r1
 1ec:	e1 04       	cpc	r14, r1
 1ee:	f1 04       	cpc	r15, r1
 1f0:	74 f0       	brlt	.+28     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
			if (num%2 == 0)
 1f2:	c0 fc       	sbrc	r12, 0
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
			num++;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	c8 1a       	sub	r12, r24
 1fa:	d8 0a       	sbc	r13, r24
 1fc:	e8 0a       	sbc	r14, r24
 1fe:	f8 0a       	sbc	r15, r24
 200:	0b c0       	rjmp	.+22     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
			else
			num +=2;
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	c8 0e       	add	r12, r24
 206:	d1 1c       	adc	r13, r1
 208:	e1 1c       	adc	r14, r1
 20a:	f1 1c       	adc	r15, r1
 20c:	05 c0       	rjmp	.+10     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
		}
		else
		num++;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	c8 1a       	sub	r12, r24
 212:	d8 0a       	sbc	r13, r24
 214:	e8 0a       	sbc	r14, r24
 216:	f8 0a       	sbc	r15, r24
		if(is_prime(num)==1){
 218:	c7 01       	movw	r24, r14
 21a:	b6 01       	movw	r22, r12
 21c:	0e 94 9e 00 	call	0x13c	; 0x13c <is_prime>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	09 f7       	brne	.-62     	; 0x1e6 <next_prime+0xc>
			return num;
		}
		// Print string to screen
	}
}
 224:	c7 01       	movw	r24, r14
 226:	b6 01       	movw	r22, r12
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <check_interrupts>:


int check_interrupts(uint16_t freq,uint16_t last_time){
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <check_interrupts+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <check_interrupts+0x8>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	// Checking timer int
	uint16_t time = (uint16_t)TCNT1;
 23e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 242:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	if(time >= last_time+freq)
 246:	86 0f       	add	r24, r22
 248:	97 1f       	adc	r25, r23
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	10 f0       	brcs	.+4      	; 0x254 <check_interrupts+0x22>
	{
		volatile last_time = time;
 250:	3c 83       	std	Y+4, r19	; 0x04
 252:	2b 83       	std	Y+3, r18	; 0x03
		// Do timer interrupt things
	}
	
	// check if button state has changed
	if(1!=(PINB&(1<<7))>>7)
 254:	1f 99       	sbic	0x03, 7	; 3
 256:	02 c0       	rjmp	.+4      	; 0x25c <check_interrupts+0x2a>
	{
		volatile int i = 0;
 258:	1a 82       	std	Y+2, r1	; 0x02
 25a:	19 82       	std	Y+1, r1	; 0x01
		// Do button interrupt things
	}
	
		
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <main>:


int main(void)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	2a 97       	sbiw	r28, 0x0a	; 10
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
	if(success != init())
 27e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <init>
 282:	89 2b       	or	r24, r25
 284:	09 f0       	breq	.+2      	; 0x288 <main+0x1e>
 286:	ff cf       	rjmp	.-2      	; 0x286 <main+0x1c>
		while(1);	// Blink onboard LED or something indicating error
	if(success != init_lcd())
 288:	0e 94 6f 00 	call	0xde	; 0xde <init_lcd>
 28c:	89 2b       	or	r24, r25
 28e:	09 f0       	breq	.+2      	; 0x292 <main+0x28>
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x26>
	//button();
	//primes();
	
	
	uint16_t freq = 31250/2;		// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequenzy
	uint16_t last_time = TCNT1;
 292:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 296:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	long num = 0;
 29a:	c1 2c       	mov	r12, r1
 29c:	d1 2c       	mov	r13, r1
 29e:	76 01       	movw	r14, r12
    while(1) 
    {	
		// Calculate the next prime
		num = next_prime(num);
 2a0:	c7 01       	movw	r24, r14
 2a2:	b6 01       	movw	r22, r12
 2a4:	0e 94 ed 00 	call	0x1da	; 0x1da <next_prime>
 2a8:	6b 01       	movw	r12, r22
 2aa:	7c 01       	movw	r14, r24
		// Check if anny interrupts have been triggerd
		last_time = check_interrupts(31250/2,last_time);
 2ac:	b8 01       	movw	r22, r16
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	9d e3       	ldi	r25, 0x3D	; 61
 2b2:	0e 94 19 01 	call	0x232	; 0x232 <check_interrupts>
 2b6:	8c 01       	movw	r16, r24
		// 
		uint8_t temp = three_least_significant(num);
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	0e 94 81 01 	call	0x302	; 0x302 <three_least_significant>
		
		char buffer[10];
		int_to_str(temp,buffer);
 2c0:	be 01       	movw	r22, r28
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 89 01 	call	0x312	; 0x312 <int_to_str>
		write_string(buffer,0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	ce 01       	movw	r24, r28
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	0e 94 4c 00 	call	0x98	; 0x98 <write_string>
 2d8:	e3 cf       	rjmp	.-58     	; 0x2a0 <main+0x36>

000002da <revese>:
 * string.c
 *
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
 2da:	dc 01       	movw	r26, r24
	char * eos = str;
 2dc:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <revese+0x8>
	eos++;
 2e0:	31 96       	adiw	r30, 0x01	; 1
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 2e2:	80 81       	ld	r24, Z
 2e4:	81 11       	cpse	r24, r1
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <revese+0x6>
	eos++;
	eos--;
 2e8:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <revese+0x1c>
		char temp = *eos;
 2ec:	80 81       	ld	r24, Z
		*eos = *str;
 2ee:	9c 91       	ld	r25, X
 2f0:	90 83       	st	Z, r25
		*str = temp;
 2f2:	8d 93       	st	X+, r24
		eos--;
 2f4:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 2f6:	ea 17       	cp	r30, r26
 2f8:	fb 07       	cpc	r31, r27
 2fa:	c0 f7       	brcc	.-16     	; 0x2ec <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret

00000302 <three_least_significant>:
int three_least_significant(long num){
	return (num-(num/1000)*1000);
 302:	28 ee       	ldi	r18, 0xE8	; 232
 304:	33 e0       	ldi	r19, 0x03	; 3
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	0e 94 bd 01 	call	0x37a	; 0x37a <__divmodsi4>
}
 30e:	cb 01       	movw	r24, r22
 310:	08 95       	ret

00000312 <int_to_str>:
int int_to_str(int num,char* buffer){
 312:	cf 93       	push	r28
 314:	c6 2f       	mov	r28, r22
 316:	47 2f       	mov	r20, r23
	char * start = buffer;
	while (num)
 318:	e6 2f       	mov	r30, r22
 31a:	f7 2f       	mov	r31, r23
 31c:	0f c0       	rjmp	.+30     	; 0x33c <int_to_str+0x2a>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 31e:	28 2f       	mov	r18, r24
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	0e 94 a9 01 	call	0x352	; 0x352 <__divmodhi4>
 328:	86 2f       	mov	r24, r22
 32a:	97 2f       	mov	r25, r23
 32c:	66 0f       	add	r22, r22
 32e:	36 2f       	mov	r19, r22
 330:	33 0f       	add	r19, r19
 332:	33 0f       	add	r19, r19
 334:	63 0f       	add	r22, r19
 336:	26 1b       	sub	r18, r22
 338:	20 5d       	subi	r18, 0xD0	; 208
 33a:	21 93       	st	Z+, r18
int three_least_significant(long num){
	return (num-(num/1000)*1000);
}
int int_to_str(int num,char* buffer){
	char * start = buffer;
	while (num)
 33c:	00 97       	sbiw	r24, 0x00	; 0
 33e:	79 f7       	brne	.-34     	; 0x31e <int_to_str+0xc>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 340:	10 82       	st	Z, r1
	revese(start);
 342:	8c 2f       	mov	r24, r28
 344:	94 2f       	mov	r25, r20
 346:	0e 94 6d 01 	call	0x2da	; 0x2da <revese>
	return 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <__divmodhi4>:
 352:	97 fb       	bst	r25, 7
 354:	07 2e       	mov	r0, r23
 356:	16 f4       	brtc	.+4      	; 0x35c <__divmodhi4+0xa>
 358:	00 94       	com	r0
 35a:	07 d0       	rcall	.+14     	; 0x36a <__divmodhi4_neg1>
 35c:	77 fd       	sbrc	r23, 7
 35e:	09 d0       	rcall	.+18     	; 0x372 <__divmodhi4_neg2>
 360:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__udivmodhi4>
 364:	07 fc       	sbrc	r0, 7
 366:	05 d0       	rcall	.+10     	; 0x372 <__divmodhi4_neg2>
 368:	3e f4       	brtc	.+14     	; 0x378 <__divmodhi4_exit>

0000036a <__divmodhi4_neg1>:
 36a:	90 95       	com	r25
 36c:	81 95       	neg	r24
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
 370:	08 95       	ret

00000372 <__divmodhi4_neg2>:
 372:	70 95       	com	r23
 374:	61 95       	neg	r22
 376:	7f 4f       	sbci	r23, 0xFF	; 255

00000378 <__divmodhi4_exit>:
 378:	08 95       	ret

0000037a <__divmodsi4>:
 37a:	05 2e       	mov	r0, r21
 37c:	97 fb       	bst	r25, 7
 37e:	1e f4       	brtc	.+6      	; 0x386 <__divmodsi4+0xc>
 380:	00 94       	com	r0
 382:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__negsi2>
 386:	57 fd       	sbrc	r21, 7
 388:	07 d0       	rcall	.+14     	; 0x398 <__divmodsi4_neg2>
 38a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <__udivmodsi4>
 38e:	07 fc       	sbrc	r0, 7
 390:	03 d0       	rcall	.+6      	; 0x398 <__divmodsi4_neg2>
 392:	4e f4       	brtc	.+18     	; 0x3a6 <__divmodsi4_exit>
 394:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__negsi2>

00000398 <__divmodsi4_neg2>:
 398:	50 95       	com	r21
 39a:	40 95       	com	r20
 39c:	30 95       	com	r19
 39e:	21 95       	neg	r18
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	4f 4f       	sbci	r20, 0xFF	; 255
 3a4:	5f 4f       	sbci	r21, 0xFF	; 255

000003a6 <__divmodsi4_exit>:
 3a6:	08 95       	ret

000003a8 <__negsi2>:
 3a8:	90 95       	com	r25
 3aa:	80 95       	com	r24
 3ac:	70 95       	com	r23
 3ae:	61 95       	neg	r22
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	8f 4f       	sbci	r24, 0xFF	; 255
 3b4:	9f 4f       	sbci	r25, 0xFF	; 255
 3b6:	08 95       	ret

000003b8 <__udivmodhi4>:
 3b8:	aa 1b       	sub	r26, r26
 3ba:	bb 1b       	sub	r27, r27
 3bc:	51 e1       	ldi	r21, 0x11	; 17
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <__udivmodhi4_ep>

000003c0 <__udivmodhi4_loop>:
 3c0:	aa 1f       	adc	r26, r26
 3c2:	bb 1f       	adc	r27, r27
 3c4:	a6 17       	cp	r26, r22
 3c6:	b7 07       	cpc	r27, r23
 3c8:	10 f0       	brcs	.+4      	; 0x3ce <__udivmodhi4_ep>
 3ca:	a6 1b       	sub	r26, r22
 3cc:	b7 0b       	sbc	r27, r23

000003ce <__udivmodhi4_ep>:
 3ce:	88 1f       	adc	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	5a 95       	dec	r21
 3d4:	a9 f7       	brne	.-22     	; 0x3c0 <__udivmodhi4_loop>
 3d6:	80 95       	com	r24
 3d8:	90 95       	com	r25
 3da:	bc 01       	movw	r22, r24
 3dc:	cd 01       	movw	r24, r26
 3de:	08 95       	ret

000003e0 <__udivmodsi4>:
 3e0:	a1 e2       	ldi	r26, 0x21	; 33
 3e2:	1a 2e       	mov	r1, r26
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	fd 01       	movw	r30, r26
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__udivmodsi4_ep>

000003ec <__udivmodsi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	ee 1f       	adc	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	a2 17       	cp	r26, r18
 3f6:	b3 07       	cpc	r27, r19
 3f8:	e4 07       	cpc	r30, r20
 3fa:	f5 07       	cpc	r31, r21
 3fc:	20 f0       	brcs	.+8      	; 0x406 <__udivmodsi4_ep>
 3fe:	a2 1b       	sub	r26, r18
 400:	b3 0b       	sbc	r27, r19
 402:	e4 0b       	sbc	r30, r20
 404:	f5 0b       	sbc	r31, r21

00000406 <__udivmodsi4_ep>:
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	1a 94       	dec	r1
 410:	69 f7       	brne	.-38     	; 0x3ec <__udivmodsi4_loop>
 412:	60 95       	com	r22
 414:	70 95       	com	r23
 416:	80 95       	com	r24
 418:	90 95       	com	r25
 41a:	9b 01       	movw	r18, r22
 41c:	ac 01       	movw	r20, r24
 41e:	bd 01       	movw	r22, r26
 420:	cf 01       	movw	r24, r30
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
