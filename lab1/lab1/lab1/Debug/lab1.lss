
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000612  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc2  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000baf  00000000  00000000  000017ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ff  00000000  00000000  00002379  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007fa  00000000  00000000  00003359  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003b53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e1       	ldi	r30, 0x12	; 18
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 40 02 	call	0x480	; 0x480 <main>
  82:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <write_char>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
  8e:	66 30       	cpi	r22, 0x06	; 6
  90:	71 05       	cpc	r23, r1
  92:	d8 f5       	brcc	.+118    	; 0x10a <write_char+0x80>
  94:	75 95       	asr	r23
  96:	67 95       	ror	r22
  98:	fb 01       	movw	r30, r22
  9a:	e4 51       	subi	r30, 0x14	; 20
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	90 ed       	ldi	r25, 0xD0	; 208
  a0:	98 0f       	add	r25, r24
  a2:	9a 30       	cpi	r25, 0x0A	; 10
  a4:	60 f4       	brcc	.+24     	; 0xbe <write_char+0x34>
  a6:	a8 2f       	mov	r26, r24
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	d0 97       	sbiw	r26, 0x30	; 48
  ac:	aa 0f       	add	r26, r26
  ae:	bb 1f       	adc	r27, r27
  b0:	aa 0f       	add	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	a0 50       	subi	r26, 0x00	; 0
  b6:	bf 4f       	sbci	r27, 0xFF	; 255
  b8:	4d 91       	ld	r20, X+
  ba:	5c 91       	ld	r21, X
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <write_char+0x38>
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	1e c0       	rjmp	.+60     	; 0x104 <write_char+0x7a>
  c8:	94 2f       	mov	r25, r20
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	52 95       	swap	r21
  ce:	42 95       	swap	r20
  d0:	4f 70       	andi	r20, 0x0F	; 15
  d2:	45 27       	eor	r20, r21
  d4:	5f 70       	andi	r21, 0x0F	; 15
  d6:	45 27       	eor	r20, r21
  d8:	c0 fd       	sbrc	r28, 0
  da:	07 c0       	rjmp	.+14     	; 0xea <write_char+0x60>
  dc:	80 81       	ld	r24, Z
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <write_char+0x74>
  ea:	80 81       	ld	r24, Z
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	80 83       	st	Z, r24
  f0:	60 81       	ld	r22, Z
  f2:	70 e1       	ldi	r23, 0x10	; 16
  f4:	97 9f       	mul	r25, r23
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	86 2b       	or	r24, r22
  fc:	80 83       	st	Z, r24
  fe:	35 96       	adiw	r30, 0x05	; 5
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	31 05       	cpc	r19, r1
 108:	fc f2       	brlt	.-66     	; 0xc8 <write_char+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <write_string>:
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
 11c:	cb 01       	movw	r24, r22
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 126:	ec 01       	movw	r28, r24
 128:	0c c0       	rjmp	.+24     	; 0x142 <write_string+0x30>
 12a:	be 01       	movw	r22, r28
 12c:	0e 94 45 00 	call	0x8a	; 0x8a <write_char>
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 13c:	ec 01       	movw	r28, r24
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	f8 01       	movw	r30, r16
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f0 cf       	rjmp	.-32     	; 0x12a <write_string+0x18>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <init_lcd>:
 158:	e4 ee       	ldi	r30, 0xE4	; 228
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 83       	st	Z, r24
 168:	80 81       	ld	r24, Z
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 83       	st	Z, r24
 174:	e5 ee       	ldi	r30, 0xE5	; 229
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
 17e:	80 81       	ld	r24, Z
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	80 63       	ori	r24, 0x30	; 48
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	87 60       	ori	r24, 0x07	; 7
 18e:	80 83       	st	Z, r24
 190:	e6 ee       	ldi	r30, 0xE6	; 230
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 78       	andi	r24, 0x8F	; 143
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	87 60       	ori	r24, 0x07	; 7
 19e:	80 83       	st	Z, r24
 1a0:	e7 ee       	ldi	r30, 0xE7	; 231
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 71       	andi	r24, 0x1F	; 31
 1a8:	80 83       	st	Z, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 60       	ori	r24, 0x0F	; 15
 1ae:	80 83       	st	Z, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <write_long>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2c 97       	sbiw	r28, 0x0c	; 12
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	ae 01       	movw	r20, r28
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <six_least_significant>
 1d4:	be 01       	movw	r22, r28
 1d6:	6d 5f       	subi	r22, 0xFD	; 253
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <int_to_str>
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	03 96       	adiw	r24, 0x03	; 3
 1ea:	0e 94 89 00 	call	0x112	; 0x112 <write_string>
 1ee:	2c 96       	adiw	r28, 0x0c	; 12
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <is_prime>:
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	4b 01       	movw	r8, r22
 212:	5c 01       	movw	r10, r24
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	88 16       	cp	r8, r24
 218:	91 04       	cpc	r9, r1
 21a:	a1 04       	cpc	r10, r1
 21c:	b1 04       	cpc	r11, r1
 21e:	64 f1       	brlt	.+88     	; 0x278 <is_prime+0x78>
 220:	80 fe       	sbrs	r8, 0
 222:	2d c0       	rjmp	.+90     	; 0x27e <is_prime+0x7e>
 224:	0f 2e       	mov	r0, r31
 226:	f3 e0       	ldi	r31, 0x03	; 3
 228:	cf 2e       	mov	r12, r31
 22a:	d1 2c       	mov	r13, r1
 22c:	e1 2c       	mov	r14, r1
 22e:	f1 2c       	mov	r15, r1
 230:	f0 2d       	mov	r31, r0
 232:	0f c0       	rjmp	.+30     	; 0x252 <is_prime+0x52>
 234:	c5 01       	movw	r24, r10
 236:	b4 01       	movw	r22, r8
 238:	a7 01       	movw	r20, r14
 23a:	96 01       	movw	r18, r12
 23c:	0e 94 b2 02 	call	0x564	; 0x564 <__divmodsi4>
 240:	67 2b       	or	r22, r23
 242:	68 2b       	or	r22, r24
 244:	69 2b       	or	r22, r25
 246:	f1 f0       	breq	.+60     	; 0x284 <is_prime+0x84>
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	c8 1a       	sub	r12, r24
 24c:	d8 0a       	sbc	r13, r24
 24e:	e8 0a       	sbc	r14, r24
 250:	f8 0a       	sbc	r15, r24
 252:	d5 01       	movw	r26, r10
 254:	c4 01       	movw	r24, r8
 256:	bb 20       	and	r11, r11
 258:	1c f4       	brge	.+6      	; 0x260 <is_prime+0x60>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	a1 1d       	adc	r26, r1
 25e:	b1 1d       	adc	r27, r1
 260:	b5 95       	asr	r27
 262:	a7 95       	ror	r26
 264:	97 95       	ror	r25
 266:	87 95       	ror	r24
 268:	c8 16       	cp	r12, r24
 26a:	d9 06       	cpc	r13, r25
 26c:	ea 06       	cpc	r14, r26
 26e:	fb 06       	cpc	r15, r27
 270:	0c f3       	brlt	.-62     	; 0x234 <is_prime+0x34>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 c0       	rjmp	.+16     	; 0x288 <is_prime+0x88>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	05 c0       	rjmp	.+10     	; 0x288 <is_prime+0x88>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <is_prime+0x88>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	bf 90       	pop	r11
 292:	af 90       	pop	r10
 294:	9f 90       	pop	r9
 296:	8f 90       	pop	r8
 298:	08 95       	ret

0000029a <toggle_led_2>:




int toggle_led_2(){
	if((LCDDR8&1)== 0)
 29a:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 29e:	80 fd       	sbrc	r24, 0
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 2a2:	e4 ef       	ldi	r30, 0xF4	; 244
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <toggle_led_2+0x20>
	else
	LCDDR8= LCDDR8^1;
 2ae:	e4 ef       	ldi	r30, 0xF4	; 244
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	90 81       	ld	r25, Z
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	89 27       	eor	r24, r25
 2b8:	80 83       	st	Z, r24
	return 0;
}
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret

000002c0 <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 2c0:	e1 e6       	ldi	r30, 0x61	; 97
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
 2c8:	10 82       	st	Z, r1
 2ca:	e1 e8       	ldi	r30, 0x81	; 129
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	80 83       	st	Z, r24
 2d4:	85 b1       	in	r24, 0x05	; 5
 2d6:	80 68       	ori	r24, 0x80	; 128
 2d8:	85 b9       	out	0x05, r24	; 5
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret

000002e0 <next_prime>:
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	6b 01       	movw	r12, r22
 2ea:	7c 01       	movw	r14, r24
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	c8 16       	cp	r12, r24
 2f0:	d1 04       	cpc	r13, r1
 2f2:	e1 04       	cpc	r14, r1
 2f4:	f1 04       	cpc	r15, r1
 2f6:	74 f0       	brlt	.+28     	; 0x314 <next_prime+0x34>
 2f8:	c0 fc       	sbrc	r12, 0
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <next_prime+0x28>
 2fc:	8f ef       	ldi	r24, 0xFF	; 255
 2fe:	c8 1a       	sub	r12, r24
 300:	d8 0a       	sbc	r13, r24
 302:	e8 0a       	sbc	r14, r24
 304:	f8 0a       	sbc	r15, r24
 306:	0b c0       	rjmp	.+22     	; 0x31e <next_prime+0x3e>
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	c8 0e       	add	r12, r24
 30c:	d1 1c       	adc	r13, r1
 30e:	e1 1c       	adc	r14, r1
 310:	f1 1c       	adc	r15, r1
 312:	05 c0       	rjmp	.+10     	; 0x31e <next_prime+0x3e>
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	c8 1a       	sub	r12, r24
 318:	d8 0a       	sbc	r13, r24
 31a:	e8 0a       	sbc	r14, r24
 31c:	f8 0a       	sbc	r15, r24
 31e:	c7 01       	movw	r24, r14
 320:	b6 01       	movw	r22, r12
 322:	0e 94 00 01 	call	0x200	; 0x200 <is_prime>
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	09 f7       	brne	.-62     	; 0x2ec <next_prime+0xc>
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	ff 90       	pop	r15
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	08 95       	ret

00000338 <toggle_button_2>:
		}
	}

}
void toggle_button_2(){
	if((LCDDR13&1)== 1){
 338:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 33c:	80 ff       	sbrs	r24, 0
 33e:	0c c0       	rjmp	.+24     	; 0x358 <toggle_button_2+0x20>
		LCDDR13 = LCDDR13^1;
 340:	e9 ef       	ldi	r30, 0xF9	; 249
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	90 81       	ld	r25, Z
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	89 27       	eor	r24, r25
 34a:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 34c:	ee ef       	ldi	r30, 0xFE	; 254
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	80 83       	st	Z, r24
 356:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 358:	e9 ef       	ldi	r30, 0xF9	; 249
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	81 60       	ori	r24, 0x01	; 1
 360:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 362:	ee ef       	ldi	r30, 0xFE	; 254
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	90 81       	ld	r25, Z
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	89 27       	eor	r24, r25
 36c:	80 83       	st	Z, r24
 36e:	08 95       	ret

00000370 <check_interrupts>:
	}
}
int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
 37e:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 380:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 384:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
 388:	8e 15       	cp	r24, r14
 38a:	9f 05       	cpc	r25, r15
 38c:	60 f4       	brcc	.+24     	; 0x3a6 <check_interrupts+0x36>
 38e:	86 17       	cp	r24, r22
 390:	97 07       	cpc	r25, r23
 392:	18 f4       	brcc	.+6      	; 0x39a <check_interrupts+0x2a>
 394:	6e 15       	cp	r22, r14
 396:	7f 05       	cpc	r23, r15
 398:	30 f0       	brcs	.+12     	; 0x3a6 <check_interrupts+0x36>
 39a:	ec 16       	cp	r14, r28
 39c:	fd 06       	cpc	r15, r29
 39e:	18 f0       	brcs	.+6      	; 0x3a6 <check_interrupts+0x36>
	{
		
		target_time=time;
		toggle_led_2();
 3a0:	0e 94 4d 01 	call	0x29a	; 0x29a <toggle_led_2>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
	{
		
		target_time=time;
 3a4:	e7 01       	movw	r28, r14
		toggle_led_2();
	}
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 3a6:	1f 99       	sbic	0x03, 7	; 3
 3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <check_interrupts+0x58>
	{
		if(*buttonstate==0){
 3aa:	f8 01       	movw	r30, r16
 3ac:	80 81       	ld	r24, Z
 3ae:	81 11       	cpse	r24, r1
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <check_interrupts+0x46>
			*buttonstate=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 83       	st	Z, r24
		}
		
		if(*buttonstate == 2){
 3b6:	f8 01       	movw	r30, r16
 3b8:	80 81       	ld	r24, Z
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	59 f4       	brne	.+22     	; 0x3d4 <check_interrupts+0x64>
			toggle_button_2();
 3be:	0e 94 9c 01 	call	0x338	; 0x338 <toggle_button_2>
			*buttonstate = 0;
 3c2:	f8 01       	movw	r30, r16
 3c4:	10 82       	st	Z, r1
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <check_interrupts+0x64>
		}
	}
	else if(*buttonstate == 1){
 3c8:	f8 01       	movw	r30, r16
 3ca:	80 81       	ld	r24, Z
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <check_interrupts+0x64>
		*buttonstate =2 ;
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
	
}
 3d4:	ce 01       	movw	r24, r28
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	08 95       	ret

000003e4 <task_4>:


void task_4(void){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <task_4+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <task_4+0x8>
 3ec:	1f 92       	push	r1
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
	LCDDR13 = LCDDR13|1;
 3f2:	e9 ef       	ldi	r30, 0xF9	; 249
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 400:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 404:	87 5f       	subi	r24, 0xF7	; 247
 406:	92 4c       	sbci	r25, 0xC2	; 194
 408:	9a 83       	std	Y+2, r25	; 0x02
 40a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggerd, useful to look for overflows
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	9a 81       	ldd	r25, Y+2	; 0x02
 410:	89 50       	subi	r24, 0x09	; 9
 412:	9d 43       	sbci	r25, 0x3D	; 61
 414:	9c 83       	std	Y+4, r25	; 0x04
 416:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	8d 83       	std	Y+5, r24	; 0x05
	long num = 25;
 41c:	0f 2e       	mov	r0, r31
 41e:	f9 e1       	ldi	r31, 0x19	; 25
 420:	cf 2e       	mov	r12, r31
 422:	d1 2c       	mov	r13, r1
 424:	e1 2c       	mov	r14, r1
 426:	f1 2c       	mov	r15, r1
 428:	f0 2d       	mov	r31, r0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	return target_time;
	
}


void task_4(void){
 42c:	75 01       	movw	r14, r10
 42e:	64 01       	movw	r12, r8
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
	long num = 25;
	while(1)
	{
		// Calculate the next prime
		long new_num = next_prime(num);
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	0e 94 70 01 	call	0x2e0	; 0x2e0 <next_prime>
 438:	4b 01       	movw	r8, r22
 43a:	5c 01       	movw	r10, r24
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 43c:	6b 81       	ldd	r22, Y+3	; 0x03
 43e:	7c 81       	ldd	r23, Y+4	; 0x04
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	ae 01       	movw	r20, r28
 446:	4b 5f       	subi	r20, 0xFB	; 251
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	0e 94 b8 01 	call	0x370	; 0x370 <check_interrupts>
 44e:	29 81       	ldd	r18, Y+1	; 0x01
 450:	3a 81       	ldd	r19, Y+2	; 0x02
 452:	82 17       	cp	r24, r18
 454:	93 07       	cpc	r25, r19
 456:	51 f0       	breq	.+20     	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	9c 83       	std	Y+4, r25	; 0x04
 45e:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	87 5f       	subi	r24, 0xF7	; 247
 466:	92 4c       	sbci	r25, 0xC2	; 194
 468:	9a 83       	std	Y+2, r25	; 0x02
 46a:	89 83       	std	Y+1, r24	; 0x01
		}
		// Do the other stuff
		if(new_num!=num){
 46c:	c8 14       	cp	r12, r8
 46e:	d9 04       	cpc	r13, r9
 470:	ea 04       	cpc	r14, r10
 472:	fb 04       	cpc	r15, r11
 474:	d9 f2       	breq	.-74     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
			write_long(num);
 476:	c7 01       	movw	r24, r14
 478:	b6 01       	movw	r22, r12
 47a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <write_long>
 47e:	d6 cf       	rjmp	.-84     	; 0x42c <__DATA_REGION_LENGTH__+0x2c>

00000480 <main>:
	}
}

int main(void)
{
	init();
 480:	0e 94 60 01 	call	0x2c0	; 0x2c0 <init>
	init_lcd();
 484:	0e 94 ac 00 	call	0x158	; 0x158 <init_lcd>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 488:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <task_4>

0000048c <revese>:

void revese(char* str){
 48c:	dc 01       	movw	r26, r24
	char * eos = str;
 48e:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 490:	01 c0       	rjmp	.+2      	; 0x494 <revese+0x8>
	eos++;
 492:	31 96       	adiw	r30, 0x01	; 1

void revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 494:	80 81       	ld	r24, Z
 496:	81 11       	cpse	r24, r1
 498:	fc cf       	rjmp	.-8      	; 0x492 <revese+0x6>
	eos++;
	eos--;
 49a:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <revese+0x1c>
		char temp = *eos;
 49e:	80 81       	ld	r24, Z
		*eos = *str;
 4a0:	9c 91       	ld	r25, X
 4a2:	90 83       	st	Z, r25
		*str = temp;
 4a4:	8d 93       	st	X+, r24
		eos--;
 4a6:	31 97       	sbiw	r30, 0x01	; 1
void revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 4a8:	ea 17       	cp	r30, r26
 4aa:	fb 07       	cpc	r31, r27
 4ac:	c0 f7       	brcc	.-16     	; 0x49e <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 4ae:	08 95       	ret

000004b0 <six_least_significant>:
void six_least_significant(long num,int *ret){
 4b0:	cf 92       	push	r12
 4b2:	df 92       	push	r13
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	6b 01       	movw	r12, r22
 4be:	7c 01       	movw	r14, r24
 4c0:	ea 01       	movw	r28, r20
	*ret = (int)(num-(num/1000000)*1000000);
 4c2:	20 e4       	ldi	r18, 0x40	; 64
 4c4:	32 e4       	ldi	r19, 0x42	; 66
 4c6:	4f e0       	ldi	r20, 0x0F	; 15
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	0e 94 b2 02 	call	0x564	; 0x564 <__divmodsi4>
 4ce:	60 e4       	ldi	r22, 0x40	; 64
 4d0:	72 e4       	ldi	r23, 0x42	; 66
 4d2:	26 9f       	mul	r18, r22
 4d4:	c0 01       	movw	r24, r0
 4d6:	27 9f       	mul	r18, r23
 4d8:	90 0d       	add	r25, r0
 4da:	36 9f       	mul	r19, r22
 4dc:	90 0d       	add	r25, r0
 4de:	11 24       	eor	r1, r1
 4e0:	c8 1a       	sub	r12, r24
 4e2:	d9 0a       	sbc	r13, r25
 4e4:	d9 82       	std	Y+1, r13	; 0x01
 4e6:	c8 82       	st	Y, r12
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	08 95       	ret

000004f6 <int_to_str>:
void int_to_str(int num,char* buffer){
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	eb 01       	movw	r28, r22
	if (num == 0){
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	a1 f4       	brne	.+40     	; 0x528 <__stack+0x29>
		*buffer = 48;
 500:	80 e3       	ldi	r24, 0x30	; 48
 502:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 504:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 506:	17 c0       	rjmp	.+46     	; 0x536 <__stack+0x37>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 508:	28 2f       	mov	r18, r24
 50a:	6a e0       	ldi	r22, 0x0A	; 10
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	0e 94 9e 02 	call	0x53c	; 0x53c <__divmodhi4>
 512:	86 2f       	mov	r24, r22
 514:	97 2f       	mov	r25, r23
 516:	66 0f       	add	r22, r22
 518:	36 2f       	mov	r19, r22
 51a:	33 0f       	add	r19, r19
 51c:	33 0f       	add	r19, r19
 51e:	63 0f       	add	r22, r19
 520:	26 1b       	sub	r18, r22
 522:	20 5d       	subi	r18, 0xD0	; 208
 524:	21 93       	st	Z+, r18
 526:	01 c0       	rjmp	.+2      	; 0x52a <__stack+0x2b>
 528:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	69 f7       	brne	.-38     	; 0x508 <__stack+0x9>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 52e:	10 82       	st	Z, r1
	revese(start);
 530:	ce 01       	movw	r24, r28
 532:	0e 94 46 02 	call	0x48c	; 0x48c <revese>
	return 0;
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <__divmodhi4>:
 53c:	97 fb       	bst	r25, 7
 53e:	07 2e       	mov	r0, r23
 540:	16 f4       	brtc	.+4      	; 0x546 <__divmodhi4+0xa>
 542:	00 94       	com	r0
 544:	07 d0       	rcall	.+14     	; 0x554 <__divmodhi4_neg1>
 546:	77 fd       	sbrc	r23, 7
 548:	09 d0       	rcall	.+18     	; 0x55c <__divmodhi4_neg2>
 54a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__udivmodhi4>
 54e:	07 fc       	sbrc	r0, 7
 550:	05 d0       	rcall	.+10     	; 0x55c <__divmodhi4_neg2>
 552:	3e f4       	brtc	.+14     	; 0x562 <__divmodhi4_exit>

00000554 <__divmodhi4_neg1>:
 554:	90 95       	com	r25
 556:	81 95       	neg	r24
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__divmodhi4_neg2>:
 55c:	70 95       	com	r23
 55e:	61 95       	neg	r22
 560:	7f 4f       	sbci	r23, 0xFF	; 255

00000562 <__divmodhi4_exit>:
 562:	08 95       	ret

00000564 <__divmodsi4>:
 564:	05 2e       	mov	r0, r21
 566:	97 fb       	bst	r25, 7
 568:	1e f4       	brtc	.+6      	; 0x570 <__divmodsi4+0xc>
 56a:	00 94       	com	r0
 56c:	0e 94 c9 02 	call	0x592	; 0x592 <__negsi2>
 570:	57 fd       	sbrc	r21, 7
 572:	07 d0       	rcall	.+14     	; 0x582 <__divmodsi4_neg2>
 574:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__udivmodsi4>
 578:	07 fc       	sbrc	r0, 7
 57a:	03 d0       	rcall	.+6      	; 0x582 <__divmodsi4_neg2>
 57c:	4e f4       	brtc	.+18     	; 0x590 <__divmodsi4_exit>
 57e:	0c 94 c9 02 	jmp	0x592	; 0x592 <__negsi2>

00000582 <__divmodsi4_neg2>:
 582:	50 95       	com	r21
 584:	40 95       	com	r20
 586:	30 95       	com	r19
 588:	21 95       	neg	r18
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	4f 4f       	sbci	r20, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255

00000590 <__divmodsi4_exit>:
 590:	08 95       	ret

00000592 <__negsi2>:
 592:	90 95       	com	r25
 594:	80 95       	com	r24
 596:	70 95       	com	r23
 598:	61 95       	neg	r22
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	08 95       	ret

000005a2 <__udivmodhi4>:
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	51 e1       	ldi	r21, 0x11	; 17
 5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <__udivmodhi4_ep>

000005aa <__udivmodhi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	a6 17       	cp	r26, r22
 5b0:	b7 07       	cpc	r27, r23
 5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__udivmodhi4_ep>
 5b4:	a6 1b       	sub	r26, r22
 5b6:	b7 0b       	sbc	r27, r23

000005b8 <__udivmodhi4_ep>:
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	5a 95       	dec	r21
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__udivmodhi4_loop>
 5c0:	80 95       	com	r24
 5c2:	90 95       	com	r25
 5c4:	bc 01       	movw	r22, r24
 5c6:	cd 01       	movw	r24, r26
 5c8:	08 95       	ret

000005ca <__udivmodsi4>:
 5ca:	a1 e2       	ldi	r26, 0x21	; 33
 5cc:	1a 2e       	mov	r1, r26
 5ce:	aa 1b       	sub	r26, r26
 5d0:	bb 1b       	sub	r27, r27
 5d2:	fd 01       	movw	r30, r26
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <__udivmodsi4_ep>

000005d6 <__udivmodsi4_loop>:
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	ee 1f       	adc	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	a2 17       	cp	r26, r18
 5e0:	b3 07       	cpc	r27, r19
 5e2:	e4 07       	cpc	r30, r20
 5e4:	f5 07       	cpc	r31, r21
 5e6:	20 f0       	brcs	.+8      	; 0x5f0 <__udivmodsi4_ep>
 5e8:	a2 1b       	sub	r26, r18
 5ea:	b3 0b       	sbc	r27, r19
 5ec:	e4 0b       	sbc	r30, r20
 5ee:	f5 0b       	sbc	r31, r21

000005f0 <__udivmodsi4_ep>:
 5f0:	66 1f       	adc	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	1a 94       	dec	r1
 5fa:	69 f7       	brne	.-38     	; 0x5d6 <__udivmodsi4_loop>
 5fc:	60 95       	com	r22
 5fe:	70 95       	com	r23
 600:	80 95       	com	r24
 602:	90 95       	com	r25
 604:	9b 01       	movw	r18, r22
 606:	ac 01       	movw	r20, r24
 608:	bd 01       	movw	r22, r26
 60a:	cf 01       	movw	r24, r30
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
