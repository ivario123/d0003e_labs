
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dcf  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a4e  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d5  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000559  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000564  00000000  00000000  00002b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000309d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 eb       	ldi	r30, 0xB2	; 178
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a0 30       	cpi	r26, 0x00	; 0
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 90 01 	call	0x320	; 0x320 <main>
  82:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <is_prime>:
  e4:	8f 92       	push	r8
  e6:	9f 92       	push	r9
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	4b 01       	movw	r8, r22
  f6:	5c 01       	movw	r10, r24
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	88 16       	cp	r8, r24
  fc:	91 04       	cpc	r9, r1
  fe:	a1 04       	cpc	r10, r1
 100:	b1 04       	cpc	r11, r1
 102:	0c f1       	brlt	.+66     	; 0x146 <is_prime+0x62>
 104:	80 fe       	sbrs	r8, 0
 106:	22 c0       	rjmp	.+68     	; 0x14c <is_prime+0x68>
 108:	0f 2e       	mov	r0, r31
 10a:	f3 e0       	ldi	r31, 0x03	; 3
 10c:	cf 2e       	mov	r12, r31
 10e:	d1 2c       	mov	r13, r1
 110:	e1 2c       	mov	r14, r1
 112:	f1 2c       	mov	r15, r1
 114:	f0 2d       	mov	r31, r0
 116:	0f c0       	rjmp	.+30     	; 0x136 <is_prime+0x52>
 118:	c5 01       	movw	r24, r10
 11a:	b4 01       	movw	r22, r8
 11c:	a7 01       	movw	r20, r14
 11e:	96 01       	movw	r18, r12
 120:	0e 94 96 01 	call	0x32c	; 0x32c <__divmodsi4>
 124:	67 2b       	or	r22, r23
 126:	68 2b       	or	r22, r24
 128:	69 2b       	or	r22, r25
 12a:	99 f0       	breq	.+38     	; 0x152 <is_prime+0x6e>
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	c8 1a       	sub	r12, r24
 130:	d8 0a       	sbc	r13, r24
 132:	e8 0a       	sbc	r14, r24
 134:	f8 0a       	sbc	r15, r24
 136:	c8 14       	cp	r12, r8
 138:	d9 04       	cpc	r13, r9
 13a:	ea 04       	cpc	r14, r10
 13c:	fb 04       	cpc	r15, r11
 13e:	64 f3       	brlt	.-40     	; 0x118 <is_prime+0x34>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 c0       	rjmp	.+16     	; 0x156 <is_prime+0x72>
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 c0       	rjmp	.+10     	; 0x156 <is_prime+0x72>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <is_prime+0x72>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	cf 90       	pop	r12
 15e:	bf 90       	pop	r11
 160:	af 90       	pop	r10
 162:	9f 90       	pop	r9
 164:	8f 90       	pop	r8
 166:	08 95       	ret

00000168 <toggle_led_2>:



void toggle_led_2(void){
	// Could remove the if statement but this is more readable
	if((LCDDR8&1)== 0)
 168:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 16c:	80 fd       	sbrc	r24, 0
 16e:	06 c0       	rjmp	.+12     	; 0x17c <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 170:	e4 ef       	ldi	r30, 0xF4	; 244
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret
	else
	LCDDR8= LCDDR8^1;
 17c:	e4 ef       	ldi	r30, 0xF4	; 244
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	89 27       	eor	r24, r25
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <init>:
			// Turn LCDDR2 bit 1 high
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 18a:	e1 e6       	ldi	r30, 0x61	; 97
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 e8       	ldi	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
 192:	10 82       	st	Z, r1
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	80 83       	st	Z, r24
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	08 95       	ret

000001a6 <next_prime>:
}

/************************************************************************/
/*								TASK 4									*/
/************************************************************************/
void next_prime(long *num){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	// Computes the next prime, if is_prime is broken it loops infinitely. Terrible for real-time systems
	while(1)
	{
		// If number i smaller than 3, increment by 1
		// Else increment by 2 if the number is odd, else increment by 1
		if(*num >= 3){
 1ac:	88 81       	ld	r24, Y
 1ae:	99 81       	ldd	r25, Y+1	; 0x01
 1b0:	aa 81       	ldd	r26, Y+2	; 0x02
 1b2:	bb 81       	ldd	r27, Y+3	; 0x03
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	a1 05       	cpc	r26, r1
 1ba:	b1 05       	cpc	r27, r1
 1bc:	64 f0       	brlt	.+24     	; 0x1d6 <next_prime+0x30>
			if (*num%2 == 0)
 1be:	80 fd       	sbrc	r24, 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <next_prime+0x20>
			*num++;
 1c2:	24 96       	adiw	r28, 0x04	; 4
 1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <next_prime+0x32>
			else
			*num +=2;
 1c6:	02 96       	adiw	r24, 0x02	; 2
 1c8:	a1 1d       	adc	r26, r1
 1ca:	b1 1d       	adc	r27, r1
 1cc:	88 83       	st	Y, r24
 1ce:	99 83       	std	Y+1, r25	; 0x01
 1d0:	aa 83       	std	Y+2, r26	; 0x02
 1d2:	bb 83       	std	Y+3, r27	; 0x03
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <next_prime+0x32>
		}
		else{
			*num++;
 1d6:	24 96       	adiw	r28, 0x04	; 4
		}
		// Check if new number is a prime number
		if(is_prime(*num)==1){
 1d8:	68 81       	ld	r22, Y
 1da:	79 81       	ldd	r23, Y+1	; 0x01
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	9b 81       	ldd	r25, Y+3	; 0x03
 1e0:	0e 94 72 00 	call	0xe4	; 0xe4 <is_prime>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	11 f7       	brne	.-60     	; 0x1ac <next_prime+0x6>
			return;
		}
	}
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <toggle_button_2>:


void toggle_button_2(void){
	// Swap, if statement not needed but makes it a bit clearer
	if((LCDDR13&1)== 1){
 1ee:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1f2:	80 ff       	sbrs	r24, 0
 1f4:	0c c0       	rjmp	.+24     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
		// Look at button
		LCDDR13 = LCDDR13^1;
 1f6:	e9 ef       	ldi	r30, 0xF9	; 249
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	89 27       	eor	r24, r25
 200:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 202:	ee ef       	ldi	r30, 0xFE	; 254
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
 20c:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 20e:	e9 ef       	ldi	r30, 0xF9	; 249
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	81 60       	ori	r24, 0x01	; 1
 216:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 218:	ee ef       	ldi	r30, 0xFE	; 254
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	90 81       	ld	r25, Z
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	89 27       	eor	r24, r25
 222:	80 83       	st	Z, r24
 224:	08 95       	ret

00000226 <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
 230:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 232:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 236:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    
    // Catches wrap around condition
	// if plausible time
	if(target_time <= time){
 23a:	8c 17       	cp	r24, r28
 23c:	9d 07       	cpc	r25, r29
 23e:	68 f0       	brcs	.+26     	; 0x25a <check_interrupts+0x34>
		// If in valid range
		if((prev_time > target_time&& time <= prev_time)|| target_time > prev_time)//(prev_time < time && target_time <= time )||(prev_time > time && time >= target_time))
 240:	c6 17       	cp	r28, r22
 242:	d7 07       	cpc	r29, r23
 244:	18 f4       	brcc	.+6      	; 0x24c <check_interrupts+0x26>
 246:	68 17       	cp	r22, r24
 248:	79 07       	cpc	r23, r25
 24a:	20 f4       	brcc	.+8      	; 0x254 <check_interrupts+0x2e>
 24c:	6c 17       	cp	r22, r28
 24e:	7d 07       	cpc	r23, r29
 250:	18 f0       	brcs	.+6      	; 0x258 <check_interrupts+0x32>
 252:	03 c0       	rjmp	.+6      	; 0x25a <check_interrupts+0x34>
		{    
			// Register a timer event
			target_time=time;
 254:	ec 01       	movw	r28, r24
 256:	01 c0       	rjmp	.+2      	; 0x25a <check_interrupts+0x34>
 258:	ec 01       	movw	r28, r24
		}
	}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 25a:	1f 99       	sbic	0x03, 7	; 3
 25c:	0f c0       	rjmp	.+30     	; 0x27c <check_interrupts+0x56>
	{
		// Buttonstate 0 means that the button has been pressed and released
		if(*buttonstate==0){
 25e:	f8 01       	movw	r30, r16
 260:	80 81       	ld	r24, Z
 262:	81 11       	cpse	r24, r1
 264:	02 c0       	rjmp	.+4      	; 0x26a <check_interrupts+0x44>
			*buttonstate=1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
		}
		// Buttonstate 2 means that the button was released before this event
		if(*buttonstate == 2){
 26a:	f8 01       	movw	r30, r16
 26c:	80 81       	ld	r24, Z
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	59 f4       	brne	.+22     	; 0x288 <check_interrupts+0x62>
			// Triggers event
			toggle_button_2();
 272:	0e 94 f7 00 	call	0x1ee	; 0x1ee <toggle_button_2>
			*buttonstate = 0;
 276:	f8 01       	movw	r30, r16
 278:	10 82       	st	Z, r1
 27a:	06 c0       	rjmp	.+12     	; 0x288 <check_interrupts+0x62>
		}
	}
	else if(*buttonstate == 1){
 27c:	f8 01       	movw	r30, r16
 27e:	80 81       	ld	r24, Z
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	11 f4       	brne	.+4      	; 0x288 <check_interrupts+0x62>
		*buttonstate =2 ;
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
	
}
 288:	ce 01       	movw	r24, r28
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <task_4>:


void task_4(void){
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	29 97       	sbiw	r28, 0x09	; 9
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
	LCDDR13 = LCDDR13|1;										// Start value for the leds for switching
 2a8:	e9 ef       	ldi	r30, 0xF9	; 249
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 2b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2ba:	87 5f       	subi	r24, 0xF7	; 247
 2bc:	92 4c       	sbci	r25, 0xC2	; 194
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggered, useful to look for overflows
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	9a 81       	ldd	r25, Y+2	; 0x02
 2c6:	89 50       	subi	r24, 0x09	; 9
 2c8:	9d 43       	sbci	r25, 0x3D	; 61
 2ca:	9c 83       	std	Y+4, r25	; 0x04
 2cc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	8d 83       	std	Y+5, r24	; 0x05
	long num = 1;												// Last number checked
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	a0 e0       	ldi	r26, 0x00	; 0
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	8e 83       	std	Y+6, r24	; 0x06
 2dc:	9f 83       	std	Y+7, r25	; 0x07
 2de:	a8 87       	std	Y+8, r26	; 0x08
 2e0:	b9 87       	std	Y+9, r27	; 0x09
	
	while(1)
	{
		// Calculate the next prime
		next_prime(&num);
 2e2:	ce 01       	movw	r24, r28
 2e4:	06 96       	adiw	r24, 0x06	; 6
 2e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <next_prime>
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 2ea:	6b 81       	ldd	r22, Y+3	; 0x03
 2ec:	7c 81       	ldd	r23, Y+4	; 0x04
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	ae 01       	movw	r20, r28
 2f4:	4b 5f       	subi	r20, 0xFB	; 251
 2f6:	5f 4f       	sbci	r21, 0xFF	; 255
 2f8:	0e 94 13 01 	call	0x226	; 0x226 <check_interrupts>
 2fc:	29 81       	ldd	r18, Y+1	; 0x01
 2fe:	3a 81       	ldd	r19, Y+2	; 0x02
 300:	82 17       	cp	r24, r18
 302:	93 07       	cpc	r25, r19
 304:	71 f3       	breq	.-36     	; 0x2e2 <task_4+0x4e>
			
			toggle_led_2();
 306:	0e 94 b4 00 	call	0x168	; 0x168 <toggle_led_2>
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	9a 81       	ldd	r25, Y+2	; 0x02
 30e:	9c 83       	std	Y+4, r25	; 0x04
 310:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	9a 81       	ldd	r25, Y+2	; 0x02
 316:	87 5f       	subi	r24, 0xF7	; 247
 318:	92 4c       	sbci	r25, 0xC2	; 194
 31a:	9a 83       	std	Y+2, r25	; 0x02
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	e1 cf       	rjmp	.-62     	; 0x2e2 <task_4+0x4e>

00000320 <main>:
	}
}

int main(void)
{
	init();
 320:	0e 94 c5 00 	call	0x18a	; 0x18a <init>
	init_lcd();
 324:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
	
	// We can't run all functions after one another since they all implement some sort of busy wait
	// This would stop the next function from running.
	// Thus we need to rewrite the functions blink, button, primes to one large loop and call the helper functions
	// From there.
	task_4();
 328:	0e 94 4a 01 	call	0x294	; 0x294 <task_4>

0000032c <__divmodsi4>:
 32c:	05 2e       	mov	r0, r21
 32e:	97 fb       	bst	r25, 7
 330:	1e f4       	brtc	.+6      	; 0x338 <__divmodsi4+0xc>
 332:	00 94       	com	r0
 334:	0e 94 ad 01 	call	0x35a	; 0x35a <__negsi2>
 338:	57 fd       	sbrc	r21, 7
 33a:	07 d0       	rcall	.+14     	; 0x34a <__divmodsi4_neg2>
 33c:	0e 94 b5 01 	call	0x36a	; 0x36a <__udivmodsi4>
 340:	07 fc       	sbrc	r0, 7
 342:	03 d0       	rcall	.+6      	; 0x34a <__divmodsi4_neg2>
 344:	4e f4       	brtc	.+18     	; 0x358 <__divmodsi4_exit>
 346:	0c 94 ad 01 	jmp	0x35a	; 0x35a <__negsi2>

0000034a <__divmodsi4_neg2>:
 34a:	50 95       	com	r21
 34c:	40 95       	com	r20
 34e:	30 95       	com	r19
 350:	21 95       	neg	r18
 352:	3f 4f       	sbci	r19, 0xFF	; 255
 354:	4f 4f       	sbci	r20, 0xFF	; 255
 356:	5f 4f       	sbci	r21, 0xFF	; 255

00000358 <__divmodsi4_exit>:
 358:	08 95       	ret

0000035a <__negsi2>:
 35a:	90 95       	com	r25
 35c:	80 95       	com	r24
 35e:	70 95       	com	r23
 360:	61 95       	neg	r22
 362:	7f 4f       	sbci	r23, 0xFF	; 255
 364:	8f 4f       	sbci	r24, 0xFF	; 255
 366:	9f 4f       	sbci	r25, 0xFF	; 255
 368:	08 95       	ret

0000036a <__udivmodsi4>:
 36a:	a1 e2       	ldi	r26, 0x21	; 33
 36c:	1a 2e       	mov	r1, r26
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	fd 01       	movw	r30, r26
 374:	0d c0       	rjmp	.+26     	; 0x390 <__udivmodsi4_ep>

00000376 <__udivmodsi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	ee 1f       	adc	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	a2 17       	cp	r26, r18
 380:	b3 07       	cpc	r27, r19
 382:	e4 07       	cpc	r30, r20
 384:	f5 07       	cpc	r31, r21
 386:	20 f0       	brcs	.+8      	; 0x390 <__udivmodsi4_ep>
 388:	a2 1b       	sub	r26, r18
 38a:	b3 0b       	sbc	r27, r19
 38c:	e4 0b       	sbc	r30, r20
 38e:	f5 0b       	sbc	r31, r21

00000390 <__udivmodsi4_ep>:
 390:	66 1f       	adc	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	1a 94       	dec	r1
 39a:	69 f7       	brne	.-38     	; 0x376 <__udivmodsi4_loop>
 39c:	60 95       	com	r22
 39e:	70 95       	com	r23
 3a0:	80 95       	com	r24
 3a2:	90 95       	com	r25
 3a4:	9b 01       	movw	r18, r22
 3a6:	ac 01       	movw	r20, r24
 3a8:	bd 01       	movw	r22, r26
 3aa:	cf 01       	movw	r24, r30
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
