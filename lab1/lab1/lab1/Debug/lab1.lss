
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000004aa  0000051e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000100a  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba1  00000000  00000000  00001692  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b8  00000000  00000000  00002233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c4  00000000  00000000  00003156  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000391a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea ea       	ldi	r30, 0xAA	; 170
  70:	f4 e0       	ldi	r31, 0x04	; 4
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 9a 01 	call	0x334	; 0x334 <main>
  82:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <write_char>:
int write_long(long num){
	char buffer[7];
	num = six_least_significant(num);
	int_to_str(num,buffer);
	
}
  8a:	fb 01       	movw	r30, r22
  8c:	76 2f       	mov	r23, r22
  8e:	e6 30       	cpi	r30, 0x06	; 6
  90:	f1 05       	cpc	r31, r1
  92:	08 f0       	brcs	.+2      	; 0x96 <write_char+0xc>
  94:	47 c0       	rjmp	.+142    	; 0x124 <write_char+0x9a>
  96:	f5 95       	asr	r31
  98:	e7 95       	ror	r30
  9a:	e4 51       	subi	r30, 0x14	; 20
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	df 01       	movw	r26, r30
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <write_char+0x2c>
  a6:	70 fd       	sbrc	r23, 0
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <write_char+0x26>
  aa:	9c 91       	ld	r25, X
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	9c 93       	st	X, r25
  b0:	15 96       	adiw	r26, 0x05	; 5
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	24 30       	cpi	r18, 0x04	; 4
  b8:	31 05       	cpc	r19, r1
  ba:	ac f3       	brlt	.-22     	; 0xa6 <write_char+0x1c>
  bc:	90 ed       	ldi	r25, 0xD0	; 208
  be:	98 0f       	add	r25, r24
  c0:	9a 30       	cpi	r25, 0x0A	; 10
  c2:	60 f4       	brcc	.+24     	; 0xdc <write_char+0x52>
  c4:	a8 2f       	mov	r26, r24
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	d0 97       	sbiw	r26, 0x30	; 48
  ca:	aa 0f       	add	r26, r26
  cc:	bb 1f       	adc	r27, r27
  ce:	aa 0f       	add	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	a0 50       	subi	r26, 0x00	; 0
  d4:	bf 4f       	sbci	r27, 0xFF	; 255
  d6:	4d 91       	ld	r20, X+
  d8:	5c 91       	ld	r21, X
  da:	02 c0       	rjmp	.+4      	; 0xe0 <write_char+0x56>
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	19 c0       	rjmp	.+50     	; 0x118 <write_char+0x8e>
  e6:	94 2f       	mov	r25, r20
  e8:	9f 70       	andi	r25, 0x0F	; 15
  ea:	52 95       	swap	r21
  ec:	42 95       	swap	r20
  ee:	4f 70       	andi	r20, 0x0F	; 15
  f0:	45 27       	eor	r20, r21
  f2:	5f 70       	andi	r21, 0x0F	; 15
  f4:	45 27       	eor	r20, r21
  f6:	70 fd       	sbrc	r23, 0
  f8:	05 c0       	rjmp	.+10     	; 0x104 <write_char+0x7a>
  fa:	80 81       	ld	r24, Z
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	89 2b       	or	r24, r25
 100:	80 83       	st	Z, r24
 102:	07 c0       	rjmp	.+14     	; 0x112 <write_char+0x88>
 104:	60 81       	ld	r22, Z
 106:	a0 e1       	ldi	r26, 0x10	; 16
 108:	9a 9f       	mul	r25, r26
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	86 2b       	or	r24, r22
 110:	80 83       	st	Z, r24
 112:	35 96       	adiw	r30, 0x05	; 5
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
 118:	24 30       	cpi	r18, 0x04	; 4
 11a:	31 05       	cpc	r19, r1
 11c:	24 f3       	brlt	.-56     	; 0xe6 <write_char+0x5c>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret
 124:	08 95       	ret

00000126 <write_string>:
int write_string(char* ch, int first_pos){
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	8c 01       	movw	r16, r24
 130:	cb 01       	movw	r24, r22
	first_pos = first_pos%MAX_POS;
 132:	65 e0       	ldi	r22, 0x05	; 5
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__divmodhi4>
 13a:	ec 01       	movw	r28, r24
	while(*ch != '\0'){
 13c:	0c c0       	rjmp	.+24     	; 0x156 <write_string+0x30>
		write_char(*ch,first_pos);
 13e:	be 01       	movw	r22, r28
 140:	0e 94 45 00 	call	0x8a	; 0x8a <write_char>
		first_pos++;
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
		first_pos = first_pos%MAX_POS;
 148:	65 e0       	ldi	r22, 0x05	; 5
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__divmodhi4>
 150:	ec 01       	movw	r28, r24
		ch++;
 152:	0f 5f       	subi	r16, 0xFF	; 255
 154:	1f 4f       	sbci	r17, 0xFF	; 255
	int_to_str(num,buffer);
	
}
int write_string(char* ch, int first_pos){
	first_pos = first_pos%MAX_POS;
	while(*ch != '\0'){
 156:	f8 01       	movw	r30, r16
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	f0 cf       	rjmp	.-32     	; 0x13e <write_string+0x18>
		first_pos++;
		first_pos = first_pos%MAX_POS;
		ch++;
	}
	return success;
}
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret

0000016c <init_lcd>:
		//-----------------------------------
		// Status manipulation
		//-----------------------------------
		
		// enabling the lcd
		LCDCRA = LCDCRA|(1<<LCDEN);
 16c:	e4 ee       	ldi	r30, 0xE4	; 228
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 83       	st	Z, r24
		// Setting low power wave form
		LCDCRA = LCDCRA|(1<<LCDAB);
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
		// disabling the interrupt
		LCDCRA = LCDCRA&(~(1<<LCDIF));
 17c:	80 81       	ld	r24, Z
 17e:	8f 7e       	andi	r24, 0xEF	; 239
 180:	80 83       	st	Z, r24
		// Disabling blanking
		LCDCRA = LCDCRA&(~(1));
 182:	80 81       	ld	r24, Z
 184:	8e 7f       	andi	r24, 0xFE	; 254
 186:	80 83       	st	Z, r24
		//-----------------------------------
		// Clock manipulation
		//-----------------------------------
		
		// setting the clock source to external
		LCDCRB = LCDCRB|(1<<LCDCS);
 188:	e5 ee       	ldi	r30, 0xE5	; 229
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
		// Setting Bias
		LCDCRB = LCDCRB&(~(1<<LCD2B));
 192:	80 81       	ld	r24, Z
 194:	8f 7b       	andi	r24, 0xBF	; 191
 196:	80 83       	st	Z, r24
		// Setting duty cycle
		LCDCRB = LCDCRB|((3<<LCDMUX0));
 198:	80 81       	ld	r24, Z
 19a:	80 63       	ori	r24, 0x30	; 48
 19c:	80 83       	st	Z, r24
		// Setting number of active segments to 25
		LCDCRB = LCDCRB|(7);
 19e:	80 81       	ld	r24, Z
 1a0:	87 60       	ori	r24, 0x07	; 7
 1a2:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Frame rate manipulation
		//-----------------------------------
		// Set n = 16
		LCDFRR = LCDFRR&(~(7<<LCDPS0));
 1a4:	e6 ee       	ldi	r30, 0xE6	; 230
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8f 78       	andi	r24, 0x8F	; 143
 1ac:	80 83       	st	Z, r24
		// Set D = 8
		LCDFRR = LCDFRR|(7);
 1ae:	80 81       	ld	r24, Z
 1b0:	87 60       	ori	r24, 0x07	; 7
 1b2:	80 83       	st	Z, r24
		
		//-----------------------------------
		// Contrast manipulation
		//-----------------------------------
		// Setting msb->msb-2 to 0 to set drive time to 300 us
		LCDCCR = LCDCCR&(~(7<< LCDDC0));
 1b4:	e7 ee       	ldi	r30, 0xE7	; 231
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 71       	andi	r24, 0x1F	; 31
 1bc:	80 83       	st	Z, r24
		// Setting lsb -> lsb+3 to 1 to set voltage to 3.35V 
		LCDCCR = LCDCCR|((15));
 1be:	80 81       	ld	r24, Z
 1c0:	8f 60       	ori	r24, 0x0F	; 15
 1c2:	80 83       	st	Z, r24
		
		return success;
}
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	08 95       	ret

000001ca <is_prime>:





int is_prime(long num){
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	cf 93       	push	r28
 1d4:	6b 01       	movw	r12, r22
 1d6:	7c 01       	movw	r14, r24
	
	// base cases 0-3
	if (num <= 3)
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	c8 16       	cp	r12, r24
 1dc:	d1 04       	cpc	r13, r1
 1de:	e1 04       	cpc	r14, r1
 1e0:	f1 04       	cpc	r15, r1
 1e2:	24 f1       	brlt	.+72     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
		return 1;
	// base case num is even
	if(num%2 == 0)
 1e4:	c0 fe       	sbrs	r12, 0
 1e6:	25 c0       	rjmp	.+74     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 1e8:	c3 e0       	ldi	r28, 0x03	; 3
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <is_prime+0x34>
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
 1ec:	c7 01       	movw	r24, r14
 1ee:	b6 01       	movw	r22, r12
 1f0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__divmodsi4>
 1f4:	67 2b       	or	r22, r23
 1f6:	68 2b       	or	r22, r24
 1f8:	69 2b       	or	r22, r25
 1fa:	f1 f0       	breq	.+60     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
			return 0;
		counter+=2;
 1fc:	ce 5f       	subi	r28, 0xFE	; 254
	if(num%2 == 0)
		return 0;
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
 1fe:	2c 2f       	mov	r18, r28
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	d7 01       	movw	r26, r14
 208:	c6 01       	movw	r24, r12
 20a:	ff 20       	and	r15, r15
 20c:	1c f4       	brge	.+6      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	a1 1d       	adc	r26, r1
 212:	b1 1d       	adc	r27, r1
 214:	b5 95       	asr	r27
 216:	a7 95       	ror	r26
 218:	97 95       	ror	r25
 21a:	87 95       	ror	r24
 21c:	28 17       	cp	r18, r24
 21e:	39 07       	cpc	r19, r25
 220:	4a 07       	cpc	r20, r26
 222:	5b 07       	cpc	r21, r27
 224:	1c f3       	brlt	.-58     	; 0x1ec <is_prime+0x22>
		if(num%counter == 0)
			return 0;
		counter+=2;
	}
	return 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 c0       	rjmp	.+16     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>

int is_prime(long num){
	
	// base cases 0-3
	if (num <= 3)
		return 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	05 c0       	rjmp	.+10     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
	// base case num is even
	if(num%2 == 0)
		return 0;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
	// Start on 3
	uint8_t counter = 3;
	// Only check odd numbers up to half of num
	while(counter <num/2){
		if(num%counter == 0)
			return 0;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
		counter+=2;
	}
	return 1;
}
 23c:	cf 91       	pop	r28
 23e:	ff 90       	pop	r15
 240:	ef 90       	pop	r14
 242:	df 90       	pop	r13
 244:	cf 90       	pop	r12
 246:	08 95       	ret

00000248 <primes>:

int primes(){
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	2a 97       	sbiw	r28, 0x0a	; 10
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
	long num = 1;
 25c:	c1 2c       	mov	r12, r1
 25e:	d1 2c       	mov	r13, r1
 260:	76 01       	movw	r14, r12
 262:	c3 94       	inc	r12
	while(1)
	{
		if(num >= 3){
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	c8 16       	cp	r12, r24
 268:	d1 04       	cpc	r13, r1
 26a:	e1 04       	cpc	r14, r1
 26c:	f1 04       	cpc	r15, r1
 26e:	74 f0       	brlt	.+28     	; 0x28c <primes+0x44>
			if (num%2 == 0)
 270:	c0 fc       	sbrc	r12, 0
 272:	06 c0       	rjmp	.+12     	; 0x280 <primes+0x38>
				num++;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	c8 1a       	sub	r12, r24
 278:	d8 0a       	sbc	r13, r24
 27a:	e8 0a       	sbc	r14, r24
 27c:	f8 0a       	sbc	r15, r24
 27e:	0b c0       	rjmp	.+22     	; 0x296 <primes+0x4e>
			else
				num +=2;	
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	c8 0e       	add	r12, r24
 284:	d1 1c       	adc	r13, r1
 286:	e1 1c       	adc	r14, r1
 288:	f1 1c       	adc	r15, r1
 28a:	05 c0       	rjmp	.+10     	; 0x296 <primes+0x4e>
		}
		else 
			num++;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	c8 1a       	sub	r12, r24
 290:	d8 0a       	sbc	r13, r24
 292:	e8 0a       	sbc	r14, r24
 294:	f8 0a       	sbc	r15, r24
		if(is_prime(num)==1){
 296:	c7 01       	movw	r24, r14
 298:	b6 01       	movw	r22, r12
 29a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <is_prime>
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	09 f7       	brne	.-62     	; 0x264 <primes+0x1c>
			uint8_t temp = six_least_significant(num);
 2a2:	c7 01       	movw	r24, r14
 2a4:	b6 01       	movw	r22, r12
 2a6:	0e 94 bd 01 	call	0x37a	; 0x37a <six_least_significant>
		
		
			char buffer[10];
			int_to_str(temp,buffer);
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 c5 01 	call	0x38a	; 0x38a <int_to_str>
			write_string(buffer,0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 93 00 	call	0x126	; 0x126 <write_string>
 2c2:	d0 cf       	rjmp	.-96     	; 0x264 <primes+0x1c>

000002c4 <toggle_led>:
	}
	return 0;
}

int toggle_led(){
	if((LCDDR0&2)>>1== 0)
 2c4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 2c8:	81 fd       	sbrc	r24, 1
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <toggle_led+0x14>
		LCDDR0 = LCDDR0|2;
 2cc:	ec ee       	ldi	r30, 0xEC	; 236
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	82 60       	ori	r24, 0x02	; 2
 2d4:	80 83       	st	Z, r24
 2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <toggle_led+0x20>
	else
		LCDDR0= LCDDR0^2;
 2d8:	ec ee       	ldi	r30, 0xEC	; 236
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	90 81       	ld	r25, Z
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	89 27       	eor	r24, r25
 2e2:	80 83       	st	Z, r24
	return 0;
}
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret

000002ea <blink>:
int blink(){
	uint16_t freq = 31250/2;		// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	uint16_t last_time = TCNT1;
 2ea:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2ee:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
 2f2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2f6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2fa:	ce 01       	movw	r24, r28
 2fc:	87 5f       	subi	r24, 0xF7	; 247
 2fe:	92 4c       	sbci	r25, 0xC2	; 194
 300:	28 17       	cp	r18, r24
 302:	39 07       	cpc	r19, r25
 304:	b1 f7       	brne	.-20     	; 0x2f2 <blink+0x8>
		last_time =(uint16_t)TCNT1;
 306:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 30a:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
		toggle_led();
 30e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <toggle_led>
	}
 312:	ef cf       	rjmp	.-34     	; 0x2f2 <blink+0x8>

00000314 <init>:
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
			target_time+=freq;
 314:	e1 e6       	ldi	r30, 0x61	; 97
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	80 83       	st	Z, r24
 31c:	10 82       	st	Z, r1
 31e:	e1 e8       	ldi	r30, 0x81	; 129
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	84 60       	ori	r24, 0x04	; 4
 326:	80 83       	st	Z, r24
 328:	85 b1       	in	r24, 0x05	; 5
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	85 b9       	out	0x05, r24	; 5
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	08 95       	ret

00000334 <main>:
    }
}

int main(void)
{
	if(success != init())
 334:	0e 94 8a 01 	call	0x314	; 0x314 <init>
 338:	89 2b       	or	r24, r25
 33a:	11 f0       	breq	.+4      	; 0x340 <main+0xc>
		blink();
 33c:	0e 94 75 01 	call	0x2ea	; 0x2ea <blink>
	if(success != init_lcd())
 340:	0e 94 b6 00 	call	0x16c	; 0x16c <init_lcd>
 344:	89 2b       	or	r24, r25
 346:	11 f0       	breq	.+4      	; 0x34c <main+0x18>
		blink();
 348:	0e 94 75 01 	call	0x2ea	; 0x2ea <blink>
	//write_char('0',1);
	//write_char('1',2);
	
	//blink();
	//button();
	primes();
 34c:	0e 94 24 01 	call	0x248	; 0x248 <primes>
 350:	ff cf       	rjmp	.-2      	; 0x350 <main+0x1c>

00000352 <revese>:
 * string.c
 *
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
 352:	dc 01       	movw	r26, r24
	char * eos = str;
 354:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 356:	01 c0       	rjmp	.+2      	; 0x35a <revese+0x8>
	eos++;
 358:	31 96       	adiw	r30, 0x01	; 1
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 35a:	80 81       	ld	r24, Z
 35c:	81 11       	cpse	r24, r1
 35e:	fc cf       	rjmp	.-8      	; 0x358 <revese+0x6>
	eos++;
	eos--;
 360:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 362:	05 c0       	rjmp	.+10     	; 0x36e <revese+0x1c>
		char temp = *eos;
 364:	80 81       	ld	r24, Z
		*eos = *str;
 366:	9c 91       	ld	r25, X
 368:	90 83       	st	Z, r25
		*str = temp;
 36a:	8d 93       	st	X+, r24
		eos--;
 36c:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 36e:	ea 17       	cp	r30, r26
 370:	fb 07       	cpc	r31, r27
 372:	c0 f7       	brcc	.-16     	; 0x364 <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	08 95       	ret

0000037a <six_least_significant>:
int six_least_significant(long num){
	return (num-(num/1000000)*1000000);
 37a:	20 e4       	ldi	r18, 0x40	; 64
 37c:	32 e4       	ldi	r19, 0x42	; 66
 37e:	4f e0       	ldi	r20, 0x0F	; 15
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__divmodsi4>
}
 386:	cb 01       	movw	r24, r22
 388:	08 95       	ret

0000038a <int_to_str>:
int int_to_str(int num,char* buffer){
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	eb 01       	movw	r28, r22
	if (num == 0){
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	a1 f4       	brne	.+40     	; 0x3bc <int_to_str+0x32>
		*buffer = 48;
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 398:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 39a:	17 c0       	rjmp	.+46     	; 0x3ca <int_to_str+0x40>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 39c:	28 2f       	mov	r18, r24
 39e:	6a e0       	ldi	r22, 0x0A	; 10
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__divmodhi4>
 3a6:	86 2f       	mov	r24, r22
 3a8:	97 2f       	mov	r25, r23
 3aa:	66 0f       	add	r22, r22
 3ac:	36 2f       	mov	r19, r22
 3ae:	33 0f       	add	r19, r19
 3b0:	33 0f       	add	r19, r19
 3b2:	63 0f       	add	r22, r19
 3b4:	26 1b       	sub	r18, r22
 3b6:	20 5d       	subi	r18, 0xD0	; 208
 3b8:	21 93       	st	Z+, r18
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <int_to_str+0x34>
 3bc:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	69 f7       	brne	.-38     	; 0x39c <int_to_str+0x12>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 3c2:	10 82       	st	Z, r1
	revese(start);
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 a9 01 	call	0x352	; 0x352 <revese>
	return 0;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	08 95       	ret

000003d4 <__divmodhi4>:
 3d4:	97 fb       	bst	r25, 7
 3d6:	07 2e       	mov	r0, r23
 3d8:	16 f4       	brtc	.+4      	; 0x3de <__divmodhi4+0xa>
 3da:	00 94       	com	r0
 3dc:	07 d0       	rcall	.+14     	; 0x3ec <__divmodhi4_neg1>
 3de:	77 fd       	sbrc	r23, 7
 3e0:	09 d0       	rcall	.+18     	; 0x3f4 <__divmodhi4_neg2>
 3e2:	0e 94 1d 02 	call	0x43a	; 0x43a <__udivmodhi4>
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	05 d0       	rcall	.+10     	; 0x3f4 <__divmodhi4_neg2>
 3ea:	3e f4       	brtc	.+14     	; 0x3fa <__divmodhi4_exit>

000003ec <__divmodhi4_neg1>:
 3ec:	90 95       	com	r25
 3ee:	81 95       	neg	r24
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__divmodhi4_neg2>:
 3f4:	70 95       	com	r23
 3f6:	61 95       	neg	r22
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255

000003fa <__divmodhi4_exit>:
 3fa:	08 95       	ret

000003fc <__divmodsi4>:
 3fc:	05 2e       	mov	r0, r21
 3fe:	97 fb       	bst	r25, 7
 400:	1e f4       	brtc	.+6      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 402:	00 94       	com	r0
 404:	0e 94 15 02 	call	0x42a	; 0x42a <__negsi2>
 408:	57 fd       	sbrc	r21, 7
 40a:	07 d0       	rcall	.+14     	; 0x41a <__divmodsi4_neg2>
 40c:	0e 94 31 02 	call	0x462	; 0x462 <__udivmodsi4>
 410:	07 fc       	sbrc	r0, 7
 412:	03 d0       	rcall	.+6      	; 0x41a <__divmodsi4_neg2>
 414:	4e f4       	brtc	.+18     	; 0x428 <__divmodsi4_exit>
 416:	0c 94 15 02 	jmp	0x42a	; 0x42a <__negsi2>

0000041a <__divmodsi4_neg2>:
 41a:	50 95       	com	r21
 41c:	40 95       	com	r20
 41e:	30 95       	com	r19
 420:	21 95       	neg	r18
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	4f 4f       	sbci	r20, 0xFF	; 255
 426:	5f 4f       	sbci	r21, 0xFF	; 255

00000428 <__divmodsi4_exit>:
 428:	08 95       	ret

0000042a <__negsi2>:
 42a:	90 95       	com	r25
 42c:	80 95       	com	r24
 42e:	70 95       	com	r23
 430:	61 95       	neg	r22
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	08 95       	ret

0000043a <__udivmodhi4>:
 43a:	aa 1b       	sub	r26, r26
 43c:	bb 1b       	sub	r27, r27
 43e:	51 e1       	ldi	r21, 0x11	; 17
 440:	07 c0       	rjmp	.+14     	; 0x450 <__udivmodhi4_ep>

00000442 <__udivmodhi4_loop>:
 442:	aa 1f       	adc	r26, r26
 444:	bb 1f       	adc	r27, r27
 446:	a6 17       	cp	r26, r22
 448:	b7 07       	cpc	r27, r23
 44a:	10 f0       	brcs	.+4      	; 0x450 <__udivmodhi4_ep>
 44c:	a6 1b       	sub	r26, r22
 44e:	b7 0b       	sbc	r27, r23

00000450 <__udivmodhi4_ep>:
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	5a 95       	dec	r21
 456:	a9 f7       	brne	.-22     	; 0x442 <__udivmodhi4_loop>
 458:	80 95       	com	r24
 45a:	90 95       	com	r25
 45c:	bc 01       	movw	r22, r24
 45e:	cd 01       	movw	r24, r26
 460:	08 95       	ret

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
