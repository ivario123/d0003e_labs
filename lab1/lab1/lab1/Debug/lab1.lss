
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000005b0  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f13  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b47  00000000  00000000  000016b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b1  00000000  00000000  000021fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000579  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000771  00000000  00000000  00003155  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000038c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 eb       	ldi	r30, 0xB0	; 176
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
  82:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <write_char>:
  e4:	cf 93       	push	r28
  e6:	c6 2f       	mov	r28, r22
  e8:	66 30       	cpi	r22, 0x06	; 6
  ea:	71 05       	cpc	r23, r1
  ec:	c0 f5       	brcc	.+112    	; 0x15e <write_char+0x7a>
  ee:	75 95       	asr	r23
  f0:	67 95       	ror	r22
  f2:	fb 01       	movw	r30, r22
  f4:	e4 51       	subi	r30, 0x14	; 20
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	90 ed       	ldi	r25, 0xD0	; 208
  fa:	98 0f       	add	r25, r24
  fc:	9a 30       	cpi	r25, 0x0A	; 10
  fe:	60 f4       	brcc	.+24     	; 0x118 <write_char+0x34>
 100:	a8 2f       	mov	r26, r24
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	d0 97       	sbiw	r26, 0x30	; 48
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	aa 0f       	add	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	a0 50       	subi	r26, 0x00	; 0
 110:	bf 4f       	sbci	r27, 0xFF	; 255
 112:	4d 91       	ld	r20, X+
 114:	5c 91       	ld	r21, X
 116:	02 c0       	rjmp	.+4      	; 0x11c <write_char+0x38>
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	1b c0       	rjmp	.+54     	; 0x158 <write_char+0x74>
 122:	94 2f       	mov	r25, r20
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	52 95       	swap	r21
 128:	42 95       	swap	r20
 12a:	4f 70       	andi	r20, 0x0F	; 15
 12c:	45 27       	eor	r20, r21
 12e:	5f 70       	andi	r21, 0x0F	; 15
 130:	45 27       	eor	r20, r21
 132:	c0 fd       	sbrc	r28, 0
 134:	05 c0       	rjmp	.+10     	; 0x140 <write_char+0x5c>
 136:	80 81       	ld	r24, Z
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
 13e:	09 c0       	rjmp	.+18     	; 0x152 <write_char+0x6e>
 140:	80 81       	ld	r24, Z
 142:	68 2f       	mov	r22, r24
 144:	6f 70       	andi	r22, 0x0F	; 15
 146:	70 e1       	ldi	r23, 0x10	; 16
 148:	97 9f       	mul	r25, r23
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	86 2b       	or	r24, r22
 150:	80 83       	st	Z, r24
 152:	35 96       	adiw	r30, 0x05	; 5
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	24 30       	cpi	r18, 0x04	; 4
 15a:	31 05       	cpc	r19, r1
 15c:	14 f3       	brlt	.-60     	; 0x122 <write_char+0x3e>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <write_string>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
 16c:	cb 01       	movw	r24, r22
 16e:	65 e0       	ldi	r22, 0x05	; 5
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodhi4>
 176:	ec 01       	movw	r28, r24
 178:	0c c0       	rjmp	.+24     	; 0x192 <write_string+0x30>
 17a:	be 01       	movw	r22, r28
 17c:	0e 94 72 00 	call	0xe4	; 0xe4 <write_char>
 180:	ce 01       	movw	r24, r28
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodhi4>
 18c:	ec 01       	movw	r28, r24
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
 192:	f8 01       	movw	r30, r16
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f0 cf       	rjmp	.-32     	; 0x17a <write_string+0x18>
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <write_long>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	29 97       	sbiw	r28, 0x09	; 9
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	ae 01       	movw	r20, r28
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	0e 94 27 02 	call	0x44e	; 0x44e <six_least_significant>
 1c2:	be 01       	movw	r22, r28
 1c4:	6d 5f       	subi	r22, 0xFD	; 253
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	0e 94 4a 02 	call	0x494	; 0x494 <int_to_str>
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	ce 01       	movw	r24, r28
 1d6:	03 96       	adiw	r24, 0x03	; 3
 1d8:	0e 94 b1 00 	call	0x162	; 0x162 <write_string>
 1dc:	29 96       	adiw	r28, 0x09	; 9
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <is_prime>:
 1ee:	8f 92       	push	r8
 1f0:	9f 92       	push	r9
 1f2:	af 92       	push	r10
 1f4:	bf 92       	push	r11
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	4b 01       	movw	r8, r22
 200:	5c 01       	movw	r10, r24
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	88 16       	cp	r8, r24
 206:	91 04       	cpc	r9, r1
 208:	a1 04       	cpc	r10, r1
 20a:	b1 04       	cpc	r11, r1
 20c:	0c f1       	brlt	.+66     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 20e:	80 fe       	sbrs	r8, 0
 210:	22 c0       	rjmp	.+68     	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 212:	0f 2e       	mov	r0, r31
 214:	f3 e0       	ldi	r31, 0x03	; 3
 216:	cf 2e       	mov	r12, r31
 218:	d1 2c       	mov	r13, r1
 21a:	e1 2c       	mov	r14, r1
 21c:	f1 2c       	mov	r15, r1
 21e:	f0 2d       	mov	r31, r0
 220:	0f c0       	rjmp	.+30     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 222:	c5 01       	movw	r24, r10
 224:	b4 01       	movw	r22, r8
 226:	a7 01       	movw	r20, r14
 228:	96 01       	movw	r18, r12
 22a:	0e 94 81 02 	call	0x502	; 0x502 <__divmodsi4>
 22e:	67 2b       	or	r22, r23
 230:	68 2b       	or	r22, r24
 232:	69 2b       	or	r22, r25
 234:	99 f0       	breq	.+38     	; 0x25c <__EEPROM_REGION_LENGTH__+0x5c>
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	c8 1a       	sub	r12, r24
 23a:	d8 0a       	sbc	r13, r24
 23c:	e8 0a       	sbc	r14, r24
 23e:	f8 0a       	sbc	r15, r24
 240:	c8 14       	cp	r12, r8
 242:	d9 04       	cpc	r13, r9
 244:	ea 04       	cpc	r14, r10
 246:	fb 04       	cpc	r15, r11
 248:	64 f3       	brlt	.-40     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	08 c0       	rjmp	.+16     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	05 c0       	rjmp	.+10     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	9f 90       	pop	r9
 26e:	8f 90       	pop	r8
 270:	08 95       	ret

00000272 <toggle_led_2>:



void toggle_led_2(void){
	// Could remove the if statement but this is more readable
	if((LCDDR8&1)== 0)
 272:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 276:	80 fd       	sbrc	r24, 0
 278:	06 c0       	rjmp	.+12     	; 0x286 <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 27a:	e4 ef       	ldi	r30, 0xF4	; 244
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	81 60       	ori	r24, 0x01	; 1
 282:	80 83       	st	Z, r24
 284:	08 95       	ret
	else
	LCDDR8= LCDDR8^1;
 286:	e4 ef       	ldi	r30, 0xF4	; 244
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	89 27       	eor	r24, r25
 290:	80 83       	st	Z, r24
 292:	08 95       	ret

00000294 <init>:
			// Turn LCDDR2 bit 1 high
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 294:	e1 e6       	ldi	r30, 0x61	; 97
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	80 83       	st	Z, r24
 29c:	10 82       	st	Z, r1
 29e:	e1 e8       	ldi	r30, 0x81	; 129
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	80 83       	st	Z, r24
 2a8:	85 b1       	in	r24, 0x05	; 5
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	85 b9       	out	0x05, r24	; 5
 2ae:	08 95       	ret

000002b0 <next_prime>:
}

/************************************************************************/
/*								TASK 4									*/
/************************************************************************/
void next_prime(long *num){
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
	// Computes the next prime, if is_prime is broken it loops infinitely. Terrible for real-time systems
	while(1)
	{
		// If number i smaller than 3, increment by 1
		// Else increment by 2 if the number is odd, else increment by 1
		*num+=1;
 2b6:	88 81       	ld	r24, Y
 2b8:	99 81       	ldd	r25, Y+1	; 0x01
 2ba:	aa 81       	ldd	r26, Y+2	; 0x02
 2bc:	bb 81       	ldd	r27, Y+3	; 0x03
 2be:	bc 01       	movw	r22, r24
 2c0:	cd 01       	movw	r24, r26
 2c2:	6f 5f       	subi	r22, 0xFF	; 255
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255
 2c6:	8f 4f       	sbci	r24, 0xFF	; 255
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	68 83       	st	Y, r22
 2cc:	79 83       	std	Y+1, r23	; 0x01
 2ce:	8a 83       	std	Y+2, r24	; 0x02
 2d0:	9b 83       	std	Y+3, r25	; 0x03
			
		// Check if new number is a prime number
		if(is_prime(*num)==1){
 2d2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <is_prime>
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	71 f7       	brne	.-36     	; 0x2b6 <next_prime+0x6>
			return;
		}
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <toggle_button_2>:


void toggle_button_2(void){
	// Swap, if statement not needed but makes it a bit clearer
	if((LCDDR13&1)== 1){
 2e0:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 2e4:	80 ff       	sbrs	r24, 0
 2e6:	0c c0       	rjmp	.+24     	; 0x300 <toggle_button_2+0x20>
		// Look at button
		LCDDR13 = LCDDR13^1;
 2e8:	e9 ef       	ldi	r30, 0xF9	; 249
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	90 81       	ld	r25, Z
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	89 27       	eor	r24, r25
 2f2:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 2f4:	ee ef       	ldi	r30, 0xFE	; 254
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	80 83       	st	Z, r24
 2fe:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 300:	e9 ef       	ldi	r30, 0xF9	; 249
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	81 60       	ori	r24, 0x01	; 1
 308:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 30a:	ee ef       	ldi	r30, 0xFE	; 254
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	89 27       	eor	r24, r25
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	ec 01       	movw	r28, r24
 322:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 324:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 328:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    
    // Catches wrap around condition
	// if plausible time
	if(target_time <= time){
 32c:	8c 17       	cp	r24, r28
 32e:	9d 07       	cpc	r25, r29
 330:	68 f0       	brcs	.+26     	; 0x34c <check_interrupts+0x34>
		// If in valid range
		if((prev_time > target_time&& time <= prev_time)|| target_time > prev_time)
 332:	c6 17       	cp	r28, r22
 334:	d7 07       	cpc	r29, r23
 336:	18 f4       	brcc	.+6      	; 0x33e <check_interrupts+0x26>
 338:	68 17       	cp	r22, r24
 33a:	79 07       	cpc	r23, r25
 33c:	20 f4       	brcc	.+8      	; 0x346 <check_interrupts+0x2e>
 33e:	6c 17       	cp	r22, r28
 340:	7d 07       	cpc	r23, r29
 342:	18 f0       	brcs	.+6      	; 0x34a <check_interrupts+0x32>
 344:	03 c0       	rjmp	.+6      	; 0x34c <check_interrupts+0x34>
		{    
			// Register a timer event
			target_time=time;
 346:	ec 01       	movw	r28, r24
 348:	01 c0       	rjmp	.+2      	; 0x34c <check_interrupts+0x34>
 34a:	ec 01       	movw	r28, r24
		}
	}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 34c:	1f 99       	sbic	0x03, 7	; 3
 34e:	0f c0       	rjmp	.+30     	; 0x36e <check_interrupts+0x56>
	{
		// Buttonstate 0 means that the button has been pressed and released
		if(*buttonstate==0){
 350:	f8 01       	movw	r30, r16
 352:	80 81       	ld	r24, Z
 354:	81 11       	cpse	r24, r1
 356:	02 c0       	rjmp	.+4      	; 0x35c <check_interrupts+0x44>
			*buttonstate=1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 83       	st	Z, r24
		}
		// Buttonstate 2 means that the button was released before this event
		if(*buttonstate == 2){
 35c:	f8 01       	movw	r30, r16
 35e:	80 81       	ld	r24, Z
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	59 f4       	brne	.+22     	; 0x37a <check_interrupts+0x62>
			// Triggers event
			toggle_button_2();
 364:	0e 94 70 01 	call	0x2e0	; 0x2e0 <toggle_button_2>
			*buttonstate = 0;
 368:	f8 01       	movw	r30, r16
 36a:	10 82       	st	Z, r1
 36c:	06 c0       	rjmp	.+12     	; 0x37a <check_interrupts+0x62>
		}
	}
	else if(*buttonstate == 1){
 36e:	f8 01       	movw	r30, r16
 370:	80 81       	ld	r24, Z
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	11 f4       	brne	.+4      	; 0x37a <check_interrupts+0x62>
		*buttonstate =2 ;
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
	
}
 37a:	ce 01       	movw	r24, r28
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	08 95       	ret

00000386 <task_4>:


void task_4(void){
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	29 97       	sbiw	r28, 0x09	; 9
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
	LCDDR13 = LCDDR13|1;										// Start value for the leds for switching
 39a:	e9 ef       	ldi	r30, 0xF9	; 249
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 3a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3ac:	87 5f       	subi	r24, 0xF7	; 247
 3ae:	92 4c       	sbci	r25, 0xC2	; 194
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggered, useful to look for overflows
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	9a 81       	ldd	r25, Y+2	; 0x02
 3b8:	89 50       	subi	r24, 0x09	; 9
 3ba:	9d 43       	sbci	r25, 0x3D	; 61
 3bc:	9c 83       	std	Y+4, r25	; 0x04
 3be:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	8d 83       	std	Y+5, r24	; 0x05
	long num = 1;												// Last number checked
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a0 e0       	ldi	r26, 0x00	; 0
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	8e 83       	std	Y+6, r24	; 0x06
 3ce:	9f 83       	std	Y+7, r25	; 0x07
 3d0:	a8 87       	std	Y+8, r26	; 0x08
 3d2:	b9 87       	std	Y+9, r27	; 0x09
	
	while(1)
	{
		// Calculate the next prime
		next_prime(&num);
 3d4:	ce 01       	movw	r24, r28
 3d6:	06 96       	adiw	r24, 0x06	; 6
 3d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <next_prime>
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 3dc:	6b 81       	ldd	r22, Y+3	; 0x03
 3de:	7c 81       	ldd	r23, Y+4	; 0x04
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	9a 81       	ldd	r25, Y+2	; 0x02
 3e4:	ae 01       	movw	r20, r28
 3e6:	4b 5f       	subi	r20, 0xFB	; 251
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	0e 94 8c 01 	call	0x318	; 0x318 <check_interrupts>
 3ee:	29 81       	ldd	r18, Y+1	; 0x01
 3f0:	3a 81       	ldd	r19, Y+2	; 0x02
 3f2:	82 17       	cp	r24, r18
 3f4:	93 07       	cpc	r25, r19
 3f6:	61 f0       	breq	.+24     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
			
			toggle_led_2();
 3f8:	0e 94 39 01 	call	0x272	; 0x272 <toggle_led_2>
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	9c 83       	std	Y+4, r25	; 0x04
 402:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	9a 81       	ldd	r25, Y+2	; 0x02
 408:	87 5f       	subi	r24, 0xF7	; 247
 40a:	92 4c       	sbci	r25, 0xC2	; 194
 40c:	9a 83       	std	Y+2, r25	; 0x02
 40e:	89 83       	std	Y+1, r24	; 0x01
		}
		
		
		write_long(num);
 410:	6e 81       	ldd	r22, Y+6	; 0x06
 412:	7f 81       	ldd	r23, Y+7	; 0x07
 414:	88 85       	ldd	r24, Y+8	; 0x08
 416:	99 85       	ldd	r25, Y+9	; 0x09
 418:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_long>
	}
 41c:	db cf       	rjmp	.-74     	; 0x3d4 <task_4+0x4e>

0000041e <main>:
/************************************************************************/
/*							MAIN FUNCTION								*/
/************************************************************************/
int main(void)
{
	init();
 41e:	0e 94 4a 01 	call	0x294	; 0x294 <init>
	init_lcd();
 422:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
	/************************************************************************/
	// We can't run all functions after one another since they all implement some sort of busy wait
	// This would stop the next function from running.
	// Thus we need to rewrite the functions blink, button, primes to one large loop and call the helper functions
	// From there.
	task_4();
 426:	0e 94 c3 01 	call	0x386	; 0x386 <task_4>

0000042a <revese>:

void revese(char* str){
 42a:	dc 01       	movw	r26, r24
	// O(n) Memory algorithm for reversing string
	// First find the end of the string
	char * eos = str;
 42c:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 42e:	01 c0       	rjmp	.+2      	; 0x432 <revese+0x8>
		eos++;
 430:	31 96       	adiw	r30, 0x01	; 1

void revese(char* str){
	// O(n) Memory algorithm for reversing string
	// First find the end of the string
	char * eos = str;
	while(*eos!='\0')
 432:	80 81       	ld	r24, Z
 434:	81 11       	cpse	r24, r1
 436:	fc cf       	rjmp	.-8      	; 0x430 <revese+0x6>
		eos++;
	eos--;
 438:	31 97       	sbiw	r30, 0x01	; 1
	// Then loop until the end pointer has passed the start pointer
	while(eos>=str){
 43a:	05 c0       	rjmp	.+10     	; 0x446 <revese+0x1c>
		// Temp variable used for swapping
		char temp = *eos;
 43c:	80 81       	ld	r24, Z
		// swap the chars
		*eos = *str;
 43e:	9c 91       	ld	r25, X
 440:	90 83       	st	Z, r25
		*str = temp;
 442:	8d 93       	st	X+, r24
		// Decrement/increment
		eos--;
 444:	31 97       	sbiw	r30, 0x01	; 1
	char * eos = str;
	while(*eos!='\0')
		eos++;
	eos--;
	// Then loop until the end pointer has passed the start pointer
	while(eos>=str){
 446:	ea 17       	cp	r30, r26
 448:	fb 07       	cpc	r31, r27
 44a:	c0 f7       	brcc	.-16     	; 0x43c <revese+0x12>
		*str = temp;
		// Decrement/increment
		eos--;
		str++;
	}
}
 44c:	08 95       	ret

0000044e <six_least_significant>:

void six_least_significant(long num,int *ret){
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	6b 01       	movw	r12, r22
 45c:	7c 01       	movw	r14, r24
 45e:	ea 01       	movw	r28, r20
	// Plucks out the six least significant 
	*ret = (int)(num-(num/1000000)*1000000);
 460:	20 e4       	ldi	r18, 0x40	; 64
 462:	32 e4       	ldi	r19, 0x42	; 66
 464:	4f e0       	ldi	r20, 0x0F	; 15
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	0e 94 81 02 	call	0x502	; 0x502 <__divmodsi4>
 46c:	60 e4       	ldi	r22, 0x40	; 64
 46e:	72 e4       	ldi	r23, 0x42	; 66
 470:	26 9f       	mul	r18, r22
 472:	c0 01       	movw	r24, r0
 474:	27 9f       	mul	r18, r23
 476:	90 0d       	add	r25, r0
 478:	36 9f       	mul	r19, r22
 47a:	90 0d       	add	r25, r0
 47c:	11 24       	eor	r1, r1
 47e:	c8 1a       	sub	r12, r24
 480:	d9 0a       	sbc	r13, r25
 482:	d9 82       	std	Y+1, r13	; 0x01
 484:	c8 82       	st	Y, r12
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	08 95       	ret

00000494 <int_to_str>:
void int_to_str(int num,char* buffer){
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	eb 01       	movw	r28, r22
	// Base case
	if (num == 0){
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	a1 f4       	brne	.+40     	; 0x4c6 <int_to_str+0x32>
		*buffer = 48;
 49e:	80 e3       	ldi	r24, 0x30	; 48
 4a0:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 4a2:	19 82       	std	Y+1, r1	; 0x01
		return;
 4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <int_to_str+0x40>
	char * start = buffer;
	// Loop until num == 0
	while (num)
	{
		// Pluck out the least significant digit and convert it to a char
		*buffer = (volatile char) num-(num/10)*10+48;
 4a6:	28 2f       	mov	r18, r24
 4a8:	6a e0       	ldi	r22, 0x0A	; 10
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	0e 94 6d 02 	call	0x4da	; 0x4da <__divmodhi4>
 4b0:	86 2f       	mov	r24, r22
 4b2:	97 2f       	mov	r25, r23
 4b4:	66 0f       	add	r22, r22
 4b6:	36 2f       	mov	r19, r22
 4b8:	33 0f       	add	r19, r19
 4ba:	33 0f       	add	r19, r19
 4bc:	63 0f       	add	r22, r19
 4be:	26 1b       	sub	r18, r22
 4c0:	20 5d       	subi	r18, 0xD0	; 208
 4c2:	21 93       	st	Z+, r18
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <int_to_str+0x34>
 4c6:	fb 01       	movw	r30, r22
		return;
	}
	// Track start of string
	char * start = buffer;
	// Loop until num == 0
	while (num)
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	69 f7       	brne	.-38     	; 0x4a6 <int_to_str+0x12>
		// remove the least significant digit
		num/=10;
		buffer++;
	}
	// Terminate string
	*buffer = '\0';
 4cc:	10 82       	st	Z, r1
	// Reverse the string to make it readable
	revese(start);
 4ce:	ce 01       	movw	r24, r28
 4d0:	0e 94 15 02 	call	0x42a	; 0x42a <revese>
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <__divmodhi4>:
 4da:	97 fb       	bst	r25, 7
 4dc:	07 2e       	mov	r0, r23
 4de:	16 f4       	brtc	.+4      	; 0x4e4 <__divmodhi4+0xa>
 4e0:	00 94       	com	r0
 4e2:	07 d0       	rcall	.+14     	; 0x4f2 <__divmodhi4_neg1>
 4e4:	77 fd       	sbrc	r23, 7
 4e6:	09 d0       	rcall	.+18     	; 0x4fa <__divmodhi4_neg2>
 4e8:	0e 94 a0 02 	call	0x540	; 0x540 <__udivmodhi4>
 4ec:	07 fc       	sbrc	r0, 7
 4ee:	05 d0       	rcall	.+10     	; 0x4fa <__divmodhi4_neg2>
 4f0:	3e f4       	brtc	.+14     	; 0x500 <__divmodhi4_exit>

000004f2 <__divmodhi4_neg1>:
 4f2:	90 95       	com	r25
 4f4:	81 95       	neg	r24
 4f6:	9f 4f       	sbci	r25, 0xFF	; 255
 4f8:	08 95       	ret

000004fa <__divmodhi4_neg2>:
 4fa:	70 95       	com	r23
 4fc:	61 95       	neg	r22
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000500 <__divmodhi4_exit>:
 500:	08 95       	ret

00000502 <__divmodsi4>:
 502:	05 2e       	mov	r0, r21
 504:	97 fb       	bst	r25, 7
 506:	1e f4       	brtc	.+6      	; 0x50e <__divmodsi4+0xc>
 508:	00 94       	com	r0
 50a:	0e 94 98 02 	call	0x530	; 0x530 <__negsi2>
 50e:	57 fd       	sbrc	r21, 7
 510:	07 d0       	rcall	.+14     	; 0x520 <__divmodsi4_neg2>
 512:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 516:	07 fc       	sbrc	r0, 7
 518:	03 d0       	rcall	.+6      	; 0x520 <__divmodsi4_neg2>
 51a:	4e f4       	brtc	.+18     	; 0x52e <__divmodsi4_exit>
 51c:	0c 94 98 02 	jmp	0x530	; 0x530 <__negsi2>

00000520 <__divmodsi4_neg2>:
 520:	50 95       	com	r21
 522:	40 95       	com	r20
 524:	30 95       	com	r19
 526:	21 95       	neg	r18
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	4f 4f       	sbci	r20, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255

0000052e <__divmodsi4_exit>:
 52e:	08 95       	ret

00000530 <__negsi2>:
 530:	90 95       	com	r25
 532:	80 95       	com	r24
 534:	70 95       	com	r23
 536:	61 95       	neg	r22
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	8f 4f       	sbci	r24, 0xFF	; 255
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	08 95       	ret

00000540 <__udivmodhi4>:
 540:	aa 1b       	sub	r26, r26
 542:	bb 1b       	sub	r27, r27
 544:	51 e1       	ldi	r21, 0x11	; 17
 546:	07 c0       	rjmp	.+14     	; 0x556 <__udivmodhi4_ep>

00000548 <__udivmodhi4_loop>:
 548:	aa 1f       	adc	r26, r26
 54a:	bb 1f       	adc	r27, r27
 54c:	a6 17       	cp	r26, r22
 54e:	b7 07       	cpc	r27, r23
 550:	10 f0       	brcs	.+4      	; 0x556 <__udivmodhi4_ep>
 552:	a6 1b       	sub	r26, r22
 554:	b7 0b       	sbc	r27, r23

00000556 <__udivmodhi4_ep>:
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	5a 95       	dec	r21
 55c:	a9 f7       	brne	.-22     	; 0x548 <__udivmodhi4_loop>
 55e:	80 95       	com	r24
 560:	90 95       	com	r25
 562:	bc 01       	movw	r22, r24
 564:	cd 01       	movw	r24, r26
 566:	08 95       	ret

00000568 <__udivmodsi4>:
 568:	a1 e2       	ldi	r26, 0x21	; 33
 56a:	1a 2e       	mov	r1, r26
 56c:	aa 1b       	sub	r26, r26
 56e:	bb 1b       	sub	r27, r27
 570:	fd 01       	movw	r30, r26
 572:	0d c0       	rjmp	.+26     	; 0x58e <__udivmodsi4_ep>

00000574 <__udivmodsi4_loop>:
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	ee 1f       	adc	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	a2 17       	cp	r26, r18
 57e:	b3 07       	cpc	r27, r19
 580:	e4 07       	cpc	r30, r20
 582:	f5 07       	cpc	r31, r21
 584:	20 f0       	brcs	.+8      	; 0x58e <__udivmodsi4_ep>
 586:	a2 1b       	sub	r26, r18
 588:	b3 0b       	sbc	r27, r19
 58a:	e4 0b       	sbc	r30, r20
 58c:	f5 0b       	sbc	r31, r21

0000058e <__udivmodsi4_ep>:
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	1a 94       	dec	r1
 598:	69 f7       	brne	.-38     	; 0x574 <__udivmodsi4_loop>
 59a:	60 95       	com	r22
 59c:	70 95       	com	r23
 59e:	80 95       	com	r24
 5a0:	90 95       	com	r25
 5a2:	9b 01       	movw	r18, r22
 5a4:	ac 01       	movw	r20, r24
 5a6:	bd 01       	movw	r22, r26
 5a8:	cf 01       	movw	r24, r30
 5aa:	08 95       	ret

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
