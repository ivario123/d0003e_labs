
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000716  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000716  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001214  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c0e  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000901  00000000  00000000  0000273e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00003040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b6  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000abc  00000000  00000000  00003896  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004352  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e1       	ldi	r30, 0x16	; 22
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <main>
  82:	0c 94 89 03 	jmp	0x712	; 0x712 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <toggle_led_2>:
				num +=2;	
		}
		else 
			num++;
		if(is_prime(num)==1){
			writeLong(num);
  8a:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  8e:	80 fd       	sbrc	r24, 0
  90:	06 c0       	rjmp	.+12     	; 0x9e <toggle_led_2+0x14>
  92:	e4 ef       	ldi	r30, 0xF4	; 244
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
  9c:	06 c0       	rjmp	.+12     	; 0xaa <toggle_led_2+0x20>
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 27       	eor	r24, r25
  a8:	80 83       	st	Z, r24
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <write_char_2>:
  b0:	cf 93       	push	r28
  b2:	c6 2f       	mov	r28, r22
  b4:	66 30       	cpi	r22, 0x06	; 6
  b6:	71 05       	cpc	r23, r1
  b8:	d8 f5       	brcc	.+118    	; 0x130 <write_char_2+0x80>
  ba:	75 95       	asr	r23
  bc:	67 95       	ror	r22
  be:	fb 01       	movw	r30, r22
  c0:	e4 51       	subi	r30, 0x14	; 20
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	90 ed       	ldi	r25, 0xD0	; 208
  c6:	98 0f       	add	r25, r24
  c8:	9a 30       	cpi	r25, 0x0A	; 10
  ca:	60 f4       	brcc	.+24     	; 0xe4 <write_char_2+0x34>
  cc:	a8 2f       	mov	r26, r24
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	d0 97       	sbiw	r26, 0x30	; 48
  d2:	aa 0f       	add	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	a0 50       	subi	r26, 0x00	; 0
  dc:	bf 4f       	sbci	r27, 0xFF	; 255
  de:	4d 91       	ld	r20, X+
  e0:	5c 91       	ld	r21, X
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <write_char_2+0x38>
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	1e c0       	rjmp	.+60     	; 0x12a <write_char_2+0x7a>
  ee:	94 2f       	mov	r25, r20
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	52 95       	swap	r21
  f4:	42 95       	swap	r20
  f6:	4f 70       	andi	r20, 0x0F	; 15
  f8:	45 27       	eor	r20, r21
  fa:	5f 70       	andi	r21, 0x0F	; 15
  fc:	45 27       	eor	r20, r21
  fe:	c0 fd       	sbrc	r28, 0
 100:	07 c0       	rjmp	.+14     	; 0x110 <write_char_2+0x60>
 102:	80 81       	ld	r24, Z
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	80 83       	st	Z, r24
 108:	80 81       	ld	r24, Z
 10a:	89 2b       	or	r24, r25
 10c:	80 83       	st	Z, r24
 10e:	0a c0       	rjmp	.+20     	; 0x124 <write_char_2+0x74>
 110:	80 81       	ld	r24, Z
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	80 83       	st	Z, r24
 116:	60 81       	ld	r22, Z
 118:	70 e1       	ldi	r23, 0x10	; 16
 11a:	97 9f       	mul	r25, r23
 11c:	c0 01       	movw	r24, r0
 11e:	11 24       	eor	r1, r1
 120:	86 2b       	or	r24, r22
 122:	80 83       	st	Z, r24
 124:	35 96       	adiw	r30, 0x05	; 5
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	24 30       	cpi	r18, 0x04	; 4
 12c:	31 05       	cpc	r19, r1
 12e:	fc f2       	brlt	.-66     	; 0xee <write_char_2+0x3e>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <write_string_2>:
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	8c 01       	movw	r16, r24
 142:	cb 01       	movw	r24, r22
 144:	65 e0       	ldi	r22, 0x05	; 5
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 14c:	ec 01       	movw	r28, r24
 14e:	0c c0       	rjmp	.+24     	; 0x168 <write_string_2+0x30>
 150:	be 01       	movw	r22, r28
 152:	0e 94 58 00 	call	0xb0	; 0xb0 <write_char_2>
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	65 e0       	ldi	r22, 0x05	; 5
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 162:	ec 01       	movw	r28, r24
 164:	0f 5f       	subi	r16, 0xFF	; 255
 166:	1f 4f       	sbci	r17, 0xFF	; 255
 168:	f8 01       	movw	r30, r16
 16a:	80 81       	ld	r24, Z
 16c:	81 11       	cpse	r24, r1
 16e:	f0 cf       	rjmp	.-32     	; 0x150 <write_string_2+0x18>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <writeLong_2>:
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	2c 97       	sbiw	r28, 0x0c	; 12
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	ae 01       	movw	r20, r28
 194:	4f 5f       	subi	r20, 0xFF	; 255
 196:	5f 4f       	sbci	r21, 0xFF	; 255
 198:	0e 94 8a 02 	call	0x514	; 0x514 <six_least_significant>
 19c:	be 01       	movw	r22, r28
 19e:	6d 5f       	subi	r22, 0xFD	; 253
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	9a 81       	ldd	r25, Y+2	; 0x02
 1a6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <int_to_str>
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	ce 01       	movw	r24, r28
 1b0:	03 96       	adiw	r24, 0x03	; 3
 1b2:	0e 94 9c 00 	call	0x138	; 0x138 <write_string_2>
 1b6:	2c 96       	adiw	r28, 0x0c	; 12
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <init_lcd>:
 1c8:	e4 ee       	ldi	r30, 0xE4	; 228
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	80 83       	st	Z, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
 1d8:	80 81       	ld	r24, Z
 1da:	8f 7e       	andi	r24, 0xEF	; 239
 1dc:	80 83       	st	Z, r24
 1de:	80 81       	ld	r24, Z
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	80 83       	st	Z, r24
 1e4:	e5 ee       	ldi	r30, 0xE5	; 229
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	80 83       	st	Z, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	8f 7b       	andi	r24, 0xBF	; 191
 1f2:	80 83       	st	Z, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	80 63       	ori	r24, 0x30	; 48
 1f8:	80 83       	st	Z, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	80 83       	st	Z, r24
 200:	e6 ee       	ldi	r30, 0xE6	; 230
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	8f 78       	andi	r24, 0x8F	; 143
 208:	80 83       	st	Z, r24
 20a:	80 81       	ld	r24, Z
 20c:	87 60       	ori	r24, 0x07	; 7
 20e:	80 83       	st	Z, r24
 210:	e7 ee       	ldi	r30, 0xE7	; 231
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8f 71       	andi	r24, 0x1F	; 31
 218:	80 83       	st	Z, r24
 21a:	80 81       	ld	r24, Z
 21c:	8f 60       	ori	r24, 0x0F	; 15
 21e:	80 83       	st	Z, r24
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret

00000226 <is_prime>:
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	4b 01       	movw	r8, r22
 238:	5c 01       	movw	r10, r24
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	88 16       	cp	r8, r24
 23e:	91 04       	cpc	r9, r1
 240:	a1 04       	cpc	r10, r1
 242:	b1 04       	cpc	r11, r1
 244:	64 f1       	brlt	.+88     	; 0x29e <is_prime+0x78>
 246:	80 fe       	sbrs	r8, 0
 248:	2d c0       	rjmp	.+90     	; 0x2a4 <is_prime+0x7e>
 24a:	0f 2e       	mov	r0, r31
 24c:	f3 e0       	ldi	r31, 0x03	; 3
 24e:	cf 2e       	mov	r12, r31
 250:	d1 2c       	mov	r13, r1
 252:	e1 2c       	mov	r14, r1
 254:	f1 2c       	mov	r15, r1
 256:	f0 2d       	mov	r31, r0
 258:	0f c0       	rjmp	.+30     	; 0x278 <is_prime+0x52>
 25a:	c5 01       	movw	r24, r10
 25c:	b4 01       	movw	r22, r8
 25e:	a7 01       	movw	r20, r14
 260:	96 01       	movw	r18, r12
 262:	0e 94 1a 03 	call	0x634	; 0x634 <__divmodsi4>
 266:	67 2b       	or	r22, r23
 268:	68 2b       	or	r22, r24
 26a:	69 2b       	or	r22, r25
 26c:	f1 f0       	breq	.+60     	; 0x2aa <is_prime+0x84>
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	c8 1a       	sub	r12, r24
 272:	d8 0a       	sbc	r13, r24
 274:	e8 0a       	sbc	r14, r24
 276:	f8 0a       	sbc	r15, r24
 278:	d5 01       	movw	r26, r10
 27a:	c4 01       	movw	r24, r8
 27c:	bb 20       	and	r11, r11
 27e:	1c f4       	brge	.+6      	; 0x286 <is_prime+0x60>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	a1 1d       	adc	r26, r1
 284:	b1 1d       	adc	r27, r1
 286:	b5 95       	asr	r27
 288:	a7 95       	ror	r26
 28a:	97 95       	ror	r25
 28c:	87 95       	ror	r24
 28e:	c8 16       	cp	r12, r24
 290:	d9 06       	cpc	r13, r25
 292:	ea 06       	cpc	r14, r26
 294:	fb 06       	cpc	r15, r27
 296:	0c f3       	brlt	.-62     	; 0x25a <is_prime+0x34>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <is_prime+0x88>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <is_prime+0x88>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <is_prime+0x88>
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ff 90       	pop	r15
 2b0:	ef 90       	pop	r14
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	af 90       	pop	r10
 2ba:	9f 90       	pop	r9
 2bc:	8f 90       	pop	r8
 2be:	08 95       	ret

000002c0 <toggle_led>:
	}
	return 0;
}

int toggle_led(){
	if((LCDDR0&2)>>1== 0)
 2c0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 2c4:	81 fd       	sbrc	r24, 1
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <toggle_led+0x14>
		LCDDR0 = LCDDR0|2;
 2c8:	ec ee       	ldi	r30, 0xEC	; 236
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	80 83       	st	Z, r24
 2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <toggle_led+0x20>
	else
		LCDDR0= LCDDR0^2;
 2d4:	ec ee       	ldi	r30, 0xEC	; 236
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	89 27       	eor	r24, r25
 2de:	80 83       	st	Z, r24
	return 0;
}
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	08 95       	ret

000002e6 <blink>:
int blink(){
	uint16_t freq = 31250/2;		// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	uint16_t last_time = TCNT1;
 2e6:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2ea:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
 2ee:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2f2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2f6:	ce 01       	movw	r24, r28
 2f8:	87 5f       	subi	r24, 0xF7	; 247
 2fa:	92 4c       	sbci	r25, 0xC2	; 194
 2fc:	28 17       	cp	r18, r24
 2fe:	39 07       	cpc	r19, r25
 300:	b1 f7       	brne	.-20     	; 0x2ee <blink+0x8>
		last_time =(uint16_t)TCNT1;
 302:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 306:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
		toggle_led();
 30a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <toggle_led>
	}
 30e:	ef cf       	rjmp	.-34     	; 0x2ee <blink+0x8>

00000310 <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 310:	e1 e6       	ldi	r30, 0x61	; 97
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 e8       	ldi	r24, 0x80	; 128
 316:	80 83       	st	Z, r24
 318:	10 82       	st	Z, r1
 31a:	e1 e8       	ldi	r30, 0x81	; 129
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	84 60       	ori	r24, 0x04	; 4
 322:	80 83       	st	Z, r24
 324:	85 b1       	in	r24, 0x05	; 5
 326:	80 68       	ori	r24, 0x80	; 128
 328:	85 b9       	out	0x05, r24	; 5
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret

00000330 <next_prime>:
 330:	cf 92       	push	r12
 332:	df 92       	push	r13
 334:	ef 92       	push	r14
 336:	ff 92       	push	r15
 338:	6b 01       	movw	r12, r22
 33a:	7c 01       	movw	r14, r24
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	c8 16       	cp	r12, r24
 340:	d1 04       	cpc	r13, r1
 342:	e1 04       	cpc	r14, r1
 344:	f1 04       	cpc	r15, r1
 346:	74 f0       	brlt	.+28     	; 0x364 <next_prime+0x34>
 348:	c0 fc       	sbrc	r12, 0
 34a:	06 c0       	rjmp	.+12     	; 0x358 <next_prime+0x28>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	c8 1a       	sub	r12, r24
 350:	d8 0a       	sbc	r13, r24
 352:	e8 0a       	sbc	r14, r24
 354:	f8 0a       	sbc	r15, r24
 356:	0b c0       	rjmp	.+22     	; 0x36e <next_prime+0x3e>
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	c8 0e       	add	r12, r24
 35c:	d1 1c       	adc	r13, r1
 35e:	e1 1c       	adc	r14, r1
 360:	f1 1c       	adc	r15, r1
 362:	05 c0       	rjmp	.+10     	; 0x36e <next_prime+0x3e>
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	c8 1a       	sub	r12, r24
 368:	d8 0a       	sbc	r13, r24
 36a:	e8 0a       	sbc	r14, r24
 36c:	f8 0a       	sbc	r15, r24
 36e:	c7 01       	movw	r24, r14
 370:	b6 01       	movw	r22, r12
 372:	0e 94 13 01 	call	0x226	; 0x226 <is_prime>
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	09 f7       	brne	.-62     	; 0x33c <next_prime+0xc>
 37a:	c7 01       	movw	r24, r14
 37c:	b6 01       	movw	r22, r12
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	08 95       	ret

00000388 <check_interrupts>:
		}
	}

}
int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <check_interrupts+0xe>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 39c:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 3a0:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
 3a4:	8e 15       	cp	r24, r14
 3a6:	9f 05       	cpc	r25, r15
 3a8:	60 f4       	brcc	.+24     	; 0x3c2 <check_interrupts+0x3a>
 3aa:	86 17       	cp	r24, r22
 3ac:	97 07       	cpc	r25, r23
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <check_interrupts+0x2e>
 3b0:	6e 15       	cp	r22, r14
 3b2:	7f 05       	cpc	r23, r15
 3b4:	30 f0       	brcs	.+12     	; 0x3c2 <check_interrupts+0x3a>
 3b6:	e8 16       	cp	r14, r24
 3b8:	f9 06       	cpc	r15, r25
 3ba:	18 f0       	brcs	.+6      	; 0x3c2 <check_interrupts+0x3a>
	{
		
		target_time=time;
		toggle_led_2();
 3bc:	0e 94 45 00 	call	0x8a	; 0x8a <toggle_led_2>
	
	
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
	{
		
		target_time=time;
 3c0:	c7 01       	movw	r24, r14
		toggle_led_2();
	}
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 3c2:	1f 99       	sbic	0x03, 7	; 3
 3c4:	28 c0       	rjmp	.+80     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
	{
		volatile int i = 0;
 3c6:	1a 82       	std	Y+2, r1	; 0x02
 3c8:	19 82       	std	Y+1, r1	; 0x01
		if(*buttonstate==0){
 3ca:	f8 01       	movw	r30, r16
 3cc:	20 81       	ld	r18, Z
 3ce:	21 11       	cpse	r18, r1
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <check_interrupts+0x4e>
			*buttonstate=1;
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	20 83       	st	Z, r18
		}
		if(*buttonstate == 2){
 3d6:	f8 01       	movw	r30, r16
 3d8:	20 81       	ld	r18, Z
 3da:	22 30       	cpi	r18, 0x02	; 2
 3dc:	11 f5       	brne	.+68     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
			if((LCDDR13&1)== 1){
 3de:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 3e2:	20 ff       	sbrs	r18, 0
 3e4:	0c c0       	rjmp	.+24     	; 0x3fe <check_interrupts+0x76>
				LCDDR13 = LCDDR13^1;
 3e6:	e9 ef       	ldi	r30, 0xF9	; 249
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	30 81       	ld	r19, Z
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	23 27       	eor	r18, r19
 3f0:	20 83       	st	Z, r18
				LCDDR18 = LCDDR18|1;
 3f2:	ee ef       	ldi	r30, 0xFE	; 254
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	20 81       	ld	r18, Z
 3f8:	21 60       	ori	r18, 0x01	; 1
 3fa:	20 83       	st	Z, r18
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
			}
			else{
				LCDDR13 = LCDDR13|1;
 3fe:	e9 ef       	ldi	r30, 0xF9	; 249
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	20 81       	ld	r18, Z
 404:	21 60       	ori	r18, 0x01	; 1
 406:	20 83       	st	Z, r18
				LCDDR13 = LCDDR13^1;
 408:	30 81       	ld	r19, Z
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	23 27       	eor	r18, r19
 40e:	20 83       	st	Z, r18
			}
			*buttonstate = 0;
 410:	f8 01       	movw	r30, r16
 412:	10 82       	st	Z, r1
 414:	06 c0       	rjmp	.+12     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
		}
	}
	else if(*buttonstate == 1){
 416:	f8 01       	movw	r30, r16
 418:	20 81       	ld	r18, Z
 41a:	21 30       	cpi	r18, 0x01	; 1
 41c:	11 f4       	brne	.+4      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
		*buttonstate =2 ;
 41e:	22 e0       	ldi	r18, 0x02	; 2
 420:	20 83       	st	Z, r18
	}
	// Return target time
	return target_time;
		
}
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	08 95       	ret

00000434 <task_4>:


void task_4(void){
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	00 d0       	rcall	.+0      	; 0x43a <task_4+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <task_4+0x8>
 43c:	1f 92       	push	r1
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	LCDDR13 = LCDDR13|1;
 442:	e9 ef       	ldi	r30, 0xF9	; 249
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 44c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 450:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 454:	87 5f       	subi	r24, 0xF7	; 247
 456:	92 4c       	sbci	r25, 0xC2	; 194
 458:	9a 83       	std	Y+2, r25	; 0x02
 45a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggerd, useful to look for overflows
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	89 50       	subi	r24, 0x09	; 9
 462:	9d 43       	sbci	r25, 0x3D	; 61
 464:	9c 83       	std	Y+4, r25	; 0x04
 466:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	8d 83       	std	Y+5, r24	; 0x05
	long num = 25;
 46c:	0f 2e       	mov	r0, r31
 46e:	f9 e1       	ldi	r31, 0x19	; 25
 470:	cf 2e       	mov	r12, r31
 472:	d1 2c       	mov	r13, r1
 474:	e1 2c       	mov	r14, r1
 476:	f1 2c       	mov	r15, r1
 478:	f0 2d       	mov	r31, r0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <task_4+0x4c>
	return target_time;
		
}


void task_4(void){
 47c:	75 01       	movw	r14, r10
 47e:	64 01       	movw	r12, r8
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
	long num = 25;
    while(1) 
    {	
		// Calculate the next prime
		long new_num = next_prime(num);
 480:	c7 01       	movw	r24, r14
 482:	b6 01       	movw	r22, r12
 484:	0e 94 98 01 	call	0x330	; 0x330 <next_prime>
 488:	4b 01       	movw	r8, r22
 48a:	5c 01       	movw	r10, r24
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 48c:	6b 81       	ldd	r22, Y+3	; 0x03
 48e:	7c 81       	ldd	r23, Y+4	; 0x04
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	9a 81       	ldd	r25, Y+2	; 0x02
 494:	ae 01       	movw	r20, r28
 496:	4b 5f       	subi	r20, 0xFB	; 251
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	0e 94 c4 01 	call	0x388	; 0x388 <check_interrupts>
 49e:	29 81       	ldd	r18, Y+1	; 0x01
 4a0:	3a 81       	ldd	r19, Y+2	; 0x02
 4a2:	82 17       	cp	r24, r18
 4a4:	93 07       	cpc	r25, r19
 4a6:	51 f0       	breq	.+20     	; 0x4bc <task_4+0x88>
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	9a 81       	ldd	r25, Y+2	; 0x02
 4ac:	9c 83       	std	Y+4, r25	; 0x04
 4ae:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	9a 81       	ldd	r25, Y+2	; 0x02
 4b4:	87 5f       	subi	r24, 0xF7	; 247
 4b6:	92 4c       	sbci	r25, 0xC2	; 194
 4b8:	9a 83       	std	Y+2, r25	; 0x02
 4ba:	89 83       	std	Y+1, r24	; 0x01
		}
		// Do the other stuff
		if(new_num!=num){
 4bc:	c8 14       	cp	r12, r8
 4be:	d9 04       	cpc	r13, r9
 4c0:	ea 04       	cpc	r14, r10
 4c2:	fb 04       	cpc	r15, r11
 4c4:	d9 f2       	breq	.-74     	; 0x47c <task_4+0x48>
			writeLong_2(num);
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 bf 00 	call	0x17e	; 0x17e <writeLong_2>
 4ce:	d6 cf       	rjmp	.-84     	; 0x47c <task_4+0x48>

000004d0 <main>:
    }
}

int main(void)
{
	if(success != init())
 4d0:	0e 94 88 01 	call	0x310	; 0x310 <init>
 4d4:	89 2b       	or	r24, r25
 4d6:	11 f0       	breq	.+4      	; 0x4dc <main+0xc>
		blink();
 4d8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <blink>
	if(success != init_lcd())
 4dc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init_lcd>
 4e0:	89 2b       	or	r24, r25
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <main+0x18>
		blink();
 4e4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <blink>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 4e8:	0e 94 1a 02 	call	0x434	; 0x434 <task_4>

000004ec <revese>:
 * string.c
 *
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
 4ec:	dc 01       	movw	r26, r24
	char * eos = str;
 4ee:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <revese+0x8>
	eos++;
 4f2:	31 96       	adiw	r30, 0x01	; 1
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 4f4:	80 81       	ld	r24, Z
 4f6:	81 11       	cpse	r24, r1
 4f8:	fc cf       	rjmp	.-8      	; 0x4f2 <revese+0x6>
	eos++;
	eos--;
 4fa:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <__stack+0x9>
		char temp = *eos;
 4fe:	80 81       	ld	r24, Z
		*eos = *str;
 500:	9c 91       	ld	r25, X
 502:	90 83       	st	Z, r25
		*str = temp;
 504:	8d 93       	st	X+, r24
		eos--;
 506:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 508:	ea 17       	cp	r30, r26
 50a:	fb 07       	cpc	r31, r27
 50c:	c0 f7       	brcc	.-16     	; 0x4fe <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	08 95       	ret

00000514 <six_least_significant>:
void six_least_significant(long num,int *ret){
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	00 d0       	rcall	.+0      	; 0x526 <six_least_significant+0x12>
 526:	00 d0       	rcall	.+0      	; 0x528 <six_least_significant+0x14>
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	6b 01       	movw	r12, r22
 52e:	7c 01       	movw	r14, r24
 530:	8a 01       	movw	r16, r20
	volatile long temp = (num/1000000);
 532:	20 e4       	ldi	r18, 0x40	; 64
 534:	32 e4       	ldi	r19, 0x42	; 66
 536:	4f e0       	ldi	r20, 0x0F	; 15
 538:	50 e0       	ldi	r21, 0x00	; 0
 53a:	0e 94 1a 03 	call	0x634	; 0x634 <__divmodsi4>
 53e:	29 83       	std	Y+1, r18	; 0x01
 540:	3a 83       	std	Y+2, r19	; 0x02
 542:	4b 83       	std	Y+3, r20	; 0x03
 544:	5c 83       	std	Y+4, r21	; 0x04
	temp *=1000000;
 546:	29 81       	ldd	r18, Y+1	; 0x01
 548:	3a 81       	ldd	r19, Y+2	; 0x02
 54a:	4b 81       	ldd	r20, Y+3	; 0x03
 54c:	5c 81       	ldd	r21, Y+4	; 0x04
 54e:	60 e4       	ldi	r22, 0x40	; 64
 550:	72 e4       	ldi	r23, 0x42	; 66
 552:	8f e0       	ldi	r24, 0x0F	; 15
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 f6 02 	call	0x5ec	; 0x5ec <__mulsi3>
 55a:	69 83       	std	Y+1, r22	; 0x01
 55c:	7a 83       	std	Y+2, r23	; 0x02
 55e:	8b 83       	std	Y+3, r24	; 0x03
 560:	9c 83       	std	Y+4, r25	; 0x04
	temp = num-temp;
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	9a 81       	ldd	r25, Y+2	; 0x02
 566:	ab 81       	ldd	r26, Y+3	; 0x03
 568:	bc 81       	ldd	r27, Y+4	; 0x04
 56a:	c8 1a       	sub	r12, r24
 56c:	d9 0a       	sbc	r13, r25
 56e:	ea 0a       	sbc	r14, r26
 570:	fb 0a       	sbc	r15, r27
 572:	c9 82       	std	Y+1, r12	; 0x01
 574:	da 82       	std	Y+2, r13	; 0x02
 576:	eb 82       	std	Y+3, r14	; 0x03
 578:	fc 82       	std	Y+4, r15	; 0x04
	*ret = (int)temp;
 57a:	89 81       	ldd	r24, Y+1	; 0x01
 57c:	9a 81       	ldd	r25, Y+2	; 0x02
 57e:	ab 81       	ldd	r26, Y+3	; 0x03
 580:	bc 81       	ldd	r27, Y+4	; 0x04
 582:	f8 01       	movw	r30, r16
 584:	91 83       	std	Z+1, r25	; 0x01
 586:	80 83       	st	Z, r24
}
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	08 95       	ret

000005a2 <int_to_str>:
int int_to_str(int num,char* buffer){
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	eb 01       	movw	r28, r22
	if (num == 0){
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	a1 f4       	brne	.+40     	; 0x5d4 <int_to_str+0x32>
		*buffer = 48;
 5ac:	80 e3       	ldi	r24, 0x30	; 48
 5ae:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 5b0:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <int_to_str+0x40>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 5b4:	28 2f       	mov	r18, r24
 5b6:	6a e0       	ldi	r22, 0x0A	; 10
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 5be:	86 2f       	mov	r24, r22
 5c0:	97 2f       	mov	r25, r23
 5c2:	66 0f       	add	r22, r22
 5c4:	36 2f       	mov	r19, r22
 5c6:	33 0f       	add	r19, r19
 5c8:	33 0f       	add	r19, r19
 5ca:	63 0f       	add	r22, r19
 5cc:	26 1b       	sub	r18, r22
 5ce:	20 5d       	subi	r18, 0xD0	; 208
 5d0:	21 93       	st	Z+, r18
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <int_to_str+0x34>
 5d4:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	69 f7       	brne	.-38     	; 0x5b4 <int_to_str+0x12>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 5da:	10 82       	st	Z, r1
	revese(start);
 5dc:	ce 01       	movw	r24, r28
 5de:	0e 94 76 02 	call	0x4ec	; 0x4ec <revese>
	return 0;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <__mulsi3>:
 5ec:	db 01       	movw	r26, r22
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	0e 94 39 03 	call	0x672	; 0x672 <__muluhisi3>
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	a2 9f       	mul	r26, r18
 5fc:	80 0d       	add	r24, r0
 5fe:	91 1d       	adc	r25, r1
 600:	a3 9f       	mul	r26, r19
 602:	90 0d       	add	r25, r0
 604:	b2 9f       	mul	r27, r18
 606:	90 0d       	add	r25, r0
 608:	11 24       	eor	r1, r1
 60a:	08 95       	ret

0000060c <__divmodhi4>:
 60c:	97 fb       	bst	r25, 7
 60e:	07 2e       	mov	r0, r23
 610:	16 f4       	brtc	.+4      	; 0x616 <__divmodhi4+0xa>
 612:	00 94       	com	r0
 614:	07 d0       	rcall	.+14     	; 0x624 <__divmodhi4_neg1>
 616:	77 fd       	sbrc	r23, 7
 618:	09 d0       	rcall	.+18     	; 0x62c <__divmodhi4_neg2>
 61a:	0e 94 44 03 	call	0x688	; 0x688 <__udivmodhi4>
 61e:	07 fc       	sbrc	r0, 7
 620:	05 d0       	rcall	.+10     	; 0x62c <__divmodhi4_neg2>
 622:	3e f4       	brtc	.+14     	; 0x632 <__divmodhi4_exit>

00000624 <__divmodhi4_neg1>:
 624:	90 95       	com	r25
 626:	81 95       	neg	r24
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__divmodhi4_neg2>:
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255

00000632 <__divmodhi4_exit>:
 632:	08 95       	ret

00000634 <__divmodsi4>:
 634:	05 2e       	mov	r0, r21
 636:	97 fb       	bst	r25, 7
 638:	1e f4       	brtc	.+6      	; 0x640 <__divmodsi4+0xc>
 63a:	00 94       	com	r0
 63c:	0e 94 31 03 	call	0x662	; 0x662 <__negsi2>
 640:	57 fd       	sbrc	r21, 7
 642:	07 d0       	rcall	.+14     	; 0x652 <__divmodsi4_neg2>
 644:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__udivmodsi4>
 648:	07 fc       	sbrc	r0, 7
 64a:	03 d0       	rcall	.+6      	; 0x652 <__divmodsi4_neg2>
 64c:	4e f4       	brtc	.+18     	; 0x660 <__divmodsi4_exit>
 64e:	0c 94 31 03 	jmp	0x662	; 0x662 <__negsi2>

00000652 <__divmodsi4_neg2>:
 652:	50 95       	com	r21
 654:	40 95       	com	r20
 656:	30 95       	com	r19
 658:	21 95       	neg	r18
 65a:	3f 4f       	sbci	r19, 0xFF	; 255
 65c:	4f 4f       	sbci	r20, 0xFF	; 255
 65e:	5f 4f       	sbci	r21, 0xFF	; 255

00000660 <__divmodsi4_exit>:
 660:	08 95       	ret

00000662 <__negsi2>:
 662:	90 95       	com	r25
 664:	80 95       	com	r24
 666:	70 95       	com	r23
 668:	61 95       	neg	r22
 66a:	7f 4f       	sbci	r23, 0xFF	; 255
 66c:	8f 4f       	sbci	r24, 0xFF	; 255
 66e:	9f 4f       	sbci	r25, 0xFF	; 255
 670:	08 95       	ret

00000672 <__muluhisi3>:
 672:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__umulhisi3>
 676:	a5 9f       	mul	r26, r21
 678:	90 0d       	add	r25, r0
 67a:	b4 9f       	mul	r27, r20
 67c:	90 0d       	add	r25, r0
 67e:	a4 9f       	mul	r26, r20
 680:	80 0d       	add	r24, r0
 682:	91 1d       	adc	r25, r1
 684:	11 24       	eor	r1, r1
 686:	08 95       	ret

00000688 <__udivmodhi4>:
 688:	aa 1b       	sub	r26, r26
 68a:	bb 1b       	sub	r27, r27
 68c:	51 e1       	ldi	r21, 0x11	; 17
 68e:	07 c0       	rjmp	.+14     	; 0x69e <__udivmodhi4_ep>

00000690 <__udivmodhi4_loop>:
 690:	aa 1f       	adc	r26, r26
 692:	bb 1f       	adc	r27, r27
 694:	a6 17       	cp	r26, r22
 696:	b7 07       	cpc	r27, r23
 698:	10 f0       	brcs	.+4      	; 0x69e <__udivmodhi4_ep>
 69a:	a6 1b       	sub	r26, r22
 69c:	b7 0b       	sbc	r27, r23

0000069e <__udivmodhi4_ep>:
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	5a 95       	dec	r21
 6a4:	a9 f7       	brne	.-22     	; 0x690 <__udivmodhi4_loop>
 6a6:	80 95       	com	r24
 6a8:	90 95       	com	r25
 6aa:	bc 01       	movw	r22, r24
 6ac:	cd 01       	movw	r24, r26
 6ae:	08 95       	ret

000006b0 <__udivmodsi4>:
 6b0:	a1 e2       	ldi	r26, 0x21	; 33
 6b2:	1a 2e       	mov	r1, r26
 6b4:	aa 1b       	sub	r26, r26
 6b6:	bb 1b       	sub	r27, r27
 6b8:	fd 01       	movw	r30, r26
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <__udivmodsi4_ep>

000006bc <__udivmodsi4_loop>:
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	ee 1f       	adc	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	a2 17       	cp	r26, r18
 6c6:	b3 07       	cpc	r27, r19
 6c8:	e4 07       	cpc	r30, r20
 6ca:	f5 07       	cpc	r31, r21
 6cc:	20 f0       	brcs	.+8      	; 0x6d6 <__udivmodsi4_ep>
 6ce:	a2 1b       	sub	r26, r18
 6d0:	b3 0b       	sbc	r27, r19
 6d2:	e4 0b       	sbc	r30, r20
 6d4:	f5 0b       	sbc	r31, r21

000006d6 <__udivmodsi4_ep>:
 6d6:	66 1f       	adc	r22, r22
 6d8:	77 1f       	adc	r23, r23
 6da:	88 1f       	adc	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	1a 94       	dec	r1
 6e0:	69 f7       	brne	.-38     	; 0x6bc <__udivmodsi4_loop>
 6e2:	60 95       	com	r22
 6e4:	70 95       	com	r23
 6e6:	80 95       	com	r24
 6e8:	90 95       	com	r25
 6ea:	9b 01       	movw	r18, r22
 6ec:	ac 01       	movw	r20, r24
 6ee:	bd 01       	movw	r22, r26
 6f0:	cf 01       	movw	r24, r30
 6f2:	08 95       	ret

000006f4 <__umulhisi3>:
 6f4:	a2 9f       	mul	r26, r18
 6f6:	b0 01       	movw	r22, r0
 6f8:	b3 9f       	mul	r27, r19
 6fa:	c0 01       	movw	r24, r0
 6fc:	a3 9f       	mul	r26, r19
 6fe:	70 0d       	add	r23, r0
 700:	81 1d       	adc	r24, r1
 702:	11 24       	eor	r1, r1
 704:	91 1d       	adc	r25, r1
 706:	b2 9f       	mul	r27, r18
 708:	70 0d       	add	r23, r0
 70a:	81 1d       	adc	r24, r1
 70c:	11 24       	eor	r1, r1
 70e:	91 1d       	adc	r25, r1
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
