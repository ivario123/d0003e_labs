
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000061e  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000faf  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bb3  00000000  00000000  000017c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000807  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002b80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a1  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000079b  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e1       	ldi	r30, 0x1E	; 30
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 42 02 	call	0x484	; 0x484 <main>
  82:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <write_char>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
  8e:	66 30       	cpi	r22, 0x06	; 6
  90:	71 05       	cpc	r23, r1
  92:	d8 f5       	brcc	.+118    	; 0x10a <write_char+0x80>
  94:	75 95       	asr	r23
  96:	67 95       	ror	r22
  98:	fb 01       	movw	r30, r22
  9a:	e4 51       	subi	r30, 0x14	; 20
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	90 ed       	ldi	r25, 0xD0	; 208
  a0:	98 0f       	add	r25, r24
  a2:	9a 30       	cpi	r25, 0x0A	; 10
  a4:	60 f4       	brcc	.+24     	; 0xbe <write_char+0x34>
  a6:	a8 2f       	mov	r26, r24
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	d0 97       	sbiw	r26, 0x30	; 48
  ac:	aa 0f       	add	r26, r26
  ae:	bb 1f       	adc	r27, r27
  b0:	aa 0f       	add	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	a0 50       	subi	r26, 0x00	; 0
  b6:	bf 4f       	sbci	r27, 0xFF	; 255
  b8:	4d 91       	ld	r20, X+
  ba:	5c 91       	ld	r21, X
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <write_char+0x38>
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	1e c0       	rjmp	.+60     	; 0x104 <write_char+0x7a>
  c8:	94 2f       	mov	r25, r20
  ca:	9f 70       	andi	r25, 0x0F	; 15
  cc:	52 95       	swap	r21
  ce:	42 95       	swap	r20
  d0:	4f 70       	andi	r20, 0x0F	; 15
  d2:	45 27       	eor	r20, r21
  d4:	5f 70       	andi	r21, 0x0F	; 15
  d6:	45 27       	eor	r20, r21
  d8:	c0 fd       	sbrc	r28, 0
  da:	07 c0       	rjmp	.+14     	; 0xea <write_char+0x60>
  dc:	80 81       	ld	r24, Z
  de:	80 7f       	andi	r24, 0xF0	; 240
  e0:	80 83       	st	Z, r24
  e2:	80 81       	ld	r24, Z
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	0a c0       	rjmp	.+20     	; 0xfe <write_char+0x74>
  ea:	80 81       	ld	r24, Z
  ec:	8f 70       	andi	r24, 0x0F	; 15
  ee:	80 83       	st	Z, r24
  f0:	60 81       	ld	r22, Z
  f2:	70 e1       	ldi	r23, 0x10	; 16
  f4:	97 9f       	mul	r25, r23
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	86 2b       	or	r24, r22
  fc:	80 83       	st	Z, r24
  fe:	35 96       	adiw	r30, 0x05	; 5
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	31 05       	cpc	r19, r1
 108:	fc f2       	brlt	.-66     	; 0xc8 <write_char+0x3e>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <write_string>:
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
 11c:	cb 01       	movw	r24, r22
 11e:	65 e0       	ldi	r22, 0x05	; 5
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 a4 02 	call	0x548	; 0x548 <__divmodhi4>
 126:	ec 01       	movw	r28, r24
 128:	0c c0       	rjmp	.+24     	; 0x142 <write_string+0x30>
 12a:	be 01       	movw	r22, r28
 12c:	0e 94 45 00 	call	0x8a	; 0x8a <write_char>
 130:	ce 01       	movw	r24, r28
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	0e 94 a4 02 	call	0x548	; 0x548 <__divmodhi4>
 13c:	ec 01       	movw	r28, r24
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	f8 01       	movw	r30, r16
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f0 cf       	rjmp	.-32     	; 0x12a <write_string+0x18>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <init_lcd>:
 158:	e4 ee       	ldi	r30, 0xE4	; 228
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 83       	st	Z, r24
 162:	80 81       	ld	r24, Z
 164:	80 64       	ori	r24, 0x40	; 64
 166:	80 83       	st	Z, r24
 168:	80 81       	ld	r24, Z
 16a:	8f 7e       	andi	r24, 0xEF	; 239
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	80 83       	st	Z, r24
 174:	e5 ee       	ldi	r30, 0xE5	; 229
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	80 83       	st	Z, r24
 17e:	80 81       	ld	r24, Z
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	80 83       	st	Z, r24
 184:	80 81       	ld	r24, Z
 186:	80 63       	ori	r24, 0x30	; 48
 188:	80 83       	st	Z, r24
 18a:	80 81       	ld	r24, Z
 18c:	87 60       	ori	r24, 0x07	; 7
 18e:	80 83       	st	Z, r24
 190:	e6 ee       	ldi	r30, 0xE6	; 230
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 78       	andi	r24, 0x8F	; 143
 198:	80 83       	st	Z, r24
 19a:	80 81       	ld	r24, Z
 19c:	87 60       	ori	r24, 0x07	; 7
 19e:	80 83       	st	Z, r24
 1a0:	e7 ee       	ldi	r30, 0xE7	; 231
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8f 71       	andi	r24, 0x1F	; 31
 1a8:	80 83       	st	Z, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	8f 60       	ori	r24, 0x0F	; 15
 1ae:	80 83       	st	Z, r24
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <write_long>:
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	2c 97       	sbiw	r28, 0x0c	; 12
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	ae 01       	movw	r20, r28
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <six_least_significant>
 1d4:	be 01       	movw	r22, r28
 1d6:	6d 5f       	subi	r22, 0xFD	; 253
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	0e 94 7f 02 	call	0x4fe	; 0x4fe <int_to_str>
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	03 96       	adiw	r24, 0x03	; 3
 1ea:	0e 94 89 00 	call	0x112	; 0x112 <write_string>
 1ee:	2c 96       	adiw	r28, 0x0c	; 12
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <is_prime>:
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	4b 01       	movw	r8, r22
 212:	5c 01       	movw	r10, r24
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	88 16       	cp	r8, r24
 218:	91 04       	cpc	r9, r1
 21a:	a1 04       	cpc	r10, r1
 21c:	b1 04       	cpc	r11, r1
 21e:	0c f1       	brlt	.+66     	; 0x262 <is_prime+0x62>
 220:	80 fe       	sbrs	r8, 0
 222:	22 c0       	rjmp	.+68     	; 0x268 <is_prime+0x68>
 224:	0f 2e       	mov	r0, r31
 226:	f3 e0       	ldi	r31, 0x03	; 3
 228:	cf 2e       	mov	r12, r31
 22a:	d1 2c       	mov	r13, r1
 22c:	e1 2c       	mov	r14, r1
 22e:	f1 2c       	mov	r15, r1
 230:	f0 2d       	mov	r31, r0
 232:	0f c0       	rjmp	.+30     	; 0x252 <is_prime+0x52>
 234:	c5 01       	movw	r24, r10
 236:	b4 01       	movw	r22, r8
 238:	a7 01       	movw	r20, r14
 23a:	96 01       	movw	r18, r12
 23c:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodsi4>
 240:	67 2b       	or	r22, r23
 242:	68 2b       	or	r22, r24
 244:	69 2b       	or	r22, r25
 246:	99 f0       	breq	.+38     	; 0x26e <is_prime+0x6e>
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	c8 1a       	sub	r12, r24
 24c:	d8 0a       	sbc	r13, r24
 24e:	e8 0a       	sbc	r14, r24
 250:	f8 0a       	sbc	r15, r24
 252:	c8 14       	cp	r12, r8
 254:	d9 04       	cpc	r13, r9
 256:	ea 04       	cpc	r14, r10
 258:	fb 04       	cpc	r15, r11
 25a:	64 f3       	brlt	.-40     	; 0x234 <is_prime+0x34>
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	08 c0       	rjmp	.+16     	; 0x272 <is_prime+0x72>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	05 c0       	rjmp	.+10     	; 0x272 <is_prime+0x72>
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <is_prime+0x72>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	08 95       	ret

00000284 <toggle_led_2>:




int toggle_led_2(){
	if((LCDDR8&1)== 0)
 284:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 288:	80 fd       	sbrc	r24, 0
 28a:	06 c0       	rjmp	.+12     	; 0x298 <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 28c:	e4 ef       	ldi	r30, 0xF4	; 244
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	81 60       	ori	r24, 0x01	; 1
 294:	80 83       	st	Z, r24
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <toggle_led_2+0x20>
	else
	LCDDR8= LCDDR8^1;
 298:	e4 ef       	ldi	r30, 0xF4	; 244
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	90 81       	ld	r25, Z
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	89 27       	eor	r24, r25
 2a2:	80 83       	st	Z, r24
	return 0;
}
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 95       	ret

000002aa <init>:
			LCDDR1 = LCDDR1^2;
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 2aa:	e1 e6       	ldi	r30, 0x61	; 97
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 e8       	ldi	r24, 0x80	; 128
 2b0:	80 83       	st	Z, r24
 2b2:	10 82       	st	Z, r1
 2b4:	e1 e8       	ldi	r30, 0x81	; 129
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	80 83       	st	Z, r24
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	80 68       	ori	r24, 0x80	; 128
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	08 95       	ret

000002ca <next_prime>:
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	6b 01       	movw	r12, r22
 2d4:	7c 01       	movw	r14, r24
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	c8 16       	cp	r12, r24
 2da:	d1 04       	cpc	r13, r1
 2dc:	e1 04       	cpc	r14, r1
 2de:	f1 04       	cpc	r15, r1
 2e0:	74 f0       	brlt	.+28     	; 0x2fe <next_prime+0x34>
 2e2:	c0 fc       	sbrc	r12, 0
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <next_prime+0x28>
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	c8 1a       	sub	r12, r24
 2ea:	d8 0a       	sbc	r13, r24
 2ec:	e8 0a       	sbc	r14, r24
 2ee:	f8 0a       	sbc	r15, r24
 2f0:	0b c0       	rjmp	.+22     	; 0x308 <next_prime+0x3e>
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	c8 0e       	add	r12, r24
 2f6:	d1 1c       	adc	r13, r1
 2f8:	e1 1c       	adc	r14, r1
 2fa:	f1 1c       	adc	r15, r1
 2fc:	05 c0       	rjmp	.+10     	; 0x308 <next_prime+0x3e>
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	c8 1a       	sub	r12, r24
 302:	d8 0a       	sbc	r13, r24
 304:	e8 0a       	sbc	r14, r24
 306:	f8 0a       	sbc	r15, r24
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	0e 94 00 01 	call	0x200	; 0x200 <is_prime>
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	09 f7       	brne	.-62     	; 0x2d6 <next_prime+0xc>
 314:	c7 01       	movw	r24, r14
 316:	b6 01       	movw	r22, r12
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	df 90       	pop	r13
 31e:	cf 90       	pop	r12
 320:	08 95       	ret

00000322 <toggle_button_2>:
		}
	}

}
void toggle_button_2(){
	if((LCDDR13&1)== 1){
 322:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 326:	80 ff       	sbrs	r24, 0
 328:	0c c0       	rjmp	.+24     	; 0x342 <toggle_button_2+0x20>
		LCDDR13 = LCDDR13^1;
 32a:	e9 ef       	ldi	r30, 0xF9	; 249
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	90 81       	ld	r25, Z
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 27       	eor	r24, r25
 334:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 336:	ee ef       	ldi	r30, 0xFE	; 254
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	80 83       	st	Z, r24
 340:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 342:	e9 ef       	ldi	r30, 0xF9	; 249
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 34c:	ee ef       	ldi	r30, 0xFE	; 254
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	90 81       	ld	r25, Z
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 27       	eor	r24, r25
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	ec 01       	movw	r28, r24
 368:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 36a:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 36e:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	
	// Catches wrap around condition
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
 372:	8e 15       	cp	r24, r14
 374:	9f 05       	cpc	r25, r15
 376:	60 f4       	brcc	.+24     	; 0x390 <check_interrupts+0x36>
 378:	86 17       	cp	r24, r22
 37a:	97 07       	cpc	r25, r23
 37c:	18 f4       	brcc	.+6      	; 0x384 <check_interrupts+0x2a>
 37e:	6e 15       	cp	r22, r14
 380:	7f 05       	cpc	r23, r15
 382:	30 f0       	brcs	.+12     	; 0x390 <check_interrupts+0x36>
 384:	ec 16       	cp	r14, r28
 386:	fd 06       	cpc	r15, r29
 388:	18 f0       	brcs	.+6      	; 0x390 <check_interrupts+0x36>
	{	
		target_time=time;
		toggle_led_2();
 38a:	0e 94 42 01 	call	0x284	; 0x284 <toggle_led_2>
	uint16_t time = (uint16_t)TCNT1;
	
	// Catches wrap around condition
	if(target_time < time && !((prev_time>target_time&& time>prev_time)||time < target_time))
	{	
		target_time=time;
 38e:	e7 01       	movw	r28, r14
		toggle_led_2();
	}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 390:	1f 99       	sbic	0x03, 7	; 3
 392:	0f c0       	rjmp	.+30     	; 0x3b2 <check_interrupts+0x58>
	{
		if(*buttonstate==0){
 394:	f8 01       	movw	r30, r16
 396:	80 81       	ld	r24, Z
 398:	81 11       	cpse	r24, r1
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <check_interrupts+0x46>
			*buttonstate=1;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 83       	st	Z, r24
		}
		
		if(*buttonstate == 2){
 3a0:	f8 01       	movw	r30, r16
 3a2:	80 81       	ld	r24, Z
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	59 f4       	brne	.+22     	; 0x3be <check_interrupts+0x64>
			toggle_button_2();
 3a8:	0e 94 91 01 	call	0x322	; 0x322 <toggle_button_2>
			*buttonstate = 0;
 3ac:	f8 01       	movw	r30, r16
 3ae:	10 82       	st	Z, r1
 3b0:	06 c0       	rjmp	.+12     	; 0x3be <check_interrupts+0x64>
		}
	}
	else if(*buttonstate == 1){
 3b2:	f8 01       	movw	r30, r16
 3b4:	80 81       	ld	r24, Z
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	11 f4       	brne	.+4      	; 0x3be <check_interrupts+0x64>
		*buttonstate =2 ;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
		
}
 3be:	ce 01       	movw	r24, r28
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	08 95       	ret

000003ce <task_4>:


void task_4(void){
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	29 97       	sbiw	r28, 0x09	; 9
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
	LCDDR13 = LCDDR13|1;
 3e2:	e9 ef       	ldi	r30, 0xF9	; 249
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	81 60       	ori	r24, 0x01	; 1
 3ea:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 3f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3f4:	87 5f       	subi	r24, 0xF7	; 247
 3f6:	92 4c       	sbci	r25, 0xC2	; 194
 3f8:	9a 83       	std	Y+2, r25	; 0x02
 3fa:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggerd, useful to look for overflows
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	89 50       	subi	r24, 0x09	; 9
 402:	9d 43       	sbci	r25, 0x3D	; 61
 404:	9c 83       	std	Y+4, r25	; 0x04
 406:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	8d 83       	std	Y+5, r24	; 0x05
	volatile long num = 1;										// Last number checked
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	a0 e0       	ldi	r26, 0x00	; 0
 412:	b0 e0       	ldi	r27, 0x00	; 0
 414:	8e 83       	std	Y+6, r24	; 0x06
 416:	9f 83       	std	Y+7, r25	; 0x07
 418:	a8 87       	std	Y+8, r26	; 0x08
 41a:	b9 87       	std	Y+9, r27	; 0x09
    while(1) 
    {	
		// Calculate the next prime
		long new_num = next_prime(num);
 41c:	6e 81       	ldd	r22, Y+6	; 0x06
 41e:	7f 81       	ldd	r23, Y+7	; 0x07
 420:	88 85       	ldd	r24, Y+8	; 0x08
 422:	99 85       	ldd	r25, Y+9	; 0x09
 424:	0e 94 65 01 	call	0x2ca	; 0x2ca <next_prime>
 428:	6b 01       	movw	r12, r22
 42a:	7c 01       	movw	r14, r24
		// Check if any interrupts have been triggered
		if(target_time != check_interrupts(target_time,last_time,&buttonstate)){
 42c:	6b 81       	ldd	r22, Y+3	; 0x03
 42e:	7c 81       	ldd	r23, Y+4	; 0x04
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	9a 81       	ldd	r25, Y+2	; 0x02
 434:	ae 01       	movw	r20, r28
 436:	4b 5f       	subi	r20, 0xFB	; 251
 438:	5f 4f       	sbci	r21, 0xFF	; 255
 43a:	0e 94 ad 01 	call	0x35a	; 0x35a <check_interrupts>
 43e:	29 81       	ldd	r18, Y+1	; 0x01
 440:	3a 81       	ldd	r19, Y+2	; 0x02
 442:	82 17       	cp	r24, r18
 444:	93 07       	cpc	r25, r19
 446:	51 f0       	breq	.+20     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			
			// uints wrap around in the same way as the timer reg
			last_time = target_time;
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	9a 81       	ldd	r25, Y+2	; 0x02
 44c:	9c 83       	std	Y+4, r25	; 0x04
 44e:	8b 83       	std	Y+3, r24	; 0x03
			target_time+=freq;
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	9a 81       	ldd	r25, Y+2	; 0x02
 454:	87 5f       	subi	r24, 0xF7	; 247
 456:	92 4c       	sbci	r25, 0xC2	; 194
 458:	9a 83       	std	Y+2, r25	; 0x02
 45a:	89 83       	std	Y+1, r24	; 0x01
		}
		
		
		// Write to screen if a new prime has been found
		if(new_num!=num){
 45c:	8e 81       	ldd	r24, Y+6	; 0x06
 45e:	9f 81       	ldd	r25, Y+7	; 0x07
 460:	a8 85       	ldd	r26, Y+8	; 0x08
 462:	b9 85       	ldd	r27, Y+9	; 0x09
 464:	c8 16       	cp	r12, r24
 466:	d9 06       	cpc	r13, r25
 468:	ea 06       	cpc	r14, r26
 46a:	fb 06       	cpc	r15, r27
 46c:	31 f0       	breq	.+12     	; 0x47a <__DATA_REGION_LENGTH__+0x7a>
			write_long(num);
 46e:	6e 81       	ldd	r22, Y+6	; 0x06
 470:	7f 81       	ldd	r23, Y+7	; 0x07
 472:	88 85       	ldd	r24, Y+8	; 0x08
 474:	99 85       	ldd	r25, Y+9	; 0x09
 476:	0e 94 db 00 	call	0x1b6	; 0x1b6 <write_long>
		}
		// Update last number
		num = new_num;
 47a:	ce 82       	std	Y+6, r12	; 0x06
 47c:	df 82       	std	Y+7, r13	; 0x07
 47e:	e8 86       	std	Y+8, r14	; 0x08
 480:	f9 86       	std	Y+9, r15	; 0x09
    }
 482:	cc cf       	rjmp	.-104    	; 0x41c <__DATA_REGION_LENGTH__+0x1c>

00000484 <main>:
}

int main(void)
{
	init();
 484:	0e 94 55 01 	call	0x2aa	; 0x2aa <init>
	init_lcd();
 488:	0e 94 ac 00 	call	0x158	; 0x158 <init_lcd>
	//write_char('1',2);
	
	//blink();
	//button();
	//primes();
	task_4();
 48c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <task_4>

00000490 <revese>:
 * string.c
 *
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
 490:	dc 01       	movw	r26, r24
	char * eos = str;
 492:	fc 01       	movw	r30, r24
	while(*eos!='\0')
 494:	01 c0       	rjmp	.+2      	; 0x498 <revese+0x8>
	eos++;
 496:	31 96       	adiw	r30, 0x01	; 1
 * Created: 2022-01-24 13:56:30
 *  Author: ivarj
 */ 
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
 498:	80 81       	ld	r24, Z
 49a:	81 11       	cpse	r24, r1
 49c:	fc cf       	rjmp	.-8      	; 0x496 <revese+0x6>
	eos++;
	eos--;
 49e:	31 97       	sbiw	r30, 0x01	; 1
	while(eos>=str){
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <revese+0x1c>
		char temp = *eos;
 4a2:	80 81       	ld	r24, Z
		*eos = *str;
 4a4:	9c 91       	ld	r25, X
 4a6:	90 83       	st	Z, r25
		*str = temp;
 4a8:	8d 93       	st	X+, r24
		eos--;
 4aa:	31 97       	sbiw	r30, 0x01	; 1
int revese(char* str){
	char * eos = str;
	while(*eos!='\0')
	eos++;
	eos--;
	while(eos>=str){
 4ac:	ea 17       	cp	r30, r26
 4ae:	fb 07       	cpc	r31, r27
 4b0:	c0 f7       	brcc	.-16     	; 0x4a2 <revese+0x12>
		*str = temp;
		eos--;
		str++;
	}
	return 0;
}
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	08 95       	ret

000004b8 <six_least_significant>:
void six_least_significant(long num,int *ret){
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
 4c8:	ea 01       	movw	r28, r20
	*ret = (int)(num-(num/1000000)*1000000);
 4ca:	20 e4       	ldi	r18, 0x40	; 64
 4cc:	32 e4       	ldi	r19, 0x42	; 66
 4ce:	4f e0       	ldi	r20, 0x0F	; 15
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	0e 94 b8 02 	call	0x570	; 0x570 <__divmodsi4>
 4d6:	60 e4       	ldi	r22, 0x40	; 64
 4d8:	72 e4       	ldi	r23, 0x42	; 66
 4da:	26 9f       	mul	r18, r22
 4dc:	c0 01       	movw	r24, r0
 4de:	27 9f       	mul	r18, r23
 4e0:	90 0d       	add	r25, r0
 4e2:	36 9f       	mul	r19, r22
 4e4:	90 0d       	add	r25, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	c8 1a       	sub	r12, r24
 4ea:	d9 0a       	sbc	r13, r25
 4ec:	d9 82       	std	Y+1, r13	; 0x01
 4ee:	c8 82       	st	Y, r12
}
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <int_to_str>:
int int_to_str(int num,char* buffer){
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	eb 01       	movw	r28, r22
	if (num == 0){
 504:	00 97       	sbiw	r24, 0x00	; 0
 506:	a1 f4       	brne	.+40     	; 0x530 <__stack+0x31>
		*buffer = 48;
 508:	80 e3       	ldi	r24, 0x30	; 48
 50a:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 50c:	19 82       	std	Y+1, r1	; 0x01
		return 0;
 50e:	17 c0       	rjmp	.+46     	; 0x53e <__stack+0x3f>
	}
	char * start = buffer;
	while (num)
	{
		*buffer = (volatile char) num-(num/10)*10+48;
 510:	28 2f       	mov	r18, r24
 512:	6a e0       	ldi	r22, 0x0A	; 10
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	0e 94 a4 02 	call	0x548	; 0x548 <__divmodhi4>
 51a:	86 2f       	mov	r24, r22
 51c:	97 2f       	mov	r25, r23
 51e:	66 0f       	add	r22, r22
 520:	36 2f       	mov	r19, r22
 522:	33 0f       	add	r19, r19
 524:	33 0f       	add	r19, r19
 526:	63 0f       	add	r22, r19
 528:	26 1b       	sub	r18, r22
 52a:	20 5d       	subi	r18, 0xD0	; 208
 52c:	21 93       	st	Z+, r18
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__stack+0x33>
 530:	fb 01       	movw	r30, r22
		*buffer = 48;
		*(++buffer) = '\0';
		return 0;
	}
	char * start = buffer;
	while (num)
 532:	00 97       	sbiw	r24, 0x00	; 0
 534:	69 f7       	brne	.-38     	; 0x510 <__stack+0x11>
	{
		*buffer = (volatile char) num-(num/10)*10+48;
		num/=10;
		buffer++;
	}
	*buffer = '\0';
 536:	10 82       	st	Z, r1
	revese(start);
 538:	ce 01       	movw	r24, r28
 53a:	0e 94 48 02 	call	0x490	; 0x490 <revese>
	return 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <__divmodhi4>:
 548:	97 fb       	bst	r25, 7
 54a:	07 2e       	mov	r0, r23
 54c:	16 f4       	brtc	.+4      	; 0x552 <__divmodhi4+0xa>
 54e:	00 94       	com	r0
 550:	07 d0       	rcall	.+14     	; 0x560 <__divmodhi4_neg1>
 552:	77 fd       	sbrc	r23, 7
 554:	09 d0       	rcall	.+18     	; 0x568 <__divmodhi4_neg2>
 556:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__udivmodhi4>
 55a:	07 fc       	sbrc	r0, 7
 55c:	05 d0       	rcall	.+10     	; 0x568 <__divmodhi4_neg2>
 55e:	3e f4       	brtc	.+14     	; 0x56e <__divmodhi4_exit>

00000560 <__divmodhi4_neg1>:
 560:	90 95       	com	r25
 562:	81 95       	neg	r24
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__divmodhi4_neg2>:
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255

0000056e <__divmodhi4_exit>:
 56e:	08 95       	ret

00000570 <__divmodsi4>:
 570:	05 2e       	mov	r0, r21
 572:	97 fb       	bst	r25, 7
 574:	1e f4       	brtc	.+6      	; 0x57c <__divmodsi4+0xc>
 576:	00 94       	com	r0
 578:	0e 94 cf 02 	call	0x59e	; 0x59e <__negsi2>
 57c:	57 fd       	sbrc	r21, 7
 57e:	07 d0       	rcall	.+14     	; 0x58e <__divmodsi4_neg2>
 580:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__udivmodsi4>
 584:	07 fc       	sbrc	r0, 7
 586:	03 d0       	rcall	.+6      	; 0x58e <__divmodsi4_neg2>
 588:	4e f4       	brtc	.+18     	; 0x59c <__divmodsi4_exit>
 58a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__negsi2>

0000058e <__divmodsi4_neg2>:
 58e:	50 95       	com	r21
 590:	40 95       	com	r20
 592:	30 95       	com	r19
 594:	21 95       	neg	r18
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	4f 4f       	sbci	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255

0000059c <__divmodsi4_exit>:
 59c:	08 95       	ret

0000059e <__negsi2>:
 59e:	90 95       	com	r25
 5a0:	80 95       	com	r24
 5a2:	70 95       	com	r23
 5a4:	61 95       	neg	r22
 5a6:	7f 4f       	sbci	r23, 0xFF	; 255
 5a8:	8f 4f       	sbci	r24, 0xFF	; 255
 5aa:	9f 4f       	sbci	r25, 0xFF	; 255
 5ac:	08 95       	ret

000005ae <__udivmodhi4>:
 5ae:	aa 1b       	sub	r26, r26
 5b0:	bb 1b       	sub	r27, r27
 5b2:	51 e1       	ldi	r21, 0x11	; 17
 5b4:	07 c0       	rjmp	.+14     	; 0x5c4 <__udivmodhi4_ep>

000005b6 <__udivmodhi4_loop>:
 5b6:	aa 1f       	adc	r26, r26
 5b8:	bb 1f       	adc	r27, r27
 5ba:	a6 17       	cp	r26, r22
 5bc:	b7 07       	cpc	r27, r23
 5be:	10 f0       	brcs	.+4      	; 0x5c4 <__udivmodhi4_ep>
 5c0:	a6 1b       	sub	r26, r22
 5c2:	b7 0b       	sbc	r27, r23

000005c4 <__udivmodhi4_ep>:
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	5a 95       	dec	r21
 5ca:	a9 f7       	brne	.-22     	; 0x5b6 <__udivmodhi4_loop>
 5cc:	80 95       	com	r24
 5ce:	90 95       	com	r25
 5d0:	bc 01       	movw	r22, r24
 5d2:	cd 01       	movw	r24, r26
 5d4:	08 95       	ret

000005d6 <__udivmodsi4>:
 5d6:	a1 e2       	ldi	r26, 0x21	; 33
 5d8:	1a 2e       	mov	r1, r26
 5da:	aa 1b       	sub	r26, r26
 5dc:	bb 1b       	sub	r27, r27
 5de:	fd 01       	movw	r30, r26
 5e0:	0d c0       	rjmp	.+26     	; 0x5fc <__udivmodsi4_ep>

000005e2 <__udivmodsi4_loop>:
 5e2:	aa 1f       	adc	r26, r26
 5e4:	bb 1f       	adc	r27, r27
 5e6:	ee 1f       	adc	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	a2 17       	cp	r26, r18
 5ec:	b3 07       	cpc	r27, r19
 5ee:	e4 07       	cpc	r30, r20
 5f0:	f5 07       	cpc	r31, r21
 5f2:	20 f0       	brcs	.+8      	; 0x5fc <__udivmodsi4_ep>
 5f4:	a2 1b       	sub	r26, r18
 5f6:	b3 0b       	sbc	r27, r19
 5f8:	e4 0b       	sbc	r30, r20
 5fa:	f5 0b       	sbc	r31, r21

000005fc <__udivmodsi4_ep>:
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	1a 94       	dec	r1
 606:	69 f7       	brne	.-38     	; 0x5e2 <__udivmodsi4_loop>
 608:	60 95       	com	r22
 60a:	70 95       	com	r23
 60c:	80 95       	com	r24
 60e:	90 95       	com	r25
 610:	9b 01       	movw	r18, r22
 612:	ac 01       	movw	r20, r24
 614:	bd 01       	movw	r22, r26
 616:	cf 01       	movw	r24, r30
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
