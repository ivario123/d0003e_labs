
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000592  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f84  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b7a  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000819  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000258  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000058b  00000000  00000000  00002cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000878  00000000  00000000  00003283  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e9       	ldi	r30, 0x92	; 146
  70:	f5 e0       	ldi	r31, 0x05	; 5
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 32       	cpi	r26, 0x28	; 40
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 23 02 	call	0x446	; 0x446 <main>
  82:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <init_lcd>:
	// uint16t's wrap around in the same way for timer and normal addition
	while(1){
		while(((uint16_t)TCNT1)!= last_time+freq);
		last_time =(uint16_t)TCNT1;
		toggle_led();
	}
  8a:	e4 ee       	ldi	r30, 0xE4	; 228
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	80 81       	ld	r24, Z
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	80 83       	st	Z, r24
  a0:	80 81       	ld	r24, Z
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	80 83       	st	Z, r24
  a6:	e5 ee       	ldi	r30, 0xE5	; 229
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	80 83       	st	Z, r24
  b6:	80 81       	ld	r24, Z
  b8:	80 63       	ori	r24, 0x30	; 48
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	e6 ee       	ldi	r30, 0xE6	; 230
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 78       	andi	r24, 0x8F	; 143
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e7 ee       	ldi	r30, 0xE7	; 231
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 71       	andi	r24, 0x1F	; 31
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <write_char>:
  e4:	cf 93       	push	r28
  e6:	c6 2f       	mov	r28, r22
  e8:	66 30       	cpi	r22, 0x06	; 6
  ea:	71 05       	cpc	r23, r1
  ec:	c0 f5       	brcc	.+112    	; 0x15e <write_char+0x7a>
  ee:	75 95       	asr	r23
  f0:	67 95       	ror	r22
  f2:	fb 01       	movw	r30, r22
  f4:	e4 51       	subi	r30, 0x14	; 20
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	90 ed       	ldi	r25, 0xD0	; 208
  fa:	98 0f       	add	r25, r24
  fc:	9a 30       	cpi	r25, 0x0A	; 10
  fe:	60 f4       	brcc	.+24     	; 0x118 <write_char+0x34>
 100:	a8 2f       	mov	r26, r24
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	d0 97       	sbiw	r26, 0x30	; 48
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	aa 0f       	add	r26, r26
 10c:	bb 1f       	adc	r27, r27
 10e:	a0 50       	subi	r26, 0x00	; 0
 110:	bf 4f       	sbci	r27, 0xFF	; 255
 112:	4d 91       	ld	r20, X+
 114:	5c 91       	ld	r21, X
 116:	02 c0       	rjmp	.+4      	; 0x11c <write_char+0x38>
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	1b c0       	rjmp	.+54     	; 0x158 <write_char+0x74>
 122:	94 2f       	mov	r25, r20
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	52 95       	swap	r21
 128:	42 95       	swap	r20
 12a:	4f 70       	andi	r20, 0x0F	; 15
 12c:	45 27       	eor	r20, r21
 12e:	5f 70       	andi	r21, 0x0F	; 15
 130:	45 27       	eor	r20, r21
 132:	c0 fd       	sbrc	r28, 0
 134:	05 c0       	rjmp	.+10     	; 0x140 <write_char+0x5c>
 136:	80 81       	ld	r24, Z
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
 13e:	09 c0       	rjmp	.+18     	; 0x152 <write_char+0x6e>
 140:	80 81       	ld	r24, Z
 142:	68 2f       	mov	r22, r24
 144:	6f 70       	andi	r22, 0x0F	; 15
 146:	70 e1       	ldi	r23, 0x10	; 16
 148:	97 9f       	mul	r25, r23
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	86 2b       	or	r24, r22
 150:	80 83       	st	Z, r24
 152:	35 96       	adiw	r30, 0x05	; 5
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	24 30       	cpi	r18, 0x04	; 4
 15a:	31 05       	cpc	r19, r1
 15c:	14 f3       	brlt	.-60     	; 0x122 <write_char+0x3e>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <write_long>:
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <write_long+0x12>
 174:	00 d0       	rcall	.+0      	; 0x176 <write_long+0x14>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	6b 01       	movw	r12, r22
 17c:	7c 01       	movw	r14, r24
 17e:	67 2b       	or	r22, r23
 180:	68 2b       	or	r22, r24
 182:	69 2b       	or	r22, r25
 184:	71 f5       	brne	.+92     	; 0x1e2 <write_long+0x80>
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	0e 94 72 00 	call	0xe4	; 0xe4 <write_char>
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <write_long+0x40>
 196:	b8 01       	movw	r22, r16
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <write_char>
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	05 30       	cpi	r16, 0x05	; 5
 1a4:	11 05       	cpc	r17, r1
 1a6:	bc f3       	brlt	.-18     	; 0x196 <write_long+0x34>
 1a8:	2e c0       	rjmp	.+92     	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 1aa:	c7 01       	movw	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	2a e0       	ldi	r18, 0x0A	; 10
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divmodsi4>
 1ba:	7a 83       	std	Y+2, r23	; 0x02
 1bc:	69 83       	std	Y+1, r22	; 0x01
 1be:	c2 2e       	mov	r12, r18
 1c0:	d3 2e       	mov	r13, r19
 1c2:	e4 2e       	mov	r14, r20
 1c4:	f5 2e       	mov	r15, r21
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	be 01       	movw	r22, r28
 1cc:	6d 5f       	subi	r22, 0xFD	; 253
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	0e 94 3b 02 	call	0x476	; 0x476 <int_to_str>
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	b8 01       	movw	r22, r16
 1d8:	0e 94 72 00 	call	0xe4	; 0xe4 <write_char>
 1dc:	01 50       	subi	r16, 0x01	; 1
 1de:	11 09       	sbc	r17, r1
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <write_long+0x84>
 1e2:	05 e0       	ldi	r16, 0x05	; 5
 1e4:	10 e0       	ldi	r17, 0x00	; 0
 1e6:	c1 14       	cp	r12, r1
 1e8:	d1 04       	cpc	r13, r1
 1ea:	e1 04       	cpc	r14, r1
 1ec:	f1 04       	cpc	r15, r1
 1ee:	49 f0       	breq	.+18     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1f0:	11 23       	and	r17, r17
 1f2:	dc f6       	brge	.-74     	; 0x1aa <write_long+0x48>
 1f4:	06 c0       	rjmp	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1f6:	b8 01       	movw	r22, r16
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 72 00 	call	0xe4	; 0xe4 <write_char>
 1fe:	01 50       	subi	r16, 0x01	; 1
 200:	11 09       	sbc	r17, r1
 202:	11 23       	and	r17, r17
 204:	c4 f7       	brge	.-16     	; 0x1f6 <write_long+0x94>
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <is_prime>:
 220:	8f 92       	push	r8
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	4b 01       	movw	r8, r22
 232:	5c 01       	movw	r10, r24
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	88 16       	cp	r8, r24
 238:	91 04       	cpc	r9, r1
 23a:	a1 04       	cpc	r10, r1
 23c:	b1 04       	cpc	r11, r1
 23e:	0c f1       	brlt	.+66     	; 0x282 <is_prime+0x62>
 240:	80 fe       	sbrs	r8, 0
 242:	22 c0       	rjmp	.+68     	; 0x288 <is_prime+0x68>
 244:	0f 2e       	mov	r0, r31
 246:	f3 e0       	ldi	r31, 0x03	; 3
 248:	cf 2e       	mov	r12, r31
 24a:	d1 2c       	mov	r13, r1
 24c:	e1 2c       	mov	r14, r1
 24e:	f1 2c       	mov	r15, r1
 250:	f0 2d       	mov	r31, r0
 252:	0f c0       	rjmp	.+30     	; 0x272 <is_prime+0x52>
 254:	c5 01       	movw	r24, r10
 256:	b4 01       	movw	r22, r8
 258:	a7 01       	movw	r20, r14
 25a:	96 01       	movw	r18, r12
 25c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__divmodsi4>
 260:	67 2b       	or	r22, r23
 262:	68 2b       	or	r22, r24
 264:	69 2b       	or	r22, r25
 266:	99 f0       	breq	.+38     	; 0x28e <is_prime+0x6e>
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	c8 1a       	sub	r12, r24
 26c:	d8 0a       	sbc	r13, r24
 26e:	e8 0a       	sbc	r14, r24
 270:	f8 0a       	sbc	r15, r24
 272:	c8 14       	cp	r12, r8
 274:	d9 04       	cpc	r13, r9
 276:	ea 04       	cpc	r14, r10
 278:	fb 04       	cpc	r15, r11
 27a:	64 f3       	brlt	.-40     	; 0x254 <is_prime+0x34>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 c0       	rjmp	.+16     	; 0x292 <is_prime+0x72>
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	05 c0       	rjmp	.+10     	; 0x292 <is_prime+0x72>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <is_prime+0x72>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ff 90       	pop	r15
 294:	ef 90       	pop	r14
 296:	df 90       	pop	r13
 298:	cf 90       	pop	r12
 29a:	bf 90       	pop	r11
 29c:	af 90       	pop	r10
 29e:	9f 90       	pop	r9
 2a0:	8f 90       	pop	r8
 2a2:	08 95       	ret

000002a4 <toggle_led_2>:



void toggle_led_2(void){
	// Could remove the if statement but this is more readable
	if((LCDDR8&1)== 0)
 2a4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 2a8:	80 fd       	sbrc	r24, 0
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <toggle_led_2+0x14>
	LCDDR8 = LCDDR8|1;
 2ac:	e4 ef       	ldi	r30, 0xF4	; 244
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
 2b6:	08 95       	ret
	else
	LCDDR8= LCDDR8^1;
 2b8:	e4 ef       	ldi	r30, 0xF4	; 244
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	90 81       	ld	r25, Z
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 27       	eor	r24, r25
 2c2:	80 83       	st	Z, r24
 2c4:	08 95       	ret

000002c6 <init>:
			// Turn LCDDR2 bit 1 high
			LCDDR2 = LCDDR2|2;
		}
		else{
			LCDDR1 = LCDDR1|2;
			LCDDR2 = LCDDR2^2;
 2c6:	e1 e6       	ldi	r30, 0x61	; 97
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	80 83       	st	Z, r24
 2ce:	10 82       	st	Z, r1
 2d0:	e1 e8       	ldi	r30, 0x81	; 129
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	84 60       	ori	r24, 0x04	; 4
 2d8:	80 83       	st	Z, r24
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	85 b9       	out	0x05, r24	; 5
 2e0:	08 95       	ret

000002e2 <next_prime>:
}

/************************************************************************/
/*								TASK 4									*/
/************************************************************************/
void next_prime(long *num){
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	ec 01       	movw	r28, r24
	// Computes the next prime, if is_prime is broken it loops infinitely. Terrible for real-time systems
	while(1)
	{
		// If number i smaller than 3, increment by 1
		// Else increment by 2 if the number is odd, else increment by 1
		*num+=1;
 2e8:	88 81       	ld	r24, Y
 2ea:	99 81       	ldd	r25, Y+1	; 0x01
 2ec:	aa 81       	ldd	r26, Y+2	; 0x02
 2ee:	bb 81       	ldd	r27, Y+3	; 0x03
 2f0:	bc 01       	movw	r22, r24
 2f2:	cd 01       	movw	r24, r26
 2f4:	6f 5f       	subi	r22, 0xFF	; 255
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	68 83       	st	Y, r22
 2fe:	79 83       	std	Y+1, r23	; 0x01
 300:	8a 83       	std	Y+2, r24	; 0x02
 302:	9b 83       	std	Y+3, r25	; 0x03
			
		// Check if new number is a prime number
		if(is_prime(*num)==1){
 304:	0e 94 10 01 	call	0x220	; 0x220 <is_prime>
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	71 f7       	brne	.-36     	; 0x2e8 <next_prime+0x6>
			return;
		}
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <toggle_button_2>:


void toggle_button_2(void){
	// Swap, if statement not needed but makes it a bit clearer
	if((LCDDR13&1)== 1){
 312:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 316:	80 ff       	sbrs	r24, 0
 318:	0c c0       	rjmp	.+24     	; 0x332 <toggle_button_2+0x20>
		// Look at button
		LCDDR13 = LCDDR13^1;
 31a:	e9 ef       	ldi	r30, 0xF9	; 249
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	90 81       	ld	r25, Z
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 27       	eor	r24, r25
 324:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18|1;
 326:	ee ef       	ldi	r30, 0xFE	; 254
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret
	}
	else{
		LCDDR13 = LCDDR13|1;
 332:	e9 ef       	ldi	r30, 0xF9	; 249
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	80 83       	st	Z, r24
		LCDDR18 = LCDDR18^1;
 33c:	ee ef       	ldi	r30, 0xFE	; 254
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	90 81       	ld	r25, Z
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	89 27       	eor	r24, r25
 346:	80 83       	st	Z, r24
 348:	08 95       	ret

0000034a <check_interrupts>:
	}
}


int check_interrupts(uint16_t target_time,uint16_t prev_time,uint8_t *buttonstate){
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	8a 01       	movw	r16, r20
	
	
	
	// Checking the timer interrupt
	uint16_t time = (uint16_t)TCNT1;
 35a:	e0 90 84 00 	lds	r14, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 35e:	f0 90 85 00 	lds	r15, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    
    // Catches wrap around condition
	// if plausible time
	if(target_time <= time){
 362:	e8 16       	cp	r14, r24
 364:	f9 06       	cpc	r15, r25
 366:	60 f0       	brcs	.+24     	; 0x380 <check_interrupts+0x36>
		// If in valid range
		if((prev_time > target_time&& time <= prev_time)|| target_time > prev_time)
 368:	86 17       	cp	r24, r22
 36a:	97 07       	cpc	r25, r23
 36c:	18 f4       	brcc	.+6      	; 0x374 <check_interrupts+0x2a>
 36e:	6e 15       	cp	r22, r14
 370:	7f 05       	cpc	r23, r15
 372:	18 f4       	brcc	.+6      	; 0x37a <check_interrupts+0x30>
 374:	6c 17       	cp	r22, r28
 376:	7d 07       	cpc	r23, r29
 378:	18 f4       	brcc	.+6      	; 0x380 <check_interrupts+0x36>
		{    
			
			toggle_led_2();
 37a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <toggle_led_2>
			// Register a timer event
			target_time=time;
 37e:	e7 01       	movw	r28, r14
		}
	}
	
	// check if button state has changed
	if((1!=(PINB&(1<<7))>>7))
 380:	1f 99       	sbic	0x03, 7	; 3
 382:	0f c0       	rjmp	.+30     	; 0x3a2 <check_interrupts+0x58>
	{
		// Buttonstate 0 means that the button has been pressed and released
		if(*buttonstate==0){
 384:	f8 01       	movw	r30, r16
 386:	80 81       	ld	r24, Z
 388:	81 11       	cpse	r24, r1
 38a:	02 c0       	rjmp	.+4      	; 0x390 <check_interrupts+0x46>
			*buttonstate=1;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 83       	st	Z, r24
		}
		// Buttonstate 2 means that the button was released before this event
		if(*buttonstate == 2){
 390:	f8 01       	movw	r30, r16
 392:	80 81       	ld	r24, Z
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	59 f4       	brne	.+22     	; 0x3ae <check_interrupts+0x64>
			// Triggers event
			toggle_button_2();
 398:	0e 94 89 01 	call	0x312	; 0x312 <toggle_button_2>
			*buttonstate = 0;
 39c:	f8 01       	movw	r30, r16
 39e:	10 82       	st	Z, r1
 3a0:	06 c0       	rjmp	.+12     	; 0x3ae <check_interrupts+0x64>
		}
	}
	else if(*buttonstate == 1){
 3a2:	f8 01       	movw	r30, r16
 3a4:	80 81       	ld	r24, Z
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	11 f4       	brne	.+4      	; 0x3ae <check_interrupts+0x64>
		*buttonstate =2 ;
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	80 83       	st	Z, r24
	}
	// Return target time
	return target_time;
	
}
 3ae:	ce 01       	movw	r24, r28
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	ef 90       	pop	r14
 3bc:	08 95       	ret

000003be <task_4>:


void task_4(void){
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	29 97       	sbiw	r28, 0x09	; 9
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
	LCDDR13 = LCDDR13|1;										// Start value for the leds for switching
 3d2:	e9 ef       	ldi	r30, 0xF9	; 249
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	80 83       	st	Z, r24
	uint16_t freq = 31250/2;									// The segment should turn on and of every half cycle i.e flicker with 2 Hz frequency
	volatile uint16_t target_time = TCNT1+freq;					// Target time, will wrap around just like the timer
 3dc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 3e0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3e4:	87 5f       	subi	r24, 0xF7	; 247
 3e6:	92 4c       	sbci	r25, 0xC2	; 194
 3e8:	9a 83       	std	Y+2, r25	; 0x02
 3ea:	89 83       	std	Y+1, r24	; 0x01
	volatile uint16_t last_time = target_time-freq;				// Last time the timer triggered, useful to look for overflows
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	89 50       	subi	r24, 0x09	; 9
 3f2:	9d 43       	sbci	r25, 0x3D	; 61
 3f4:	9c 83       	std	Y+4, r25	; 0x04
 3f6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t buttonstate = 1;									// Tracks button actions, event triggers on 3
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	8d 83       	std	Y+5, r24	; 0x05
	long num = 0;												// Last number checked
 3fc:	1e 82       	std	Y+6, r1	; 0x06
 3fe:	1f 82       	std	Y+7, r1	; 0x07
 400:	18 86       	std	Y+8, r1	; 0x08
 402:	19 86       	std	Y+9, r1	; 0x09
	
	while(1)
	{
		// Calculate the next prime
		next_prime(&num);
 404:	ce 01       	movw	r24, r28
 406:	06 96       	adiw	r24, 0x06	; 6
 408:	0e 94 71 01 	call	0x2e2	; 0x2e2 <next_prime>
		// Check if any interrupts have been triggered
		uint16_t new_time = check_interrupts(target_time,last_time,&buttonstate);
 40c:	6b 81       	ldd	r22, Y+3	; 0x03
 40e:	7c 81       	ldd	r23, Y+4	; 0x04
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	ae 01       	movw	r20, r28
 416:	4b 5f       	subi	r20, 0xFB	; 251
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	0e 94 a5 01 	call	0x34a	; 0x34a <check_interrupts>
		if(target_time != new_time ){
 41e:	29 81       	ldd	r18, Y+1	; 0x01
 420:	3a 81       	ldd	r19, Y+2	; 0x02
 422:	82 17       	cp	r24, r18
 424:	93 07       	cpc	r25, r19
 426:	41 f0       	breq	.+16     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
			// uints wrap around in the same way as the timer reg
			last_time = new_time;
 428:	9c 83       	std	Y+4, r25	; 0x04
 42a:	8b 83       	std	Y+3, r24	; 0x03
			target_time=last_time+freq;
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	9c 81       	ldd	r25, Y+4	; 0x04
 430:	87 5f       	subi	r24, 0xF7	; 247
 432:	92 4c       	sbci	r25, 0xC2	; 194
 434:	9a 83       	std	Y+2, r25	; 0x02
 436:	89 83       	std	Y+1, r24	; 0x01
		}
		
		
		write_long(num);
 438:	6e 81       	ldd	r22, Y+6	; 0x06
 43a:	7f 81       	ldd	r23, Y+7	; 0x07
 43c:	88 85       	ldd	r24, Y+8	; 0x08
 43e:	99 85       	ldd	r25, Y+9	; 0x09
 440:	0e 94 b1 00 	call	0x162	; 0x162 <write_long>
	}
 444:	df cf       	rjmp	.-66     	; 0x404 <__DATA_REGION_LENGTH__+0x4>

00000446 <main>:
/************************************************************************/
/*							MAIN FUNCTION								*/
/************************************************************************/
int main(void)
{
	init();
 446:	0e 94 63 01 	call	0x2c6	; 0x2c6 <init>
	init_lcd();
 44a:	0e 94 45 00 	call	0x8a	; 0x8a <init_lcd>
	/************************************************************************/
	// We can't run all functions after one another since they all implement some sort of busy wait
	// This would stop the next function from running.
	// Thus we need to rewrite the functions blink, button, primes to one large loop and call the helper functions
	// From there.
	task_4();
 44e:	0e 94 df 01 	call	0x3be	; 0x3be <task_4>

00000452 <revese>:
}

void six_least_significant(long num,int *ret){
	// Plucks out the six least significant 
	*ret = (int)(num-(num/1000000)*1000000);
}
 452:	dc 01       	movw	r26, r24
 454:	fc 01       	movw	r30, r24
 456:	01 c0       	rjmp	.+2      	; 0x45a <revese+0x8>
 458:	31 96       	adiw	r30, 0x01	; 1
 45a:	80 81       	ld	r24, Z
 45c:	81 11       	cpse	r24, r1
 45e:	fc cf       	rjmp	.-8      	; 0x458 <revese+0x6>
 460:	31 97       	sbiw	r30, 0x01	; 1
 462:	05 c0       	rjmp	.+10     	; 0x46e <revese+0x1c>
 464:	80 81       	ld	r24, Z
 466:	9c 91       	ld	r25, X
 468:	90 83       	st	Z, r25
 46a:	8d 93       	st	X+, r24
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	ea 17       	cp	r30, r26
 470:	fb 07       	cpc	r31, r27
 472:	c0 f7       	brcc	.-16     	; 0x464 <revese+0x12>
 474:	08 95       	ret

00000476 <int_to_str>:
void int_to_str(int num,char* buffer){
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	eb 01       	movw	r28, r22
	// Base case
	if (num == 0){
 47c:	00 97       	sbiw	r24, 0x00	; 0
 47e:	a1 f4       	brne	.+40     	; 0x4a8 <int_to_str+0x32>
		*buffer = 48;
 480:	80 e3       	ldi	r24, 0x30	; 48
 482:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 484:	19 82       	std	Y+1, r1	; 0x01
		return;
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <int_to_str+0x40>
	char * start = buffer;
	// Loop until num == 0
	while (num)
	{
		// Pluck out the least significant digit and convert it to a char
		*buffer = (volatile char) num-(num/10)*10+48;
 488:	28 2f       	mov	r18, r24
 48a:	6a e0       	ldi	r22, 0x0A	; 10
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__divmodhi4>
 492:	86 2f       	mov	r24, r22
 494:	97 2f       	mov	r25, r23
 496:	66 0f       	add	r22, r22
 498:	36 2f       	mov	r19, r22
 49a:	33 0f       	add	r19, r19
 49c:	33 0f       	add	r19, r19
 49e:	63 0f       	add	r22, r19
 4a0:	26 1b       	sub	r18, r22
 4a2:	20 5d       	subi	r18, 0xD0	; 208
 4a4:	21 93       	st	Z+, r18
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <int_to_str+0x34>
 4a8:	fb 01       	movw	r30, r22
		return;
	}
	// Track start of string
	char * start = buffer;
	// Loop until num == 0
	while (num)
 4aa:	00 97       	sbiw	r24, 0x00	; 0
 4ac:	69 f7       	brne	.-38     	; 0x488 <int_to_str+0x12>
		// remove the least significant digit
		num/=10;
		buffer++;
	}
	// Terminate string
	*buffer = '\0';
 4ae:	10 82       	st	Z, r1
	// Reverse the string to make it readable
	revese(start);
 4b0:	ce 01       	movw	r24, r28
 4b2:	0e 94 29 02 	call	0x452	; 0x452 <revese>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <__divmodhi4>:
 4bc:	97 fb       	bst	r25, 7
 4be:	07 2e       	mov	r0, r23
 4c0:	16 f4       	brtc	.+4      	; 0x4c6 <__divmodhi4+0xa>
 4c2:	00 94       	com	r0
 4c4:	07 d0       	rcall	.+14     	; 0x4d4 <__divmodhi4_neg1>
 4c6:	77 fd       	sbrc	r23, 7
 4c8:	09 d0       	rcall	.+18     	; 0x4dc <__divmodhi4_neg2>
 4ca:	0e 94 91 02 	call	0x522	; 0x522 <__udivmodhi4>
 4ce:	07 fc       	sbrc	r0, 7
 4d0:	05 d0       	rcall	.+10     	; 0x4dc <__divmodhi4_neg2>
 4d2:	3e f4       	brtc	.+14     	; 0x4e2 <__divmodhi4_exit>

000004d4 <__divmodhi4_neg1>:
 4d4:	90 95       	com	r25
 4d6:	81 95       	neg	r24
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	08 95       	ret

000004dc <__divmodhi4_neg2>:
 4dc:	70 95       	com	r23
 4de:	61 95       	neg	r22
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255

000004e2 <__divmodhi4_exit>:
 4e2:	08 95       	ret

000004e4 <__divmodsi4>:
 4e4:	05 2e       	mov	r0, r21
 4e6:	97 fb       	bst	r25, 7
 4e8:	1e f4       	brtc	.+6      	; 0x4f0 <__divmodsi4+0xc>
 4ea:	00 94       	com	r0
 4ec:	0e 94 89 02 	call	0x512	; 0x512 <__negsi2>
 4f0:	57 fd       	sbrc	r21, 7
 4f2:	07 d0       	rcall	.+14     	; 0x502 <__divmodsi4_neg2>
 4f4:	0e 94 a5 02 	call	0x54a	; 0x54a <__udivmodsi4>
 4f8:	07 fc       	sbrc	r0, 7
 4fa:	03 d0       	rcall	.+6      	; 0x502 <__divmodsi4_neg2>
 4fc:	4e f4       	brtc	.+18     	; 0x510 <__divmodsi4_exit>
 4fe:	0c 94 89 02 	jmp	0x512	; 0x512 <__negsi2>

00000502 <__divmodsi4_neg2>:
 502:	50 95       	com	r21
 504:	40 95       	com	r20
 506:	30 95       	com	r19
 508:	21 95       	neg	r18
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	4f 4f       	sbci	r20, 0xFF	; 255
 50e:	5f 4f       	sbci	r21, 0xFF	; 255

00000510 <__divmodsi4_exit>:
 510:	08 95       	ret

00000512 <__negsi2>:
 512:	90 95       	com	r25
 514:	80 95       	com	r24
 516:	70 95       	com	r23
 518:	61 95       	neg	r22
 51a:	7f 4f       	sbci	r23, 0xFF	; 255
 51c:	8f 4f       	sbci	r24, 0xFF	; 255
 51e:	9f 4f       	sbci	r25, 0xFF	; 255
 520:	08 95       	ret

00000522 <__udivmodhi4>:
 522:	aa 1b       	sub	r26, r26
 524:	bb 1b       	sub	r27, r27
 526:	51 e1       	ldi	r21, 0x11	; 17
 528:	07 c0       	rjmp	.+14     	; 0x538 <__udivmodhi4_ep>

0000052a <__udivmodhi4_loop>:
 52a:	aa 1f       	adc	r26, r26
 52c:	bb 1f       	adc	r27, r27
 52e:	a6 17       	cp	r26, r22
 530:	b7 07       	cpc	r27, r23
 532:	10 f0       	brcs	.+4      	; 0x538 <__udivmodhi4_ep>
 534:	a6 1b       	sub	r26, r22
 536:	b7 0b       	sbc	r27, r23

00000538 <__udivmodhi4_ep>:
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	5a 95       	dec	r21
 53e:	a9 f7       	brne	.-22     	; 0x52a <__udivmodhi4_loop>
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	bc 01       	movw	r22, r24
 546:	cd 01       	movw	r24, r26
 548:	08 95       	ret

0000054a <__udivmodsi4>:
 54a:	a1 e2       	ldi	r26, 0x21	; 33
 54c:	1a 2e       	mov	r1, r26
 54e:	aa 1b       	sub	r26, r26
 550:	bb 1b       	sub	r27, r27
 552:	fd 01       	movw	r30, r26
 554:	0d c0       	rjmp	.+26     	; 0x570 <__udivmodsi4_ep>

00000556 <__udivmodsi4_loop>:
 556:	aa 1f       	adc	r26, r26
 558:	bb 1f       	adc	r27, r27
 55a:	ee 1f       	adc	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	a2 17       	cp	r26, r18
 560:	b3 07       	cpc	r27, r19
 562:	e4 07       	cpc	r30, r20
 564:	f5 07       	cpc	r31, r21
 566:	20 f0       	brcs	.+8      	; 0x570 <__udivmodsi4_ep>
 568:	a2 1b       	sub	r26, r18
 56a:	b3 0b       	sbc	r27, r19
 56c:	e4 0b       	sbc	r30, r20
 56e:	f5 0b       	sbc	r31, r21

00000570 <__udivmodsi4_ep>:
 570:	66 1f       	adc	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a 94       	dec	r1
 57a:	69 f7       	brne	.-38     	; 0x556 <__udivmodsi4_loop>
 57c:	60 95       	com	r22
 57e:	70 95       	com	r23
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	9b 01       	movw	r18, r22
 586:	ac 01       	movw	r20, r24
 588:	bd 01       	movw	r22, r26
 58a:	cf 01       	movw	r24, r30
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
