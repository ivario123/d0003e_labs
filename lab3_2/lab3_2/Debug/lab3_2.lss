
lab3_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000738  000007cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000738  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000232  0080012e  0080012e  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001525  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf9  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091c  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000033a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062c  00000000  00000000  000036cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e8  00000000  00000000  00003cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000046e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e3       	ldi	r30, 0x38	; 56
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 32       	cpi	r26, 0x2E	; 46
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ae e2       	ldi	r26, 0x2E	; 46
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a0 36       	cpi	r26, 0x60	; 96
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 c1 01 	call	0x382	; 0x382 <main>
  92:	0c 94 9a 03 	jmp	0x734	; 0x734 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
/************************************************************************/

void swap_segment(void){
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
  b6:	e5 ee       	ldi	r30, 0xE5	; 229
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e6 ee       	ldi	r30, 0xE6	; 230
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 78       	andi	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	e7 ee       	ldi	r30, 0xE7	; 231
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <write_char>:
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	c0 f5       	brcc	.+112    	; 0x16e <write_char+0x7a>
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	fb 01       	movw	r30, r22
 104:	e4 51       	subi	r30, 0x14	; 20
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	90 ed       	ldi	r25, 0xD0	; 208
 10a:	98 0f       	add	r25, r24
 10c:	9a 30       	cpi	r25, 0x0A	; 10
 10e:	60 f4       	brcc	.+24     	; 0x128 <write_char+0x34>
 110:	a8 2f       	mov	r26, r24
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	d0 97       	sbiw	r26, 0x30	; 48
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	4d 91       	ld	r20, X+
 124:	5c 91       	ld	r21, X
 126:	02 c0       	rjmp	.+4      	; 0x12c <write_char+0x38>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	1b c0       	rjmp	.+54     	; 0x168 <write_char+0x74>
 132:	94 2f       	mov	r25, r20
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	c0 fd       	sbrc	r28, 0
 144:	05 c0       	rjmp	.+10     	; 0x150 <write_char+0x5c>
 146:	80 81       	ld	r24, Z
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <write_char+0x6e>
 150:	80 81       	ld	r24, Z
 152:	68 2f       	mov	r22, r24
 154:	6f 70       	andi	r22, 0x0F	; 15
 156:	70 e1       	ldi	r23, 0x10	; 16
 158:	97 9f       	mul	r25, r23
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	86 2b       	or	r24, r22
 160:	80 83       	st	Z, r24
 162:	35 96       	adiw	r30, 0x05	; 5
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 30       	cpi	r18, 0x04	; 4
 16a:	31 05       	cpc	r19, r1
 16c:	14 f3       	brlt	.-60     	; 0x132 <write_char+0x3e>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <is_prime>:
}

int is_prime(long num){
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
	
	if (num <= 3)
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	88 16       	cp	r8, r24
 18a:	91 04       	cpc	r9, r1
 18c:	a1 04       	cpc	r10, r1
 18e:	b1 04       	cpc	r11, r1
 190:	0c f1       	brlt	.+66     	; 0x1d4 <is_prime+0x62>
	return 1;
	
	if(num%2 == 0)
 192:	80 fe       	sbrs	r8, 0
 194:	22 c0       	rjmp	.+68     	; 0x1da <is_prime+0x68>
 196:	0f 2e       	mov	r0, r31
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	cf 2e       	mov	r12, r31
 19c:	d1 2c       	mov	r13, r1
 19e:	e1 2c       	mov	r14, r1
 1a0:	f1 2c       	mov	r15, r1
 1a2:	f0 2d       	mov	r31, r0
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <is_prime+0x52>
	return 0;
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 1b2:	67 2b       	or	r22, r23
 1b4:	68 2b       	or	r22, r24
 1b6:	69 2b       	or	r22, r25
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <is_prime+0x6e>
		return 0;
		counter++;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	c8 1a       	sub	r12, r24
 1be:	d8 0a       	sbc	r13, r24
 1c0:	e8 0a       	sbc	r14, r24
 1c2:	f8 0a       	sbc	r15, r24
	if(num%2 == 0)
	return 0;
	
	long counter = 3;
	
	while(counter <num){
 1c4:	c8 14       	cp	r12, r8
 1c6:	d9 04       	cpc	r13, r9
 1c8:	ea 04       	cpc	r14, r10
 1ca:	fb 04       	cpc	r15, r11
 1cc:	64 f3       	brlt	.-40     	; 0x1a6 <is_prime+0x34>
		if(num%counter == 0)
		return 0;
		counter++;
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x72>
}

int is_prime(long num){
	
	if (num <= 3)
	return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x72>
	
	if(num%2 == 0)
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x72>
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
		return 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		counter++;
	}
	return 1;
}
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <toggle_led>:

void toggle_led(void){
	LCDDR8= LCDDR8^1;
 1f6:	e4 ef       	ldi	r30, 0xF4	; 244
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	89 27       	eor	r24, r25
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <blink>:
		printAt(button_counter,4);
	}
}
void blink(void){
	while(1){
		lock(&blink_mutex);
 204:	86 e3       	ldi	r24, 0x36	; 54
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lock>
		toggle_led();
 20c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <toggle_led>
 210:	f9 cf       	rjmp	.-14     	; 0x204 <blink>

00000212 <reset_timer>:
mutex primes_mutex = MUTEX_INIT;
mutex button_print_mutex = MUTEX_INIT;
uint16_t * timer = (uint16_t *)0x84;
uint8_t button_counter;
void reset_timer(){
	*timer = 0;
 212:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <timer>
 216:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <timer+0x1>
 21a:	11 82       	std	Z+1, r1	; 0x01
 21c:	10 82       	st	Z, r1
 21e:	08 95       	ret

00000220 <__vector_3>:
}
ISR(PCINT1_vect) {
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	// Yield only on press, not release
		if(0!=(PINB&(1<<7))>>7)
 242:	1f 9b       	sbis	0x03, 7	; 3
 244:	04 c0       	rjmp	.+8      	; 0x24e <__vector_3+0x2e>
			unlock(&button_mutex);
 246:	82 e3       	ldi	r24, 0x32	; 50
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <unlock>
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_7>:
ISR(TIMER1_COMPA_vect){
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	unlock(&blink_mutex);
 292:	86 e3       	ldi	r24, 0x36	; 54
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <unlock>
	reset_timer();
 29a:	0e 94 09 01 	call	0x212	; 0x212 <reset_timer>
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <printAt>:
			printAt(n, pos);
		}
	}
}

void printAt(long num, int pos) {
 2c0:	8f 92       	push	r8
 2c2:	9f 92       	push	r9
 2c4:	af 92       	push	r10
 2c6:	bf 92       	push	r11
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	4b 01       	movw	r8, r22
 2d6:	5c 01       	movw	r10, r24
 2d8:	ea 01       	movw	r28, r20
	
    write_char((num % 100) / 10 + '0', pos);
 2da:	24 e6       	ldi	r18, 0x64	; 100
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 2e6:	0f 2e       	mov	r0, r31
 2e8:	fa e0       	ldi	r31, 0x0A	; 10
 2ea:	cf 2e       	mov	r12, r31
 2ec:	d1 2c       	mov	r13, r1
 2ee:	e1 2c       	mov	r14, r1
 2f0:	f1 2c       	mov	r15, r1
 2f2:	f0 2d       	mov	r31, r0
 2f4:	a7 01       	movw	r20, r14
 2f6:	96 01       	movw	r18, r12
 2f8:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 2fc:	be 01       	movw	r22, r28
 2fe:	80 e3       	ldi	r24, 0x30	; 48
 300:	82 0f       	add	r24, r18
 302:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
	pos++;
 306:	21 96       	adiw	r28, 0x01	; 1
    write_char( num % 10 + '0', pos);
 308:	c5 01       	movw	r24, r10
 30a:	b4 01       	movw	r22, r8
 30c:	a7 01       	movw	r20, r14
 30e:	96 01       	movw	r18, r12
 310:	0e 94 18 03 	call	0x630	; 0x630 <__divmodsi4>
 314:	86 2f       	mov	r24, r22
 316:	be 01       	movw	r22, r28
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
}
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	08 95       	ret

00000334 <computePrimes>:
}
ISR(TIMER1_COMPA_vect){
	unlock(&blink_mutex);
	reset_timer();
}
void computePrimes(int pos) {
 334:	ec 01       	movw	r28, r24
	long n;
	
	for(n = 1; ; n++) {
 336:	c1 2c       	mov	r12, r1
 338:	d1 2c       	mov	r13, r1
 33a:	76 01       	movw	r14, r12
 33c:	c3 94       	inc	r12
		if (is_prime((long)n)) {
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	0e 94 b9 00 	call	0x172	; 0x172 <is_prime>
 346:	89 2b       	or	r24, r25
 348:	29 f0       	breq	.+10     	; 0x354 <computePrimes+0x20>
			printAt(n, pos);
 34a:	ae 01       	movw	r20, r28
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	0e 94 60 01 	call	0x2c0	; 0x2c0 <printAt>
	reset_timer();
}
void computePrimes(int pos) {
	long n;
	
	for(n = 1; ; n++) {
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	c8 1a       	sub	r12, r24
 358:	d8 0a       	sbc	r13, r24
 35a:	e8 0a       	sbc	r14, r24
 35c:	f8 0a       	sbc	r15, r24
		if (is_prime((long)n)) {
			printAt(n, pos);
		}
	}
 35e:	ef cf       	rjmp	.-34     	; 0x33e <computePrimes+0xa>

00000360 <button>:
    write_char( num % 10 + '0', pos);
}
void button(void){
	while(1){
		
		lock(&button_mutex);
 360:	82 e3       	ldi	r24, 0x32	; 50
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lock>
		button_counter++;
 368:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <button_counter>
 36c:	6f 5f       	subi	r22, 0xFF	; 255
 36e:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <button_counter>
		printAt(button_counter,4);
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	44 e0       	ldi	r20, 0x04	; 4
 37a:	50 e0       	ldi	r21, 0x00	; 0
 37c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <printAt>
 380:	ef cf       	rjmp	.-34     	; 0x360 <button>

00000382 <main>:
	}
}


int main() {
	LCDDR13 = LCDDR13|1;
 382:	e9 ef       	ldi	r30, 0xF9	; 249
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	80 83       	st	Z, r24
	init_lcd();
 38c:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
	uint16_t * target_time = (uint16_t *)0x88;
	
	*target_time = 3906;												// Approximate form of 50ms in clock cycles * 
 390:	82 e4       	ldi	r24, 0x42	; 66
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 398:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	// reseting timer
	*timer = 0;
 39c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <timer>
 3a0:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <timer+0x1>
 3a4:	11 82       	std	Z+1, r1	; 0x01
 3a6:	10 82       	st	Z, r1
	
	lock(&blink_mutex);
 3a8:	86 e3       	ldi	r24, 0x36	; 54
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lock>
	lock(&button_mutex);
 3b0:	82 e3       	ldi	r24, 0x32	; 50
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lock>
	lock(&primes_mutex);
 3b8:	8e e2       	ldi	r24, 0x2E	; 46
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <lock>
	spawn(blink,0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 6f 02 	call	0x4de	; 0x4de <spawn>
	spawn(button,0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 eb       	ldi	r24, 0xB0	; 176
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 6f 02 	call	0x4de	; 0x4de <spawn>
	computePrimes(0);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 9a 01 	call	0x334	; 0x334 <computePrimes>

000003e0 <initialize>:
	// Pluck the first thread from the queue
	// Enqueue the thread that was plucked
	enqueue(current,&readyQ);
	// Dequeue and execute next thread
	dispatch(dequeue(&readyQ));
	ENABLE();
 3e0:	e1 e6       	ldi	r30, 0x61	; 97
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	80 83       	st	Z, r24
 3e8:	10 82       	st	Z, r1
 3ea:	e1 e8       	ldi	r30, 0x81	; 129
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	85 60       	ori	r24, 0x05	; 5
 3f2:	80 83       	st	Z, r24
 3f4:	85 b1       	in	r24, 0x05	; 5
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	85 b9       	out	0x05, r24	; 5
 3fa:	84 b7       	in	r24, 0x34	; 52
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	84 bf       	out	0x34, r24	; 52
 400:	e9 e6       	ldi	r30, 0x69	; 105
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	83 60       	ori	r24, 0x03	; 3
 408:	80 83       	st	Z, r24
 40a:	8d b3       	in	r24, 0x1d	; 29
 40c:	81 68       	ori	r24, 0x81	; 129
 40e:	8d bb       	out	0x1d, r24	; 29
 410:	ec e6       	ldi	r30, 0x6C	; 108
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	80 68       	ori	r24, 0x80	; 128
 418:	80 83       	st	Z, r24
 41a:	ef e6       	ldi	r30, 0x6F	; 111
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	82 60       	ori	r24, 0x02	; 2
 422:	80 83       	st	Z, r24
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	15 c0       	rjmp	.+42     	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 42a:	ac 01       	movw	r20, r24
 42c:	4f 5f       	subi	r20, 0xFF	; 255
 42e:	5f 4f       	sbci	r21, 0xFF	; 255
 430:	6d e6       	ldi	r22, 0x6D	; 109
 432:	64 9f       	mul	r22, r20
 434:	90 01       	movw	r18, r0
 436:	65 9f       	mul	r22, r21
 438:	30 0d       	add	r19, r0
 43a:	11 24       	eor	r1, r1
 43c:	24 55       	subi	r18, 0x54	; 84
 43e:	3e 4f       	sbci	r19, 0xFE	; 254
 440:	68 9f       	mul	r22, r24
 442:	f0 01       	movw	r30, r0
 444:	69 9f       	mul	r22, r25
 446:	f0 0d       	add	r31, r0
 448:	11 24       	eor	r1, r1
 44a:	e4 55       	subi	r30, 0x54	; 84
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	35 83       	std	Z+5, r19	; 0x05
 450:	24 83       	std	Z+4, r18	; 0x04
 452:	ca 01       	movw	r24, r20
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	91 05       	cpc	r25, r1
 458:	44 f3       	brlt	.-48     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 45a:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <threads+0x14c>
 45e:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <threads+0x14b>
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <initialized+0x1>
 46a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <initialized>
 46e:	78 94       	sei
 470:	08 95       	ret

00000472 <enqueue>:
 472:	fb 01       	movw	r30, r22
 474:	20 81       	ld	r18, Z
 476:	31 81       	ldd	r19, Z+1	; 0x01
 478:	91 83       	std	Z+1, r25	; 0x01
 47a:	80 83       	st	Z, r24
 47c:	fc 01       	movw	r30, r24
 47e:	35 83       	std	Z+5, r19	; 0x05
 480:	24 83       	std	Z+4, r18	; 0x04
 482:	08 95       	ret

00000484 <dequeue>:
 484:	dc 01       	movw	r26, r24
 486:	ed 91       	ld	r30, X+
 488:	fc 91       	ld	r31, X
 48a:	11 97       	sbiw	r26, 0x01	; 1
 48c:	30 97       	sbiw	r30, 0x00	; 0
 48e:	09 f4       	brne	.+2      	; 0x492 <dequeue+0xe>
 490:	ff cf       	rjmp	.-2      	; 0x490 <dequeue+0xc>
 492:	24 81       	ldd	r18, Z+4	; 0x04
 494:	35 81       	ldd	r19, Z+5	; 0x05
 496:	2d 93       	st	X+, r18
 498:	3c 93       	st	X, r19
 49a:	cf 01       	movw	r24, r30
 49c:	08 95       	ret

0000049e <dispatch>:
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <dispatch+0x6>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 4b0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 4b4:	06 96       	adiw	r24, 0x06	; 6
 4b6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setjmp>
 4ba:	89 2b       	or	r24, r25
 4bc:	59 f4       	brne	.+22     	; 0x4d4 <dispatch+0x36>
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	9a 81       	ldd	r25, Y+2	; 0x02
 4c2:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <current+0x1>
 4c6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <current>
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	06 96       	adiw	r24, 0x06	; 6
 4d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <longjmp>
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <spawn>:
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	00 d0       	rcall	.+0      	; 0x4ec <spawn+0xe>
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	7c 01       	movw	r14, r24
 4f2:	8b 01       	movw	r16, r22
 4f4:	f8 94       	cli
 4f6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <initialized>
 4fa:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <initialized+0x1>
 4fe:	89 2b       	or	r24, r25
 500:	11 f4       	brne	.+4      	; 0x506 <__stack+0x7>
 502:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <initialize>
 506:	6c e3       	ldi	r22, 0x3C	; 60
 508:	71 e0       	ldi	r23, 0x01	; 1
 50a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 50e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 512:	0e 94 39 02 	call	0x472	; 0x472 <enqueue>
 516:	8c e2       	ldi	r24, 0x2C	; 44
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 42 02 	call	0x484	; 0x484 <dequeue>
 51e:	9a 83       	std	Y+2, r25	; 0x02
 520:	89 83       	std	Y+1, r24	; 0x01
 522:	fc 01       	movw	r30, r24
 524:	f1 82       	std	Z+1, r15	; 0x01
 526:	e0 82       	st	Z, r14
 528:	13 83       	std	Z+3, r17	; 0x03
 52a:	02 83       	std	Z+2, r16	; 0x02
 52c:	15 82       	std	Z+5, r1	; 0x05
 52e:	14 82       	std	Z+4, r1	; 0x04
 530:	06 96       	adiw	r24, 0x06	; 6
 532:	0e 94 59 03 	call	0x6b2	; 0x6b2 <setjmp>
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	e1 f4       	brne	.+56     	; 0x572 <__stack+0x73>
 53a:	78 94       	sei
 53c:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <current>
 540:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <current+0x1>
 544:	ed 91       	ld	r30, X+
 546:	fc 91       	ld	r31, X
 548:	11 97       	sbiw	r26, 0x01	; 1
 54a:	12 96       	adiw	r26, 0x02	; 2
 54c:	8d 91       	ld	r24, X+
 54e:	9c 91       	ld	r25, X
 550:	13 97       	sbiw	r26, 0x03	; 3
 552:	09 95       	icall
 554:	f8 94       	cli
 556:	6c e2       	ldi	r22, 0x2C	; 44
 558:	71 e0       	ldi	r23, 0x01	; 1
 55a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 55e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 562:	0e 94 39 02 	call	0x472	; 0x472 <enqueue>
 566:	8c e3       	ldi	r24, 0x3C	; 60
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 42 02 	call	0x484	; 0x484 <dequeue>
 56e:	0e 94 4f 02 	call	0x49e	; 0x49e <dispatch>
 572:	e9 81       	ldd	r30, Y+1	; 0x01
 574:	fa 81       	ldd	r31, Y+2	; 0x02
 576:	36 96       	adiw	r30, 0x06	; 6
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	9a 81       	ldd	r25, Y+2	; 0x02
 57c:	87 59       	subi	r24, 0x97	; 151
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	91 8b       	std	Z+17, r25	; 0x11
 582:	80 8b       	std	Z+16, r24	; 0x10
 584:	e9 81       	ldd	r30, Y+1	; 0x01
 586:	fa 81       	ldd	r31, Y+2	; 0x02
 588:	91 8f       	std	Z+25, r25	; 0x19
 58a:	80 8f       	std	Z+24, r24	; 0x18
 58c:	78 94       	sei
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	9a 81       	ldd	r25, Y+2	; 0x02
 592:	0e 94 4f 02 	call	0x49e	; 0x49e <dispatch>
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	ef 90       	pop	r14
 5a6:	08 95       	ret

000005a8 <lock>:
}

void lock(mutex *m) {
	DISABLE();
 5a8:	f8 94       	cli
	if(m->locked==0){
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 81       	ld	r18, Z
 5ae:	31 81       	ldd	r19, Z+1	; 0x01
 5b0:	23 2b       	or	r18, r19
 5b2:	29 f4       	brne	.+10     	; 0x5be <lock+0x16>
		// Mutex is free, just lock and return
		m->locked = 1;
 5b4:	21 e0       	ldi	r18, 0x01	; 1
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	31 83       	std	Z+1, r19	; 0x01
 5ba:	20 83       	st	Z, r18
 5bc:	0f c0       	rjmp	.+30     	; 0x5dc <lock+0x34>
	}
	else{
		// Mutex is not free, wait until it is free
		enqueue(current,&(m->waitQ));
 5be:	bc 01       	movw	r22, r24
 5c0:	6e 5f       	subi	r22, 0xFE	; 254
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 5c8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 5cc:	0e 94 39 02 	call	0x472	; 0x472 <enqueue>
		dispatch(dequeue(&readyQ));
 5d0:	8c e3       	ldi	r24, 0x3C	; 60
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 42 02 	call	0x484	; 0x484 <dequeue>
 5d8:	0e 94 4f 02 	call	0x49e	; 0x49e <dispatch>
	}	
	ENABLE();
 5dc:	78 94       	sei
 5de:	08 95       	ret

000005e0 <unlock>:
}

void unlock(mutex *m) {
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
	DISABLE();
 5e4:	f8 94       	cli
	if(m->locked!=0){
 5e6:	fc 01       	movw	r30, r24
 5e8:	20 81       	ld	r18, Z
 5ea:	31 81       	ldd	r19, Z+1	; 0x01
 5ec:	23 2b       	or	r18, r19
 5ee:	e1 f0       	breq	.+56     	; 0x628 <unlock+0x48>
 5f0:	ec 01       	movw	r28, r24
		enqueue(current,&readyQ);
 5f2:	6c e3       	ldi	r22, 0x3C	; 60
 5f4:	71 e0       	ldi	r23, 0x01	; 1
 5f6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 5fa:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 5fe:	0e 94 39 02 	call	0x472	; 0x472 <enqueue>
		if(m->waitQ!=NULL){
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	9b 81       	ldd	r25, Y+3	; 0x03
 606:	89 2b       	or	r24, r25
 608:	39 f0       	breq	.+14     	; 0x618 <unlock+0x38>
			dispatch(dequeue(&(m->waitQ)));
 60a:	ce 01       	movw	r24, r28
 60c:	02 96       	adiw	r24, 0x02	; 2
 60e:	0e 94 42 02 	call	0x484	; 0x484 <dequeue>
 612:	0e 94 4f 02 	call	0x49e	; 0x49e <dispatch>
 616:	08 c0       	rjmp	.+16     	; 0x628 <unlock+0x48>
		}
		else{
			m->locked = 0;
 618:	19 82       	std	Y+1, r1	; 0x01
 61a:	18 82       	st	Y, r1
			dispatch(dequeue(&readyQ));
 61c:	8c e3       	ldi	r24, 0x3C	; 60
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	0e 94 42 02 	call	0x484	; 0x484 <dequeue>
 624:	0e 94 4f 02 	call	0x49e	; 0x49e <dispatch>
		}
	}
	ENABLE();
 628:	78 94       	sei
}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <__divmodsi4>:
 630:	05 2e       	mov	r0, r21
 632:	97 fb       	bst	r25, 7
 634:	1e f4       	brtc	.+6      	; 0x63c <__divmodsi4+0xc>
 636:	00 94       	com	r0
 638:	0e 94 2f 03 	call	0x65e	; 0x65e <__negsi2>
 63c:	57 fd       	sbrc	r21, 7
 63e:	07 d0       	rcall	.+14     	; 0x64e <__divmodsi4_neg2>
 640:	0e 94 37 03 	call	0x66e	; 0x66e <__udivmodsi4>
 644:	07 fc       	sbrc	r0, 7
 646:	03 d0       	rcall	.+6      	; 0x64e <__divmodsi4_neg2>
 648:	4e f4       	brtc	.+18     	; 0x65c <__divmodsi4_exit>
 64a:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__negsi2>

0000064e <__divmodsi4_neg2>:
 64e:	50 95       	com	r21
 650:	40 95       	com	r20
 652:	30 95       	com	r19
 654:	21 95       	neg	r18
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	4f 4f       	sbci	r20, 0xFF	; 255
 65a:	5f 4f       	sbci	r21, 0xFF	; 255

0000065c <__divmodsi4_exit>:
 65c:	08 95       	ret

0000065e <__negsi2>:
 65e:	90 95       	com	r25
 660:	80 95       	com	r24
 662:	70 95       	com	r23
 664:	61 95       	neg	r22
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	08 95       	ret

0000066e <__udivmodsi4>:
 66e:	a1 e2       	ldi	r26, 0x21	; 33
 670:	1a 2e       	mov	r1, r26
 672:	aa 1b       	sub	r26, r26
 674:	bb 1b       	sub	r27, r27
 676:	fd 01       	movw	r30, r26
 678:	0d c0       	rjmp	.+26     	; 0x694 <__udivmodsi4_ep>

0000067a <__udivmodsi4_loop>:
 67a:	aa 1f       	adc	r26, r26
 67c:	bb 1f       	adc	r27, r27
 67e:	ee 1f       	adc	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	a2 17       	cp	r26, r18
 684:	b3 07       	cpc	r27, r19
 686:	e4 07       	cpc	r30, r20
 688:	f5 07       	cpc	r31, r21
 68a:	20 f0       	brcs	.+8      	; 0x694 <__udivmodsi4_ep>
 68c:	a2 1b       	sub	r26, r18
 68e:	b3 0b       	sbc	r27, r19
 690:	e4 0b       	sbc	r30, r20
 692:	f5 0b       	sbc	r31, r21

00000694 <__udivmodsi4_ep>:
 694:	66 1f       	adc	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	1a 94       	dec	r1
 69e:	69 f7       	brne	.-38     	; 0x67a <__udivmodsi4_loop>
 6a0:	60 95       	com	r22
 6a2:	70 95       	com	r23
 6a4:	80 95       	com	r24
 6a6:	90 95       	com	r25
 6a8:	9b 01       	movw	r18, r22
 6aa:	ac 01       	movw	r20, r24
 6ac:	bd 01       	movw	r22, r26
 6ae:	cf 01       	movw	r24, r30
 6b0:	08 95       	ret

000006b2 <setjmp>:
 6b2:	dc 01       	movw	r26, r24
 6b4:	2d 92       	st	X+, r2
 6b6:	3d 92       	st	X+, r3
 6b8:	4d 92       	st	X+, r4
 6ba:	5d 92       	st	X+, r5
 6bc:	6d 92       	st	X+, r6
 6be:	7d 92       	st	X+, r7
 6c0:	8d 92       	st	X+, r8
 6c2:	9d 92       	st	X+, r9
 6c4:	ad 92       	st	X+, r10
 6c6:	bd 92       	st	X+, r11
 6c8:	cd 92       	st	X+, r12
 6ca:	dd 92       	st	X+, r13
 6cc:	ed 92       	st	X+, r14
 6ce:	fd 92       	st	X+, r15
 6d0:	0d 93       	st	X+, r16
 6d2:	1d 93       	st	X+, r17
 6d4:	cd 93       	st	X+, r28
 6d6:	dd 93       	st	X+, r29
 6d8:	ff 91       	pop	r31
 6da:	ef 91       	pop	r30
 6dc:	8d b7       	in	r24, 0x3d	; 61
 6de:	8d 93       	st	X+, r24
 6e0:	8e b7       	in	r24, 0x3e	; 62
 6e2:	8d 93       	st	X+, r24
 6e4:	8f b7       	in	r24, 0x3f	; 63
 6e6:	8d 93       	st	X+, r24
 6e8:	ed 93       	st	X+, r30
 6ea:	fd 93       	st	X+, r31
 6ec:	88 27       	eor	r24, r24
 6ee:	99 27       	eor	r25, r25
 6f0:	09 94       	ijmp

000006f2 <longjmp>:
 6f2:	dc 01       	movw	r26, r24
 6f4:	cb 01       	movw	r24, r22
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	91 05       	cpc	r25, r1
 6fa:	81 1d       	adc	r24, r1
 6fc:	2d 90       	ld	r2, X+
 6fe:	3d 90       	ld	r3, X+
 700:	4d 90       	ld	r4, X+
 702:	5d 90       	ld	r5, X+
 704:	6d 90       	ld	r6, X+
 706:	7d 90       	ld	r7, X+
 708:	8d 90       	ld	r8, X+
 70a:	9d 90       	ld	r9, X+
 70c:	ad 90       	ld	r10, X+
 70e:	bd 90       	ld	r11, X+
 710:	cd 90       	ld	r12, X+
 712:	dd 90       	ld	r13, X+
 714:	ed 90       	ld	r14, X+
 716:	fd 90       	ld	r15, X+
 718:	0d 91       	ld	r16, X+
 71a:	1d 91       	ld	r17, X+
 71c:	cd 91       	ld	r28, X+
 71e:	dd 91       	ld	r29, X+
 720:	ed 91       	ld	r30, X+
 722:	fd 91       	ld	r31, X+
 724:	0d 90       	ld	r0, X+
 726:	f8 94       	cli
 728:	fe bf       	out	0x3e, r31	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	ed bf       	out	0x3d, r30	; 61
 72e:	ed 91       	ld	r30, X+
 730:	fd 91       	ld	r31, X+
 732:	09 94       	ijmp

00000734 <_exit>:
 734:	f8 94       	cli

00000736 <__stop_program>:
 736:	ff cf       	rjmp	.-2      	; 0x736 <__stop_program>
