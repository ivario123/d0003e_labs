
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000080e  000008a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000080e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  0080012c  0080012c  000008ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c2  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db0  00000000  00000000  00002362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bba  00000000  00000000  00003112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000686  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100c  00000000  00000000  000047ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000057c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 20 03 	jmp	0x640	; 0x640 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e0       	ldi	r30, 0x0E	; 14
  70:	f8 e0       	ldi	r31, 0x08	; 8
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ac 32       	cpi	r26, 0x2C	; 44
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ac e2       	ldi	r26, 0x2C	; 44
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 35       	cpi	r26, 0x53	; 83
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  92:	0c 94 05 04 	jmp	0x80a	; 0x80a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
			ch++;
		}
		else
			write_char(' ',i);	
	}
}
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
  b6:	e5 ee       	ldi	r30, 0xE5	; 229
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e6 ee       	ldi	r30, 0xE6	; 230
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 78       	andi	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	e7 ee       	ldi	r30, 0xE7	; 231
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <write_char>:
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	c0 f5       	brcc	.+112    	; 0x16e <write_char+0x7a>
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	fb 01       	movw	r30, r22
 104:	e4 51       	subi	r30, 0x14	; 20
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	90 ed       	ldi	r25, 0xD0	; 208
 10a:	98 0f       	add	r25, r24
 10c:	9a 30       	cpi	r25, 0x0A	; 10
 10e:	60 f4       	brcc	.+24     	; 0x128 <write_char+0x34>
 110:	a8 2f       	mov	r26, r24
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	d0 97       	sbiw	r26, 0x30	; 48
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	4d 91       	ld	r20, X+
 124:	5c 91       	ld	r21, X
 126:	02 c0       	rjmp	.+4      	; 0x12c <write_char+0x38>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	1b c0       	rjmp	.+54     	; 0x168 <write_char+0x74>
 132:	94 2f       	mov	r25, r20
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	c0 fd       	sbrc	r28, 0
 144:	05 c0       	rjmp	.+10     	; 0x150 <write_char+0x5c>
 146:	80 81       	ld	r24, Z
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <write_char+0x6e>
 150:	80 81       	ld	r24, Z
 152:	68 2f       	mov	r22, r24
 154:	6f 70       	andi	r22, 0x0F	; 15
 156:	70 e1       	ldi	r23, 0x10	; 16
 158:	97 9f       	mul	r25, r23
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	86 2b       	or	r24, r22
 160:	80 83       	st	Z, r24
 162:	35 96       	adiw	r30, 0x05	; 5
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 30       	cpi	r18, 0x04	; 4
 16a:	31 05       	cpc	r19, r1
 16c:	14 f3       	brlt	.-60     	; 0x132 <write_char+0x3e>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <write_long>:



void write_long(long num){
 172:	cf 92       	push	r12
 174:	df 92       	push	r13
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <write_long+0x12>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	6b 01       	movw	r12, r22
 18a:	7c 01       	movw	r14, r24
	int pos = 5;
	if(num == 0){
 18c:	67 2b       	or	r22, r23
 18e:	68 2b       	or	r22, r24
 190:	69 2b       	or	r22, r25
 192:	51 f5       	brne	.+84     	; 0x1e8 <write_long+0x76>
		write_char(48,5);
 194:	65 e0       	ldi	r22, 0x05	; 5
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	80 e3       	ldi	r24, 0x30	; 48
 19a:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
		for(int i = 0; i <=4; i++){
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	06 c0       	rjmp	.+12     	; 0x1b0 <write_long+0x3e>
			write_char(0,i);
 1a4:	b8 01       	movw	r22, r16
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>

void write_long(long num){
	int pos = 5;
	if(num == 0){
		write_char(48,5);
		for(int i = 0; i <=4; i++){
 1ac:	0f 5f       	subi	r16, 0xFF	; 255
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
 1b0:	05 30       	cpi	r16, 0x05	; 5
 1b2:	11 05       	cpc	r17, r1
 1b4:	bc f3       	brlt	.-18     	; 0x1a4 <write_long+0x32>
 1b6:	2a c0       	rjmp	.+84     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		return;
	}
	while(num && pos >= 0){
		char buffer[2];
		int temp_num = num-(num/10)*10;
		num = num/10;
 1b8:	c7 01       	movw	r24, r14
 1ba:	b6 01       	movw	r22, r12
 1bc:	2a e0       	ldi	r18, 0x0A	; 10
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	0e 94 6f 03 	call	0x6de	; 0x6de <__divmodsi4>
 1c8:	69 01       	movw	r12, r18
 1ca:	7a 01       	movw	r14, r20
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
		int_to_str(temp_num,&buffer);
 1d0:	be 01       	movw	r22, r28
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <int_to_str>
		write_char(buffer[0],pos);
 1da:	b8 01       	movw	r22, r16
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
		pos--;
 1e2:	01 50       	subi	r16, 0x01	; 1
 1e4:	11 09       	sbc	r17, r1
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <write_long+0x7a>
 1e8:	05 e0       	ldi	r16, 0x05	; 5
 1ea:	10 e0       	ldi	r17, 0x00	; 0
		for(int i = 0; i <=4; i++){
			write_char(0,i);
		}
		return;
	}
	while(num && pos >= 0){
 1ec:	c1 14       	cp	r12, r1
 1ee:	d1 04       	cpc	r13, r1
 1f0:	e1 04       	cpc	r14, r1
 1f2:	f1 04       	cpc	r15, r1
 1f4:	49 f0       	breq	.+18     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1f6:	11 23       	and	r17, r17
 1f8:	fc f6       	brge	.-66     	; 0x1b8 <write_long+0x46>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		int_to_str(temp_num,&buffer);
		write_char(buffer[0],pos);
		pos--;
	}
	while(pos>=0){
		write_char(0,pos);
 1fc:	b8 01       	movw	r22, r16
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
		pos--;
 204:	01 50       	subi	r16, 0x01	; 1
 206:	11 09       	sbc	r17, r1
		num = num/10;
		int_to_str(temp_num,&buffer);
		write_char(buffer[0],pos);
		pos--;
	}
	while(pos>=0){
 208:	11 23       	and	r17, r17
 20a:	c4 f7       	brge	.-16     	; 0x1fc <write_long+0x8a>
		write_char(0,pos);
		pos--;
	}
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	08 95       	ret

00000222 <swap_segment>:
		swap_segment();
	}
}
void swap_segment(void){
	
	LCDDR13 = LCDDR13^1;
 222:	e9 ef       	ldi	r30, 0xF9	; 249
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	90 81       	ld	r25, Z
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	98 27       	eor	r25, r24
 22c:	90 83       	st	Z, r25
	LCDDR18 = LCDDR18^1;
 22e:	ee ef       	ldi	r30, 0xFE	; 254
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	90 81       	ld	r25, Z
 234:	89 27       	eor	r24, r25
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <button>:
/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/
void button(void){
	while(1){
		while(1==(PINB&(1<<7))>>7);
 23a:	1f 99       	sbic	0x03, 7	; 3
 23c:	fe cf       	rjmp	.-4      	; 0x23a <button>
		while(0==(PINB&(1<<7))>>7);
 23e:	1f 9b       	sbis	0x03, 7	; 3
 240:	fe cf       	rjmp	.-4      	; 0x23e <button+0x4>
		swap_segment();
 242:	0e 94 11 01 	call	0x222	; 0x222 <swap_segment>
/************************************************************************/
/*							HELPER SECTION                              */
/************************************************************************/
void button(void){
	while(1){
		while(1==(PINB&(1<<7))>>7);
 246:	f9 cf       	rjmp	.-14     	; 0x23a <button>

00000248 <is_prime>:
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
}

int is_prime(long num){
 248:	8f 92       	push	r8
 24a:	9f 92       	push	r9
 24c:	af 92       	push	r10
 24e:	bf 92       	push	r11
 250:	cf 92       	push	r12
 252:	df 92       	push	r13
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	4b 01       	movw	r8, r22
 25a:	5c 01       	movw	r10, r24
	
	if (num <= 3)
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	88 16       	cp	r8, r24
 260:	91 04       	cpc	r9, r1
 262:	a1 04       	cpc	r10, r1
 264:	b1 04       	cpc	r11, r1
 266:	0c f1       	brlt	.+66     	; 0x2aa <is_prime+0x62>
	return 1;
	
	if(num%2 == 0)
 268:	80 fe       	sbrs	r8, 0
 26a:	22 c0       	rjmp	.+68     	; 0x2b0 <is_prime+0x68>
 26c:	0f 2e       	mov	r0, r31
 26e:	f3 e0       	ldi	r31, 0x03	; 3
 270:	cf 2e       	mov	r12, r31
 272:	d1 2c       	mov	r13, r1
 274:	e1 2c       	mov	r14, r1
 276:	f1 2c       	mov	r15, r1
 278:	f0 2d       	mov	r31, r0
 27a:	0f c0       	rjmp	.+30     	; 0x29a <is_prime+0x52>
	return 0;
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
 27c:	c5 01       	movw	r24, r10
 27e:	b4 01       	movw	r22, r8
 280:	a7 01       	movw	r20, r14
 282:	96 01       	movw	r18, r12
 284:	0e 94 6f 03 	call	0x6de	; 0x6de <__divmodsi4>
 288:	67 2b       	or	r22, r23
 28a:	68 2b       	or	r22, r24
 28c:	69 2b       	or	r22, r25
 28e:	99 f0       	breq	.+38     	; 0x2b6 <is_prime+0x6e>
		return 0;
		counter++;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	c8 1a       	sub	r12, r24
 294:	d8 0a       	sbc	r13, r24
 296:	e8 0a       	sbc	r14, r24
 298:	f8 0a       	sbc	r15, r24
	if(num%2 == 0)
	return 0;
	
	long counter = 3;
	
	while(counter <num){
 29a:	c8 14       	cp	r12, r8
 29c:	d9 04       	cpc	r13, r9
 29e:	ea 04       	cpc	r14, r10
 2a0:	fb 04       	cpc	r15, r11
 2a2:	64 f3       	brlt	.-40     	; 0x27c <is_prime+0x34>
		if(num%counter == 0)
		return 0;
		counter++;
	}
	return 1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <is_prime+0x72>
}

int is_prime(long num){
	
	if (num <= 3)
	return 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <is_prime+0x72>
	
	if(num%2 == 0)
	return 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <is_prime+0x72>
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
		return 0;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
		counter++;
	}
	return 1;
}
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	08 95       	ret

000002cc <toggle_led>:

void toggle_led(void){
	LCDDR8= LCDDR8^1;
 2cc:	e4 ef       	ldi	r30, 0xF4	; 244
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	90 81       	ld	r25, Z
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	89 27       	eor	r24, r25
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <blink>:
}
void blink(void){
	uint16_t freq = 31250/2;
	uint16_t last_time = TCNT1;
 2da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
	while(1){
		while(get_timer_int_counter()< 10);
 2e2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <get_timer_int_counter>
 2e6:	0a 97       	sbiw	r24, 0x0a	; 10
 2e8:	e4 f3       	brlt	.-8      	; 0x2e2 <blink+0x8>
		last_time =(uint16_t)TCNT1;
 2ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
		toggle_led();
 2f2:	0e 94 66 01 	call	0x2cc	; 0x2cc <toggle_led>
		reset_timer_int_counter();
 2f6:	0e 94 56 03 	call	0x6ac	; 0x6ac <reset_timer_int_counter>
	}
 2fa:	f3 cf       	rjmp	.-26     	; 0x2e2 <blink+0x8>

000002fc <next_prime>:
            printAt(n, pos);
			//yield();
        }
    }
}
void next_prime(long *num){
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
	while(1)
	{
		*num+=1;
 302:	88 81       	ld	r24, Y
 304:	99 81       	ldd	r25, Y+1	; 0x01
 306:	aa 81       	ldd	r26, Y+2	; 0x02
 308:	bb 81       	ldd	r27, Y+3	; 0x03
 30a:	bc 01       	movw	r22, r24
 30c:	cd 01       	movw	r24, r26
 30e:	6f 5f       	subi	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	8f 4f       	sbci	r24, 0xFF	; 255
 314:	9f 4f       	sbci	r25, 0xFF	; 255
 316:	68 83       	st	Y, r22
 318:	79 83       	std	Y+1, r23	; 0x01
 31a:	8a 83       	std	Y+2, r24	; 0x02
 31c:	9b 83       	std	Y+3, r25	; 0x03
		if(is_prime(*num)==1){
 31e:	0e 94 24 01 	call	0x248	; 0x248 <is_prime>
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	71 f7       	brne	.-36     	; 0x302 <next_prime+0x6>
			return;
		}
	}
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <primes>:
void primes(void){
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <primes+0x6>
 332:	00 d0       	rcall	.+0      	; 0x334 <primes+0x8>
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	long num = 0;			
 338:	19 82       	std	Y+1, r1	; 0x01
 33a:	1a 82       	std	Y+2, r1	; 0x02
 33c:	1b 82       	std	Y+3, r1	; 0x03
 33e:	1c 82       	std	Y+4, r1	; 0x04
	while(1){
		next_prime(&num);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 7e 01 	call	0x2fc	; 0x2fc <next_prime>
		write_long(num);
 348:	69 81       	ldd	r22, Y+1	; 0x01
 34a:	7a 81       	ldd	r23, Y+2	; 0x02
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	9c 81       	ldd	r25, Y+4	; 0x04
 350:	0e 94 b9 00 	call	0x172	; 0x172 <write_long>
 354:	f5 cf       	rjmp	.-22     	; 0x340 <primes+0x14>

00000356 <main>:
	}
}


int main() {
	LCDDR13 = LCDDR13|1;	
 356:	e9 ef       	ldi	r30, 0xF9	; 249
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	80 83       	st	Z, r24
	
	init_lcd();
 360:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
    spawn(blink,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	8d e6       	ldi	r24, 0x6D	; 109
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 8c 02 	call	0x518	; 0x518 <spawn>
	spawn(button,0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	8d e1       	ldi	r24, 0x1D	; 29
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 8c 02 	call	0x518	; 0x518 <spawn>
    primes();
 37c:	0e 94 96 01 	call	0x32c	; 0x32c <primes>

00000380 <revese>:
}

void six_least_significant(long num,int *ret){
	// Plucks out the six least significant 
	*ret = (int)(num-(num/1000000)*1000000);
}
 380:	dc 01       	movw	r26, r24
 382:	fc 01       	movw	r30, r24
 384:	01 c0       	rjmp	.+2      	; 0x388 <revese+0x8>
 386:	31 96       	adiw	r30, 0x01	; 1
 388:	80 81       	ld	r24, Z
 38a:	81 11       	cpse	r24, r1
 38c:	fc cf       	rjmp	.-8      	; 0x386 <revese+0x6>
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	05 c0       	rjmp	.+10     	; 0x39c <revese+0x1c>
 392:	80 81       	ld	r24, Z
 394:	9c 91       	ld	r25, X
 396:	90 83       	st	Z, r25
 398:	8d 93       	st	X+, r24
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	ea 17       	cp	r30, r26
 39e:	fb 07       	cpc	r31, r27
 3a0:	c0 f7       	brcc	.-16     	; 0x392 <revese+0x12>
 3a2:	08 95       	ret

000003a4 <int_to_str>:
void int_to_str(int num,char* buffer){
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	eb 01       	movw	r28, r22
	// Base case
	if (num == 0){
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	a1 f4       	brne	.+40     	; 0x3d6 <int_to_str+0x32>
		*buffer = 48;
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	88 83       	st	Y, r24
		*(++buffer) = '\0';
 3b2:	19 82       	std	Y+1, r1	; 0x01
		return;
 3b4:	17 c0       	rjmp	.+46     	; 0x3e4 <int_to_str+0x40>
	char * start = buffer;
	// Loop until num == 0
	while (num)
	{
		// Pluck out the least significant digit and convert it to a char
		*buffer = (volatile char) num-(num/10)*10+48;
 3b6:	28 2f       	mov	r18, r24
 3b8:	6a e0       	ldi	r22, 0x0A	; 10
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodhi4>
 3c0:	86 2f       	mov	r24, r22
 3c2:	97 2f       	mov	r25, r23
 3c4:	66 0f       	add	r22, r22
 3c6:	36 2f       	mov	r19, r22
 3c8:	33 0f       	add	r19, r19
 3ca:	33 0f       	add	r19, r19
 3cc:	63 0f       	add	r22, r19
 3ce:	26 1b       	sub	r18, r22
 3d0:	20 5d       	subi	r18, 0xD0	; 208
 3d2:	21 93       	st	Z+, r18
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <int_to_str+0x34>
 3d6:	fb 01       	movw	r30, r22
		return;
	}
	// Track start of string
	char * start = buffer;
	// Loop until num == 0
	while (num)
 3d8:	00 97       	sbiw	r24, 0x00	; 0
 3da:	69 f7       	brne	.-38     	; 0x3b6 <int_to_str+0x12>
		// remove the least significant digit
		num/=10;
		buffer++;
	}
	// Terminate string
	*buffer = '\0';
 3dc:	10 82       	st	Z, r1
	// Reverse the string to make it readable
	revese(start);
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 c0 01 	call	0x380	; 0x380 <revese>
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <initialize>:
			m->locked = 0;
			dispatch(dequeue(&readyQ));
		}
	}
	ENABLE();
}
 3ea:	e1 e6       	ldi	r30, 0x61	; 97
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
 3f2:	10 82       	st	Z, r1
 3f4:	e1 e8       	ldi	r30, 0x81	; 129
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	85 60       	ori	r24, 0x05	; 5
 3fc:	80 83       	st	Z, r24
 3fe:	85 b1       	in	r24, 0x05	; 5
 400:	80 68       	ori	r24, 0x80	; 128
 402:	85 b9       	out	0x05, r24	; 5
 404:	84 b7       	in	r24, 0x34	; 52
 406:	80 68       	ori	r24, 0x80	; 128
 408:	84 bf       	out	0x34, r24	; 52
 40a:	e9 e6       	ldi	r30, 0x69	; 105
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	83 60       	ori	r24, 0x03	; 3
 412:	80 83       	st	Z, r24
 414:	8d b3       	in	r24, 0x1d	; 29
 416:	81 68       	ori	r24, 0x81	; 129
 418:	8d bb       	out	0x1d, r24	; 29
 41a:	ec e6       	ldi	r30, 0x6C	; 108
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	80 68       	ori	r24, 0x80	; 128
 422:	80 83       	st	Z, r24
 424:	ef e6       	ldi	r30, 0x6F	; 111
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	82 60       	ori	r24, 0x02	; 2
 42c:	80 83       	st	Z, r24
 42e:	87 e8       	ldi	r24, 0x87	; 135
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 436:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	15 c0       	rjmp	.+42     	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
 440:	ac 01       	movw	r20, r24
 442:	4f 5f       	subi	r20, 0xFF	; 255
 444:	5f 4f       	sbci	r21, 0xFF	; 255
 446:	6d e6       	ldi	r22, 0x6D	; 109
 448:	64 9f       	mul	r22, r20
 44a:	90 01       	movw	r18, r0
 44c:	65 9f       	mul	r22, r21
 44e:	30 0d       	add	r19, r0
 450:	11 24       	eor	r1, r1
 452:	21 56       	subi	r18, 0x61	; 97
 454:	3e 4f       	sbci	r19, 0xFE	; 254
 456:	68 9f       	mul	r22, r24
 458:	f0 01       	movw	r30, r0
 45a:	69 9f       	mul	r22, r25
 45c:	f0 0d       	add	r31, r0
 45e:	11 24       	eor	r1, r1
 460:	e1 56       	subi	r30, 0x61	; 97
 462:	fe 4f       	sbci	r31, 0xFE	; 254
 464:	35 83       	std	Z+5, r19	; 0x05
 466:	24 83       	std	Z+4, r18	; 0x04
 468:	ca 01       	movw	r24, r20
 46a:	83 30       	cpi	r24, 0x03	; 3
 46c:	91 05       	cpc	r25, r1
 46e:	44 f3       	brlt	.-48     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 470:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <threads+0x14c>
 474:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <threads+0x14b>
 478:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 47c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 488:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 48c:	78 94       	sei
 48e:	08 95       	ret

00000490 <enqueue>:
 490:	dc 01       	movw	r26, r24
 492:	15 96       	adiw	r26, 0x05	; 5
 494:	1c 92       	st	X, r1
 496:	1e 92       	st	-X, r1
 498:	14 97       	sbiw	r26, 0x04	; 4
 49a:	db 01       	movw	r26, r22
 49c:	ed 91       	ld	r30, X+
 49e:	fc 91       	ld	r31, X
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	30 97       	sbiw	r30, 0x00	; 0
 4a4:	21 f4       	brne	.+8      	; 0x4ae <enqueue+0x1e>
 4a6:	8d 93       	st	X+, r24
 4a8:	9c 93       	st	X, r25
 4aa:	08 95       	ret
 4ac:	f9 01       	movw	r30, r18
 4ae:	24 81       	ldd	r18, Z+4	; 0x04
 4b0:	35 81       	ldd	r19, Z+5	; 0x05
 4b2:	21 15       	cp	r18, r1
 4b4:	31 05       	cpc	r19, r1
 4b6:	d1 f7       	brne	.-12     	; 0x4ac <enqueue+0x1c>
 4b8:	95 83       	std	Z+5, r25	; 0x05
 4ba:	84 83       	std	Z+4, r24	; 0x04
 4bc:	08 95       	ret

000004be <dequeue>:
 4be:	dc 01       	movw	r26, r24
 4c0:	ed 91       	ld	r30, X+
 4c2:	fc 91       	ld	r31, X
 4c4:	11 97       	sbiw	r26, 0x01	; 1
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	09 f4       	brne	.+2      	; 0x4cc <dequeue+0xe>
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <dequeue+0xc>
 4cc:	24 81       	ldd	r18, Z+4	; 0x04
 4ce:	35 81       	ldd	r19, Z+5	; 0x05
 4d0:	2d 93       	st	X+, r18
 4d2:	3c 93       	st	X, r19
 4d4:	cf 01       	movw	r24, r30
 4d6:	08 95       	ret

000004d8 <dispatch>:
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	00 d0       	rcall	.+0      	; 0x4de <dispatch+0x6>
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	9a 83       	std	Y+2, r25	; 0x02
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 4ea:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 4ee:	06 96       	adiw	r24, 0x06	; 6
 4f0:	0e 94 c4 03 	call	0x788	; 0x788 <setjmp>
 4f4:	89 2b       	or	r24, r25
 4f6:	59 f4       	brne	.+22     	; 0x50e <__stack+0xf>
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	9a 81       	ldd	r25, Y+2	; 0x02
 4fc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
 500:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	06 96       	adiw	r24, 0x06	; 6
 50a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <longjmp>
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <spawn>:
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	00 d0       	rcall	.+0      	; 0x526 <spawn+0xe>
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	7c 01       	movw	r14, r24
 52c:	8b 01       	movw	r16, r22
 52e:	f8 94       	cli
 530:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 534:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 538:	89 2b       	or	r24, r25
 53a:	11 f4       	brne	.+4      	; 0x540 <spawn+0x28>
 53c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <initialize>
 540:	8a e2       	ldi	r24, 0x2A	; 42
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 5f 02 	call	0x4be	; 0x4be <dequeue>
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	fc 01       	movw	r30, r24
 54e:	f1 82       	std	Z+1, r15	; 0x01
 550:	e0 82       	st	Z, r14
 552:	13 83       	std	Z+3, r17	; 0x03
 554:	02 83       	std	Z+2, r16	; 0x02
 556:	15 82       	std	Z+5, r1	; 0x05
 558:	14 82       	std	Z+4, r1	; 0x04
 55a:	06 96       	adiw	r24, 0x06	; 6
 55c:	0e 94 c4 03 	call	0x788	; 0x788 <setjmp>
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	e1 f4       	brne	.+56     	; 0x59c <spawn+0x84>
 564:	78 94       	sei
 566:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <current>
 56a:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <current+0x1>
 56e:	ed 91       	ld	r30, X+
 570:	fc 91       	ld	r31, X
 572:	11 97       	sbiw	r26, 0x01	; 1
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	8d 91       	ld	r24, X+
 578:	9c 91       	ld	r25, X
 57a:	13 97       	sbiw	r26, 0x03	; 3
 57c:	09 95       	icall
 57e:	f8 94       	cli
 580:	6a e2       	ldi	r22, 0x2A	; 42
 582:	71 e0       	ldi	r23, 0x01	; 1
 584:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 588:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 58c:	0e 94 48 02 	call	0x490	; 0x490 <enqueue>
 590:	8e e2       	ldi	r24, 0x2E	; 46
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 5f 02 	call	0x4be	; 0x4be <dequeue>
 598:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <dispatch>
 59c:	e9 81       	ldd	r30, Y+1	; 0x01
 59e:	fa 81       	ldd	r31, Y+2	; 0x02
 5a0:	36 96       	adiw	r30, 0x06	; 6
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	9a 81       	ldd	r25, Y+2	; 0x02
 5a6:	87 59       	subi	r24, 0x97	; 151
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	91 8b       	std	Z+17, r25	; 0x11
 5ac:	80 8b       	std	Z+16, r24	; 0x10
 5ae:	e9 81       	ldd	r30, Y+1	; 0x01
 5b0:	fa 81       	ldd	r31, Y+2	; 0x02
 5b2:	91 8f       	std	Z+25, r25	; 0x19
 5b4:	80 8f       	std	Z+24, r24	; 0x18
 5b6:	6e e2       	ldi	r22, 0x2E	; 46
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	cf 01       	movw	r24, r30
 5bc:	0e 94 48 02 	call	0x490	; 0x490 <enqueue>
 5c0:	78 94       	sei
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	ff 90       	pop	r15
 5d0:	ef 90       	pop	r14
 5d2:	08 95       	ret

000005d4 <yield>:
 5d4:	f8 94       	cli
 5d6:	6e e2       	ldi	r22, 0x2E	; 46
 5d8:	71 e0       	ldi	r23, 0x01	; 1
 5da:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 5de:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 5e2:	0e 94 48 02 	call	0x490	; 0x490 <enqueue>
 5e6:	8e e2       	ldi	r24, 0x2E	; 46
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 5f 02 	call	0x4be	; 0x4be <dequeue>
 5ee:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <dispatch>
 5f2:	78 94       	sei
 5f4:	08 95       	ret

000005f6 <__vector_3>:
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
 618:	1f 9b       	sbis	0x03, 7	; 3
 61a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <yield>
 61e:	ff 91       	pop	r31
 620:	ef 91       	pop	r30
 622:	bf 91       	pop	r27
 624:	af 91       	pop	r26
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	7f 91       	pop	r23
 62c:	6f 91       	pop	r22
 62e:	5f 91       	pop	r21
 630:	4f 91       	pop	r20
 632:	3f 91       	pop	r19
 634:	2f 91       	pop	r18
 636:	0f 90       	pop	r0
 638:	0f be       	out	0x3f, r0	; 63
 63a:	0f 90       	pop	r0
 63c:	1f 90       	pop	r1
 63e:	18 95       	reti

00000640 <__vector_7>:
 640:	1f 92       	push	r1
 642:	0f 92       	push	r0
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	0f 92       	push	r0
 648:	11 24       	eor	r1, r1
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
 662:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer_int_counter>
 666:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer_int_counter+0x1>
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <timer_int_counter+0x1>
 670:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <timer_int_counter>
 674:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 678:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 67c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <yield>
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <get_timer_int_counter>:

uint16_t get_timer_int_counter(){
	return timer_int_counter;
}
 6a2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <timer_int_counter>
 6a6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <timer_int_counter+0x1>
 6aa:	08 95       	ret

000006ac <reset_timer_int_counter>:
void reset_timer_int_counter(){
	timer_int_counter = 0;
 6ac:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <timer_int_counter+0x1>
 6b0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <timer_int_counter>
 6b4:	08 95       	ret

000006b6 <__divmodhi4>:
 6b6:	97 fb       	bst	r25, 7
 6b8:	07 2e       	mov	r0, r23
 6ba:	16 f4       	brtc	.+4      	; 0x6c0 <__divmodhi4+0xa>
 6bc:	00 94       	com	r0
 6be:	07 d0       	rcall	.+14     	; 0x6ce <__divmodhi4_neg1>
 6c0:	77 fd       	sbrc	r23, 7
 6c2:	09 d0       	rcall	.+18     	; 0x6d6 <__divmodhi4_neg2>
 6c4:	0e 94 8e 03 	call	0x71c	; 0x71c <__udivmodhi4>
 6c8:	07 fc       	sbrc	r0, 7
 6ca:	05 d0       	rcall	.+10     	; 0x6d6 <__divmodhi4_neg2>
 6cc:	3e f4       	brtc	.+14     	; 0x6dc <__divmodhi4_exit>

000006ce <__divmodhi4_neg1>:
 6ce:	90 95       	com	r25
 6d0:	81 95       	neg	r24
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__divmodhi4_neg2>:
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255

000006dc <__divmodhi4_exit>:
 6dc:	08 95       	ret

000006de <__divmodsi4>:
 6de:	05 2e       	mov	r0, r21
 6e0:	97 fb       	bst	r25, 7
 6e2:	1e f4       	brtc	.+6      	; 0x6ea <__divmodsi4+0xc>
 6e4:	00 94       	com	r0
 6e6:	0e 94 86 03 	call	0x70c	; 0x70c <__negsi2>
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	07 d0       	rcall	.+14     	; 0x6fc <__divmodsi4_neg2>
 6ee:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
 6f2:	07 fc       	sbrc	r0, 7
 6f4:	03 d0       	rcall	.+6      	; 0x6fc <__divmodsi4_neg2>
 6f6:	4e f4       	brtc	.+18     	; 0x70a <__divmodsi4_exit>
 6f8:	0c 94 86 03 	jmp	0x70c	; 0x70c <__negsi2>

000006fc <__divmodsi4_neg2>:
 6fc:	50 95       	com	r21
 6fe:	40 95       	com	r20
 700:	30 95       	com	r19
 702:	21 95       	neg	r18
 704:	3f 4f       	sbci	r19, 0xFF	; 255
 706:	4f 4f       	sbci	r20, 0xFF	; 255
 708:	5f 4f       	sbci	r21, 0xFF	; 255

0000070a <__divmodsi4_exit>:
 70a:	08 95       	ret

0000070c <__negsi2>:
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	08 95       	ret

0000071c <__udivmodhi4>:
 71c:	aa 1b       	sub	r26, r26
 71e:	bb 1b       	sub	r27, r27
 720:	51 e1       	ldi	r21, 0x11	; 17
 722:	07 c0       	rjmp	.+14     	; 0x732 <__udivmodhi4_ep>

00000724 <__udivmodhi4_loop>:
 724:	aa 1f       	adc	r26, r26
 726:	bb 1f       	adc	r27, r27
 728:	a6 17       	cp	r26, r22
 72a:	b7 07       	cpc	r27, r23
 72c:	10 f0       	brcs	.+4      	; 0x732 <__udivmodhi4_ep>
 72e:	a6 1b       	sub	r26, r22
 730:	b7 0b       	sbc	r27, r23

00000732 <__udivmodhi4_ep>:
 732:	88 1f       	adc	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	5a 95       	dec	r21
 738:	a9 f7       	brne	.-22     	; 0x724 <__udivmodhi4_loop>
 73a:	80 95       	com	r24
 73c:	90 95       	com	r25
 73e:	bc 01       	movw	r22, r24
 740:	cd 01       	movw	r24, r26
 742:	08 95       	ret

00000744 <__udivmodsi4>:
 744:	a1 e2       	ldi	r26, 0x21	; 33
 746:	1a 2e       	mov	r1, r26
 748:	aa 1b       	sub	r26, r26
 74a:	bb 1b       	sub	r27, r27
 74c:	fd 01       	movw	r30, r26
 74e:	0d c0       	rjmp	.+26     	; 0x76a <__udivmodsi4_ep>

00000750 <__udivmodsi4_loop>:
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	ee 1f       	adc	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	a2 17       	cp	r26, r18
 75a:	b3 07       	cpc	r27, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	20 f0       	brcs	.+8      	; 0x76a <__udivmodsi4_ep>
 762:	a2 1b       	sub	r26, r18
 764:	b3 0b       	sbc	r27, r19
 766:	e4 0b       	sbc	r30, r20
 768:	f5 0b       	sbc	r31, r21

0000076a <__udivmodsi4_ep>:
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a 94       	dec	r1
 774:	69 f7       	brne	.-38     	; 0x750 <__udivmodsi4_loop>
 776:	60 95       	com	r22
 778:	70 95       	com	r23
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	08 95       	ret

00000788 <setjmp>:
 788:	dc 01       	movw	r26, r24
 78a:	2d 92       	st	X+, r2
 78c:	3d 92       	st	X+, r3
 78e:	4d 92       	st	X+, r4
 790:	5d 92       	st	X+, r5
 792:	6d 92       	st	X+, r6
 794:	7d 92       	st	X+, r7
 796:	8d 92       	st	X+, r8
 798:	9d 92       	st	X+, r9
 79a:	ad 92       	st	X+, r10
 79c:	bd 92       	st	X+, r11
 79e:	cd 92       	st	X+, r12
 7a0:	dd 92       	st	X+, r13
 7a2:	ed 92       	st	X+, r14
 7a4:	fd 92       	st	X+, r15
 7a6:	0d 93       	st	X+, r16
 7a8:	1d 93       	st	X+, r17
 7aa:	cd 93       	st	X+, r28
 7ac:	dd 93       	st	X+, r29
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	8d b7       	in	r24, 0x3d	; 61
 7b4:	8d 93       	st	X+, r24
 7b6:	8e b7       	in	r24, 0x3e	; 62
 7b8:	8d 93       	st	X+, r24
 7ba:	8f b7       	in	r24, 0x3f	; 63
 7bc:	8d 93       	st	X+, r24
 7be:	ed 93       	st	X+, r30
 7c0:	fd 93       	st	X+, r31
 7c2:	88 27       	eor	r24, r24
 7c4:	99 27       	eor	r25, r25
 7c6:	09 94       	ijmp

000007c8 <longjmp>:
 7c8:	dc 01       	movw	r26, r24
 7ca:	cb 01       	movw	r24, r22
 7cc:	81 30       	cpi	r24, 0x01	; 1
 7ce:	91 05       	cpc	r25, r1
 7d0:	81 1d       	adc	r24, r1
 7d2:	2d 90       	ld	r2, X+
 7d4:	3d 90       	ld	r3, X+
 7d6:	4d 90       	ld	r4, X+
 7d8:	5d 90       	ld	r5, X+
 7da:	6d 90       	ld	r6, X+
 7dc:	7d 90       	ld	r7, X+
 7de:	8d 90       	ld	r8, X+
 7e0:	9d 90       	ld	r9, X+
 7e2:	ad 90       	ld	r10, X+
 7e4:	bd 90       	ld	r11, X+
 7e6:	cd 90       	ld	r12, X+
 7e8:	dd 90       	ld	r13, X+
 7ea:	ed 90       	ld	r14, X+
 7ec:	fd 90       	ld	r15, X+
 7ee:	0d 91       	ld	r16, X+
 7f0:	1d 91       	ld	r17, X+
 7f2:	cd 91       	ld	r28, X+
 7f4:	dd 91       	ld	r29, X+
 7f6:	ed 91       	ld	r30, X+
 7f8:	fd 91       	ld	r31, X+
 7fa:	0d 90       	ld	r0, X+
 7fc:	f8 94       	cli
 7fe:	fe bf       	out	0x3e, r31	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	ed bf       	out	0x3d, r30	; 61
 804:	ed 91       	ld	r30, X+
 806:	fd 91       	ld	r31, X+
 808:	09 94       	ijmp

0000080a <_exit>:
 80a:	f8 94       	cli

0000080c <__stop_program>:
 80c:	ff cf       	rjmp	.-2      	; 0x80c <__stop_program>
