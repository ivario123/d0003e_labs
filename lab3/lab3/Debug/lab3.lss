
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000b9e  00000c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022c  0080012e  0080012e  00000c60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001066  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af8  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a34  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000635  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079b  00000000  00000000  00003d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 8b 04 	jmp	0x916	; 0x916 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee e9       	ldi	r30, 0x9E	; 158
  70:	fb e0       	ldi	r31, 0x0B	; 11
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 32       	cpi	r26, 0x2E	; 46
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ae e2       	ldi	r26, 0x2E	; 46
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	aa 35       	cpi	r26, 0x5A	; 90
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  92:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:

void swap_segment(void){
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
}
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	84 ee       	ldi	r24, 0xE4	; 228
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	24 ee       	ldi	r18, 0xE4	; 228
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	20 81       	ld	r18, Z
  ae:	20 68       	ori	r18, 0x80	; 128
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
  b4:	84 ee       	ldi	r24, 0xE4	; 228
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	24 ee       	ldi	r18, 0xE4	; 228
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	20 64       	ori	r18, 0x40	; 64
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	84 ee       	ldi	r24, 0xE4	; 228
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	24 ee       	ldi	r18, 0xE4	; 228
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	2f 7e       	andi	r18, 0xEF	; 239
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	84 ee       	ldi	r24, 0xE4	; 228
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 ee       	ldi	r18, 0xE4	; 228
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	2e 7f       	andi	r18, 0xFE	; 254
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
  ea:	85 ee       	ldi	r24, 0xE5	; 229
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 ee       	ldi	r18, 0xE5	; 229
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	20 68       	ori	r18, 0x80	; 128
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	85 ee       	ldi	r24, 0xE5	; 229
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	25 ee       	ldi	r18, 0xE5	; 229
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	20 81       	ld	r18, Z
 108:	2f 7b       	andi	r18, 0xBF	; 191
 10a:	fc 01       	movw	r30, r24
 10c:	20 83       	st	Z, r18
 10e:	85 ee       	ldi	r24, 0xE5	; 229
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	25 ee       	ldi	r18, 0xE5	; 229
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	f9 01       	movw	r30, r18
 118:	20 81       	ld	r18, Z
 11a:	20 63       	ori	r18, 0x30	; 48
 11c:	fc 01       	movw	r30, r24
 11e:	20 83       	st	Z, r18
 120:	85 ee       	ldi	r24, 0xE5	; 229
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	25 ee       	ldi	r18, 0xE5	; 229
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	27 60       	ori	r18, 0x07	; 7
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
 132:	86 ee       	ldi	r24, 0xE6	; 230
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	26 ee       	ldi	r18, 0xE6	; 230
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	2f 78       	andi	r18, 0x8F	; 143
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
 144:	86 ee       	ldi	r24, 0xE6	; 230
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	26 ee       	ldi	r18, 0xE6	; 230
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	27 60       	ori	r18, 0x07	; 7
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	27 ee       	ldi	r18, 0xE7	; 231
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	2f 71       	andi	r18, 0x1F	; 31
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
 168:	87 ee       	ldi	r24, 0xE7	; 231
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	27 ee       	ldi	r18, 0xE7	; 231
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	2f 60       	ori	r18, 0x0F	; 15
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	00 00       	nop
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <write_char>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	2a 97       	sbiw	r28, 0x0a	; 10
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	88 87       	std	Y+8, r24	; 0x08
 198:	7a 87       	std	Y+10, r23	; 0x0a
 19a:	69 87       	std	Y+9, r22	; 0x09
 19c:	89 85       	ldd	r24, Y+9	; 0x09
 19e:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a0:	99 23       	and	r25, r25
 1a2:	0c f4       	brge	.+2      	; 0x1a6 <write_char+0x24>
 1a4:	80 c0       	rjmp	.+256    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 1a6:	89 85       	ldd	r24, Y+9	; 0x09
 1a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1aa:	06 97       	sbiw	r24, 0x06	; 6
 1ac:	0c f0       	brlt	.+2      	; 0x1b0 <write_char+0x2e>
 1ae:	7b c0       	rjmp	.+246    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	19 82       	std	Y+1, r1	; 0x01
 1b4:	89 85       	ldd	r24, Y+9	; 0x09
 1b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	84 51       	subi	r24, 0x14	; 20
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	9c 83       	std	Y+4, r25	; 0x04
 1c2:	8b 83       	std	Y+3, r24	; 0x03
 1c4:	88 85       	ldd	r24, Y+8	; 0x08
 1c6:	80 33       	cpi	r24, 0x30	; 48
 1c8:	a0 f0       	brcs	.+40     	; 0x1f2 <write_char+0x70>
 1ca:	88 85       	ldd	r24, Y+8	; 0x08
 1cc:	8a 33       	cpi	r24, 0x3A	; 58
 1ce:	88 f4       	brcc	.+34     	; 0x1f2 <write_char+0x70>
 1d0:	88 85       	ldd	r24, Y+8	; 0x08
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	c0 97       	sbiw	r24, 0x30	; 48
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	80 50       	subi	r24, 0x00	; 0
 1e2:	9f 4f       	sbci	r25, 0xFF	; 255
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	a2 81       	ldd	r26, Z+2	; 0x02
 1ec:	b3 81       	ldd	r27, Z+3	; 0x03
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	89 83       	std	Y+1, r24	; 0x01
 1f2:	1e 82       	std	Y+6, r1	; 0x06
 1f4:	1d 82       	std	Y+5, r1	; 0x05
 1f6:	51 c0       	rjmp	.+162    	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	8f 83       	std	Y+7, r24	; 0x07
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	9a 81       	ldd	r25, Y+2	; 0x02
 202:	92 95       	swap	r25
 204:	82 95       	swap	r24
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	89 27       	eor	r24, r25
 20a:	9f 70       	andi	r25, 0x0F	; 15
 20c:	89 27       	eor	r24, r25
 20e:	9a 83       	std	Y+2, r25	; 0x02
 210:	89 83       	std	Y+1, r24	; 0x01
 212:	89 85       	ldd	r24, Y+9	; 0x09
 214:	9a 85       	ldd	r25, Y+10	; 0x0a
 216:	81 70       	andi	r24, 0x01	; 1
 218:	99 27       	eor	r25, r25
 21a:	89 2b       	or	r24, r25
 21c:	b1 f4       	brne	.+44     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	9c 81       	ldd	r25, Y+4	; 0x04
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	28 2f       	mov	r18, r24
 228:	20 7f       	andi	r18, 0xF0	; 240
 22a:	8b 81       	ldd	r24, Y+3	; 0x03
 22c:	9c 81       	ldd	r25, Y+4	; 0x04
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	9c 81       	ldd	r25, Y+4	; 0x04
 236:	fc 01       	movw	r30, r24
 238:	90 81       	ld	r25, Z
 23a:	8f 81       	ldd	r24, Y+7	; 0x07
 23c:	29 2f       	mov	r18, r25
 23e:	28 2b       	or	r18, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	9c 81       	ldd	r25, Y+4	; 0x04
 244:	fc 01       	movw	r30, r24
 246:	20 83       	st	Z, r18
 248:	1e c0       	rjmp	.+60     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 24a:	8b 81       	ldd	r24, Y+3	; 0x03
 24c:	9c 81       	ldd	r25, Y+4	; 0x04
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	28 2f       	mov	r18, r24
 254:	2f 70       	andi	r18, 0x0F	; 15
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	9c 81       	ldd	r25, Y+4	; 0x04
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	28 2f       	mov	r18, r24
 268:	8f 81       	ldd	r24, Y+7	; 0x07
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	82 95       	swap	r24
 270:	92 95       	swap	r25
 272:	90 7f       	andi	r25, 0xF0	; 240
 274:	98 27       	eor	r25, r24
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	98 27       	eor	r25, r24
 27a:	82 2b       	or	r24, r18
 27c:	28 2f       	mov	r18, r24
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	9c 81       	ldd	r25, Y+4	; 0x04
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	05 96       	adiw	r24, 0x05	; 5
 28c:	9c 83       	std	Y+4, r25	; 0x04
 28e:	8b 83       	std	Y+3, r24	; 0x03
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	9e 81       	ldd	r25, Y+6	; 0x06
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	9e 83       	std	Y+6, r25	; 0x06
 298:	8d 83       	std	Y+5, r24	; 0x05
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	04 97       	sbiw	r24, 0x04	; 4
 2a0:	0c f4       	brge	.+2      	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
 2a2:	aa cf       	rjmp	.-172    	; 0x1f8 <write_char+0x76>
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 2a6:	00 00       	nop
 2a8:	2a 96       	adiw	r28, 0x0a	; 10
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <is_prime>:

int is_prime(long num){
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	28 97       	sbiw	r28, 0x08	; 8
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	6d 83       	std	Y+5, r22	; 0x05
 2d0:	7e 83       	std	Y+6, r23	; 0x06
 2d2:	8f 83       	std	Y+7, r24	; 0x07
 2d4:	98 87       	std	Y+8, r25	; 0x08
	
	if (num <= 3)
 2d6:	8d 81       	ldd	r24, Y+5	; 0x05
 2d8:	9e 81       	ldd	r25, Y+6	; 0x06
 2da:	af 81       	ldd	r26, Y+7	; 0x07
 2dc:	b8 85       	ldd	r27, Y+8	; 0x08
 2de:	04 97       	sbiw	r24, 0x04	; 4
 2e0:	a1 05       	cpc	r26, r1
 2e2:	b1 05       	cpc	r27, r1
 2e4:	1c f4       	brge	.+6      	; 0x2ec <is_prime+0x32>
	return 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	47 c0       	rjmp	.+142    	; 0x37a <is_prime+0xc0>
	
	if(num%2 == 0)
 2ec:	8d 81       	ldd	r24, Y+5	; 0x05
 2ee:	9e 81       	ldd	r25, Y+6	; 0x06
 2f0:	af 81       	ldd	r26, Y+7	; 0x07
 2f2:	b8 85       	ldd	r27, Y+8	; 0x08
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	99 27       	eor	r25, r25
 2f8:	aa 27       	eor	r26, r26
 2fa:	bb 27       	eor	r27, r27
 2fc:	89 2b       	or	r24, r25
 2fe:	8a 2b       	or	r24, r26
 300:	8b 2b       	or	r24, r27
 302:	19 f4       	brne	.+6      	; 0x30a <is_prime+0x50>
	return 0;
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	38 c0       	rjmp	.+112    	; 0x37a <is_prime+0xc0>
	
	long counter = 3;
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a0 e0       	ldi	r26, 0x00	; 0
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	9a 83       	std	Y+2, r25	; 0x02
 316:	ab 83       	std	Y+3, r26	; 0x03
 318:	bc 83       	std	Y+4, r27	; 0x04
	
	while(counter <num){
 31a:	20 c0       	rjmp	.+64     	; 0x35c <is_prime+0xa2>
		if(num%counter == 0)
 31c:	8d 81       	ldd	r24, Y+5	; 0x05
 31e:	9e 81       	ldd	r25, Y+6	; 0x06
 320:	af 81       	ldd	r26, Y+7	; 0x07
 322:	b8 85       	ldd	r27, Y+8	; 0x08
 324:	29 81       	ldd	r18, Y+1	; 0x01
 326:	3a 81       	ldd	r19, Y+2	; 0x02
 328:	4b 81       	ldd	r20, Y+3	; 0x03
 32a:	5c 81       	ldd	r21, Y+4	; 0x04
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	0e 94 4b 05 	call	0xa96	; 0xa96 <__divmodsi4>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	89 2b       	or	r24, r25
 33a:	8a 2b       	or	r24, r26
 33c:	8b 2b       	or	r24, r27
 33e:	19 f4       	brne	.+6      	; 0x346 <is_prime+0x8c>
		return 0;
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	1a c0       	rjmp	.+52     	; 0x37a <is_prime+0xc0>
		counter++;
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	ab 81       	ldd	r26, Y+3	; 0x03
 34c:	bc 81       	ldd	r27, Y+4	; 0x04
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	a1 1d       	adc	r26, r1
 352:	b1 1d       	adc	r27, r1
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	9a 83       	std	Y+2, r25	; 0x02
 358:	ab 83       	std	Y+3, r26	; 0x03
 35a:	bc 83       	std	Y+4, r27	; 0x04
	if(num%2 == 0)
	return 0;
	
	long counter = 3;
	
	while(counter <num){
 35c:	29 81       	ldd	r18, Y+1	; 0x01
 35e:	3a 81       	ldd	r19, Y+2	; 0x02
 360:	4b 81       	ldd	r20, Y+3	; 0x03
 362:	5c 81       	ldd	r21, Y+4	; 0x04
 364:	8d 81       	ldd	r24, Y+5	; 0x05
 366:	9e 81       	ldd	r25, Y+6	; 0x06
 368:	af 81       	ldd	r26, Y+7	; 0x07
 36a:	b8 85       	ldd	r27, Y+8	; 0x08
 36c:	28 17       	cp	r18, r24
 36e:	39 07       	cpc	r19, r25
 370:	4a 07       	cpc	r20, r26
 372:	5b 07       	cpc	r21, r27
 374:	9c f2       	brlt	.-90     	; 0x31c <is_prime+0x62>
		if(num%counter == 0)
		return 0;
		counter++;
	}
	return 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
}
 37a:	28 96       	adiw	r28, 0x08	; 8
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <toggle_led>:

// Toggles a led on or off
void toggle_led(void){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	LCDDR8= LCDDR8^1;
 394:	84 ef       	ldi	r24, 0xF4	; 244
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	24 ef       	ldi	r18, 0xF4	; 244
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	f9 01       	movw	r30, r18
 39e:	30 81       	ld	r19, Z
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	23 27       	eor	r18, r19
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
}
 3a8:	00 00       	nop
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <printAt>:
		*num+=1;
		if(is_prime(*num)==1){
			return;
		}
	}
}
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <printAt+0xa>
 3ba:	00 d0       	rcall	.+0      	; 0x3bc <printAt+0xc>
 3bc:	00 d0       	rcall	.+0      	; 0x3be <printAt+0xe>
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	69 83       	std	Y+1, r22	; 0x01
 3c4:	7a 83       	std	Y+2, r23	; 0x02
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	9c 83       	std	Y+4, r25	; 0x04
 3ca:	5e 83       	std	Y+6, r21	; 0x06
 3cc:	4d 83       	std	Y+5, r20	; 0x05
 3ce:	8e e2       	ldi	r24, 0x2E	; 46
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 ca 04 	call	0x994	; 0x994 <lock>
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	ab 81       	ldd	r26, Y+3	; 0x03
 3dc:	bc 81       	ldd	r27, Y+4	; 0x04
 3de:	24 e6       	ldi	r18, 0x64	; 100
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 e0       	ldi	r20, 0x00	; 0
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	bc 01       	movw	r22, r24
 3e8:	cd 01       	movw	r24, r26
 3ea:	0e 94 4b 05 	call	0xa96	; 0xa96 <__divmodsi4>
 3ee:	dc 01       	movw	r26, r24
 3f0:	cb 01       	movw	r24, r22
 3f2:	2a e0       	ldi	r18, 0x0A	; 10
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	bc 01       	movw	r22, r24
 3fc:	cd 01       	movw	r24, r26
 3fe:	0e 94 4b 05 	call	0xa96	; 0xa96 <__divmodsi4>
 402:	da 01       	movw	r26, r20
 404:	c9 01       	movw	r24, r18
 406:	20 e3       	ldi	r18, 0x30	; 48
 408:	28 0f       	add	r18, r24
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	9e 81       	ldd	r25, Y+6	; 0x06
 40e:	bc 01       	movw	r22, r24
 410:	82 2f       	mov	r24, r18
 412:	0e 94 c1 00 	call	0x182	; 0x182 <write_char>
 416:	8d 81       	ldd	r24, Y+5	; 0x05
 418:	9e 81       	ldd	r25, Y+6	; 0x06
 41a:	8c 01       	movw	r16, r24
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	ab 81       	ldd	r26, Y+3	; 0x03
 426:	bc 81       	ldd	r27, Y+4	; 0x04
 428:	2a e0       	ldi	r18, 0x0A	; 10
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	bc 01       	movw	r22, r24
 432:	cd 01       	movw	r24, r26
 434:	0e 94 4b 05 	call	0xa96	; 0xa96 <__divmodsi4>
 438:	dc 01       	movw	r26, r24
 43a:	cb 01       	movw	r24, r22
 43c:	80 5d       	subi	r24, 0xD0	; 208
 43e:	b8 01       	movw	r22, r16
 440:	0e 94 c1 00 	call	0x182	; 0x182 <write_char>
 444:	8e e2       	ldi	r24, 0x2E	; 46
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <unlock>
 44c:	00 00       	nop
 44e:	26 96       	adiw	r28, 0x06	; 6
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <computePrimes>:
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	00 d0       	rcall	.+0      	; 0x46a <computePrimes+0x6>
 46a:	00 d0       	rcall	.+0      	; 0x46c <computePrimes+0x8>
 46c:	00 d0       	rcall	.+0      	; 0x46e <computePrimes+0xa>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	9e 83       	std	Y+6, r25	; 0x06
 474:	8d 83       	std	Y+5, r24	; 0x05
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	a0 e0       	ldi	r26, 0x00	; 0
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	89 83       	std	Y+1, r24	; 0x01
 480:	9a 83       	std	Y+2, r25	; 0x02
 482:	ab 83       	std	Y+3, r26	; 0x03
 484:	bc 83       	std	Y+4, r27	; 0x04
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	ab 81       	ldd	r26, Y+3	; 0x03
 48c:	bc 81       	ldd	r27, Y+4	; 0x04
 48e:	bc 01       	movw	r22, r24
 490:	cd 01       	movw	r24, r26
 492:	0e 94 5d 01 	call	0x2ba	; 0x2ba <is_prime>
 496:	89 2b       	or	r24, r25
 498:	59 f0       	breq	.+22     	; 0x4b0 <computePrimes+0x4c>
 49a:	2d 81       	ldd	r18, Y+5	; 0x05
 49c:	3e 81       	ldd	r19, Y+6	; 0x06
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	ab 81       	ldd	r26, Y+3	; 0x03
 4a4:	bc 81       	ldd	r27, Y+4	; 0x04
 4a6:	a9 01       	movw	r20, r18
 4a8:	bc 01       	movw	r22, r24
 4aa:	cd 01       	movw	r24, r26
 4ac:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <printAt>
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	9a 81       	ldd	r25, Y+2	; 0x02
 4b4:	ab 81       	ldd	r26, Y+3	; 0x03
 4b6:	bc 81       	ldd	r27, Y+4	; 0x04
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	a1 1d       	adc	r26, r1
 4bc:	b1 1d       	adc	r27, r1
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	9a 83       	std	Y+2, r25	; 0x02
 4c2:	ab 83       	std	Y+3, r26	; 0x03
 4c4:	bc 83       	std	Y+4, r27	; 0x04
 4c6:	df cf       	rjmp	.-66     	; 0x486 <computePrimes+0x22>

000004c8 <increment_button_thingy>:

uint8_t button_thingy = 0;
// Access function as a last resort
void increment_button_thingy(){
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
	button_thingy++;
 4d0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <button_thingy>
 4d4:	8f 5f       	subi	r24, 0xFF	; 255
 4d6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <button_thingy>
}
 4da:	00 00       	nop
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <get_button_thingy>:
// Access function as a last resort
uint8_t get_button_thingy(){
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
	return button_thingy;
 4ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <button_thingy>
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <button>:
void button(int arg){
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <button+0x6>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	9a 83       	std	Y+2, r25	; 0x02
 500:	89 83       	std	Y+1, r24	; 0x01
			
		}*/
		// This one does not work. I don't know why
		//	uint8_t *ptr = &button_thingy;
		while(1){
			while(1 == (PINB&(1<<7))>>7);
 502:	00 00       	nop
 504:	83 e2       	ldi	r24, 0x23	; 35
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	fc 01       	movw	r30, r24
 50a:	80 81       	ld	r24, Z
 50c:	88 1f       	adc	r24, r24
 50e:	88 27       	eor	r24, r24
 510:	88 1f       	adc	r24, r24
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	b9 f3       	breq	.-18     	; 0x504 <__stack+0x5>
			increment_button_thingy();
 516:	0e 94 64 02 	call	0x4c8	; 0x4c8 <increment_button_thingy>
			//*ptr = *ptr + 1;
			printAt(get_button_thingy(),4);
 51a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <get_button_thingy>
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	a0 e0       	ldi	r26, 0x00	; 0
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	44 e0       	ldi	r20, 0x04	; 4
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	bc 01       	movw	r22, r24
 52c:	cd 01       	movw	r24, r26
 52e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <printAt>
			while(0 == (PINB&(1<<7))>>7);
 532:	00 00       	nop
 534:	83 e2       	ldi	r24, 0x23	; 35
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	d4 f7       	brge	.-12     	; 0x534 <__stack+0x35>
		}
 540:	e0 cf       	rjmp	.-64     	; 0x502 <__stack+0x3>

00000542 <blink>:
		
}
void blink(int arg){
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	00 d0       	rcall	.+0      	; 0x548 <blink+0x6>
 548:	cd b7       	in	r28, 0x3d	; 61
 54a:	de b7       	in	r29, 0x3e	; 62
 54c:	9a 83       	std	Y+2, r25	; 0x02
 54e:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		if(get_timer_int_counter() >= 10){
 550:	0e 94 32 05 	call	0xa64	; 0xa64 <get_timer_int_counter>
 554:	0a 97       	sbiw	r24, 0x0a	; 10
 556:	e0 f3       	brcs	.-8      	; 0x550 <blink+0xe>
			reset_timer_int_counter();
 558:	0e 94 3d 05 	call	0xa7a	; 0xa7a <reset_timer_int_counter>
			toggle_led();
 55c:	0e 94 c6 01 	call	0x38c	; 0x38c <toggle_led>
		}
	}
 560:	f7 cf       	rjmp	.-18     	; 0x550 <blink+0xe>

00000562 <main>:
}
int main() {
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
	LCDDR13 = LCDDR13|1;
 56a:	89 ef       	ldi	r24, 0xF9	; 249
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	29 ef       	ldi	r18, 0xF9	; 249
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	f9 01       	movw	r30, r18
 574:	20 81       	ld	r18, Z
 576:	21 60       	ori	r18, 0x01	; 1
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
	init_lcd();
 57c:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
	
	spawn(button,0);
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	8a e7       	ldi	r24, 0x7A	; 122
 586:	92 e0       	ldi	r25, 0x02	; 2
 588:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <spawn>
    spawn(blink,0);	
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	81 ea       	ldi	r24, 0xA1	; 161
 592:	92 e0       	ldi	r25, 0x02	; 2
 594:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <spawn>
	computePrimes(0);
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 32 02 	call	0x464	; 0x464 <computePrimes>
	while(1);
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <main+0x3e>

000005a2 <initialize>:
thread readyQ  = NULL;
thread current = &initp;

int initialized = 0;
// All of the modifications are commented and should not affect the results
static void initialize(void) {
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <initialize+0x6>
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <initialize+0x8>
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <initialize+0xa>
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	// Setting a pointer to timer 1 reg
	volatile uint16_t * timer = (uint16_t *)0x84;
 5b0:	84 e8       	ldi	r24, 0x84	; 132
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	9c 83       	std	Y+4, r25	; 0x04
 5b6:	8b 83       	std	Y+3, r24	; 0x03
	
	// Setting power options
	CLKPR = 0x80;
 5b8:	81 e6       	ldi	r24, 0x61	; 97
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	20 e8       	ldi	r18, 0x80	; 128
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
	CLKPR = 0X00;
 5c2:	81 e6       	ldi	r24, 0x61	; 97
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	fc 01       	movw	r30, r24
 5c8:	10 82       	st	Z, r1
	
	// Setting the pre-scaling factor to 256
	TCCR1B = TCCR1B | TIMER_SCALING_1024;
 5ca:	81 e8       	ldi	r24, 0x81	; 129
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	21 e8       	ldi	r18, 0x81	; 129
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	f9 01       	movw	r30, r18
 5d4:	20 81       	ld	r18, Z
 5d6:	25 60       	ori	r18, 0x05	; 5
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
	
	// Setting the pull up
	PORTB = PORTB   | (1<<7);
 5dc:	85 e2       	ldi	r24, 0x25	; 37
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	25 e2       	ldi	r18, 0x25	; 37
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	20 81       	ld	r18, Z
 5e8:	20 68       	ori	r18, 0x80	; 128
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
	
	// Enabling interrupts
	MCUSR = MCUSR   | 1<<7;
 5ee:	84 e5       	ldi	r24, 0x54	; 84
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	24 e5       	ldi	r18, 0x54	; 84
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	f9 01       	movw	r30, r18
 5f8:	20 81       	ld	r18, Z
 5fa:	20 68       	ori	r18, 0x80	; 128
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
	EICRA = EICRA   | 3;
 600:	89 e6       	ldi	r24, 0x69	; 105
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	29 e6       	ldi	r18, 0x69	; 105
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	f9 01       	movw	r30, r18
 60a:	20 81       	ld	r18, Z
 60c:	23 60       	ori	r18, 0x03	; 3
 60e:	fc 01       	movw	r30, r24
 610:	20 83       	st	Z, r18
	// Button int
	//EIMSK = EIMSK   | 1<<7 | 1;
	//PCMSK1 = PCMSK1 | 1<<7;
	
	// Setting timer int enabled
	TIMSK1 = TIMSK1|2;
 612:	8f e6       	ldi	r24, 0x6F	; 111
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	2f e6       	ldi	r18, 0x6F	; 111
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	f9 01       	movw	r30, r18
 61c:	20 81       	ld	r18, Z
 61e:	22 60       	ori	r18, 0x02	; 2
 620:	fc 01       	movw	r30, r24
 622:	20 83       	st	Z, r18
	
	
	// Specifying the target interrupt period
	uint16_t * target_time = (uint16_t *)0x88;
 624:	88 e8       	ldi	r24, 0x88	; 136
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	9e 83       	std	Y+6, r25	; 0x06
 62a:	8d 83       	std	Y+5, r24	; 0x05
	*target_time = 391;												// Approximate form of 50ms in clock cycles * 1024
 62c:	8d 81       	ldd	r24, Y+5	; 0x05
 62e:	9e 81       	ldd	r25, Y+6	; 0x06
 630:	27 e8       	ldi	r18, 0x87	; 135
 632:	31 e0       	ldi	r19, 0x01	; 1
 634:	fc 01       	movw	r30, r24
 636:	31 83       	std	Z+1, r19	; 0x01
 638:	20 83       	st	Z, r18
	
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 63a:	1a 82       	std	Y+2, r1	; 0x02
 63c:	19 82       	std	Y+1, r1	; 0x01
 63e:	20 c0       	rjmp	.+64     	; 0x680 <initialize+0xde>
        threads[i].next = &threads[i+1];
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	9a 81       	ldd	r25, Y+2	; 0x02
 644:	9c 01       	movw	r18, r24
 646:	2f 5f       	subi	r18, 0xFF	; 255
 648:	3f 4f       	sbci	r19, 0xFF	; 255
 64a:	4d e6       	ldi	r20, 0x6D	; 109
 64c:	42 9f       	mul	r20, r18
 64e:	c0 01       	movw	r24, r0
 650:	43 9f       	mul	r20, r19
 652:	90 0d       	add	r25, r0
 654:	11 24       	eor	r1, r1
 656:	9c 01       	movw	r18, r24
 658:	2a 55       	subi	r18, 0x5A	; 90
 65a:	3e 4f       	sbci	r19, 0xFE	; 254
 65c:	49 81       	ldd	r20, Y+1	; 0x01
 65e:	5a 81       	ldd	r21, Y+2	; 0x02
 660:	6d e6       	ldi	r22, 0x6D	; 109
 662:	64 9f       	mul	r22, r20
 664:	c0 01       	movw	r24, r0
 666:	65 9f       	mul	r22, r21
 668:	90 0d       	add	r25, r0
 66a:	11 24       	eor	r1, r1
 66c:	86 55       	subi	r24, 0x56	; 86
 66e:	9e 4f       	sbci	r25, 0xFE	; 254
 670:	fc 01       	movw	r30, r24
 672:	31 83       	std	Z+1, r19	; 0x01
 674:	20 83       	st	Z, r18
	uint16_t * target_time = (uint16_t *)0x88;
	*target_time = 391;												// Approximate form of 50ms in clock cycles * 1024
	
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	9a 81       	ldd	r25, Y+2	; 0x02
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	9a 81       	ldd	r25, Y+2	; 0x02
 684:	03 97       	sbiw	r24, 0x03	; 3
 686:	e4 f2       	brlt	.-72     	; 0x640 <initialize+0x9e>
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
 688:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <threads+0x14c>
 68c:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <threads+0x14b>

	// reseting timer
	*timer = 0;
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	fc 01       	movw	r30, r24
 696:	11 82       	std	Z+1, r1	; 0x01
 698:	10 82       	st	Z, r1

    initialized = 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <initialized+0x1>
 6a2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <initialized>
}
 6a6:	00 00       	nop
 6a8:	26 96       	adiw	r28, 0x06	; 6
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	f8 94       	cli
 6ae:	de bf       	out	0x3e, r29	; 62
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	cd bf       	out	0x3d, r28	; 61
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <enqueue>:

// From the basic lib
static void enqueue(thread p, thread *queue) {
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <enqueue+0x6>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <enqueue+0x8>
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <enqueue+0xa>
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	9c 83       	std	Y+4, r25	; 0x04
 6ca:	8b 83       	std	Y+3, r24	; 0x03
 6cc:	7e 83       	std	Y+6, r23	; 0x06
 6ce:	6d 83       	std	Y+5, r22	; 0x05
    p->next = NULL;
 6d0:	8b 81       	ldd	r24, Y+3	; 0x03
 6d2:	9c 81       	ldd	r25, Y+4	; 0x04
 6d4:	fc 01       	movw	r30, r24
 6d6:	15 82       	std	Z+5, r1	; 0x05
 6d8:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 6da:	8d 81       	ldd	r24, Y+5	; 0x05
 6dc:	9e 81       	ldd	r25, Y+6	; 0x06
 6de:	fc 01       	movw	r30, r24
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	89 2b       	or	r24, r25
 6e6:	41 f4       	brne	.+16     	; 0x6f8 <enqueue+0x3e>
        *queue = p;
 6e8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ea:	9e 81       	ldd	r25, Y+6	; 0x06
 6ec:	2b 81       	ldd	r18, Y+3	; 0x03
 6ee:	3c 81       	ldd	r19, Y+4	; 0x04
 6f0:	fc 01       	movw	r30, r24
 6f2:	31 83       	std	Z+1, r19	; 0x01
 6f4:	20 83       	st	Z, r18
        thread q = *queue;
        while (q->next)
            q = q->next;
        q->next = p;
    }
}
 6f6:	1d c0       	rjmp	.+58     	; 0x732 <enqueue+0x78>
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
 6f8:	8d 81       	ldd	r24, Y+5	; 0x05
 6fa:	9e 81       	ldd	r25, Y+6	; 0x06
 6fc:	fc 01       	movw	r30, r24
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	9a 83       	std	Y+2, r25	; 0x02
 704:	89 83       	std	Y+1, r24	; 0x01
        while (q->next)
 706:	07 c0       	rjmp	.+14     	; 0x716 <enqueue+0x5c>
            q = q->next;
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	9a 81       	ldd	r25, Y+2	; 0x02
 70c:	fc 01       	movw	r30, r24
 70e:	84 81       	ldd	r24, Z+4	; 0x04
 710:	95 81       	ldd	r25, Z+5	; 0x05
 712:	9a 83       	std	Y+2, r25	; 0x02
 714:	89 83       	std	Y+1, r24	; 0x01
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	9a 81       	ldd	r25, Y+2	; 0x02
 71a:	fc 01       	movw	r30, r24
 71c:	84 81       	ldd	r24, Z+4	; 0x04
 71e:	95 81       	ldd	r25, Z+5	; 0x05
 720:	89 2b       	or	r24, r25
 722:	91 f7       	brne	.-28     	; 0x708 <enqueue+0x4e>
            q = q->next;
        q->next = p;
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	9a 81       	ldd	r25, Y+2	; 0x02
 728:	2b 81       	ldd	r18, Y+3	; 0x03
 72a:	3c 81       	ldd	r19, Y+4	; 0x04
 72c:	fc 01       	movw	r30, r24
 72e:	35 83       	std	Z+5, r19	; 0x05
 730:	24 83       	std	Z+4, r18	; 0x04
    }
}
 732:	00 00       	nop
 734:	26 96       	adiw	r28, 0x06	; 6
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <dequeue>:
// From the basic lib
static thread dequeue(thread *queue) {
 746:	cf 93       	push	r28
 748:	df 93       	push	r29
 74a:	00 d0       	rcall	.+0      	; 0x74c <dequeue+0x6>
 74c:	00 d0       	rcall	.+0      	; 0x74e <dequeue+0x8>
 74e:	cd b7       	in	r28, 0x3d	; 61
 750:	de b7       	in	r29, 0x3e	; 62
 752:	9c 83       	std	Y+4, r25	; 0x04
 754:	8b 83       	std	Y+3, r24	; 0x03
    thread p = *queue;
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	9c 81       	ldd	r25, Y+4	; 0x04
 75a:	fc 01       	movw	r30, r24
 75c:	80 81       	ld	r24, Z
 75e:	91 81       	ldd	r25, Z+1	; 0x01
 760:	9a 83       	std	Y+2, r25	; 0x02
 762:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	9c 81       	ldd	r25, Y+4	; 0x04
 768:	fc 01       	movw	r30, r24
 76a:	80 81       	ld	r24, Z
 76c:	91 81       	ldd	r25, Z+1	; 0x01
 76e:	89 2b       	or	r24, r25
 770:	71 f0       	breq	.+28     	; 0x78e <dequeue+0x48>
        *queue = (*queue)->next;
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	9c 81       	ldd	r25, Y+4	; 0x04
 776:	fc 01       	movw	r30, r24
 778:	80 81       	ld	r24, Z
 77a:	91 81       	ldd	r25, Z+1	; 0x01
 77c:	fc 01       	movw	r30, r24
 77e:	24 81       	ldd	r18, Z+4	; 0x04
 780:	35 81       	ldd	r19, Z+5	; 0x05
 782:	8b 81       	ldd	r24, Y+3	; 0x03
 784:	9c 81       	ldd	r25, Y+4	; 0x04
 786:	fc 01       	movw	r30, r24
 788:	31 83       	std	Z+1, r19	; 0x01
 78a:	20 83       	st	Z, r18
 78c:	01 c0       	rjmp	.+2      	; 0x790 <dequeue+0x4a>
    } else {
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
 78e:	ff cf       	rjmp	.-2      	; 0x78e <dequeue+0x48>
    }
    return p;
 790:	89 81       	ldd	r24, Y+1	; 0x01
 792:	9a 81       	ldd	r25, Y+2	; 0x02
}
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <dispatch>:

// From the basic lib
static void dispatch(thread next) {
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	00 d0       	rcall	.+0      	; 0x7a8 <dispatch+0x6>
 7a8:	cd b7       	in	r28, 0x3d	; 61
 7aa:	de b7       	in	r29, 0x3e	; 62
 7ac:	9a 83       	std	Y+2, r25	; 0x02
 7ae:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 7b0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 7b4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 7b8:	06 96       	adiw	r24, 0x06	; 6
 7ba:	0e 94 8c 05 	call	0xb18	; 0xb18 <setjmp>
 7be:	89 2b       	or	r24, r25
 7c0:	69 f4       	brne	.+26     	; 0x7dc <dispatch+0x3a>
        current = next;
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	9a 81       	ldd	r25, Y+2	; 0x02
 7c6:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <current+0x1>
 7ca:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <current>
        longjmp(next->context,1);
 7ce:	89 81       	ldd	r24, Y+1	; 0x01
 7d0:	9a 81       	ldd	r25, Y+2	; 0x02
 7d2:	06 96       	adiw	r24, 0x06	; 6
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	0e 94 ac 05 	call	0xb58	; 0xb58 <longjmp>
    }
}
 7dc:	00 00       	nop
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <spawn>:

void spawn(void (* function)(int), int arg) {
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	00 d0       	rcall	.+0      	; 0x7ee <spawn+0x6>
 7ee:	00 d0       	rcall	.+0      	; 0x7f0 <spawn+0x8>
 7f0:	00 d0       	rcall	.+0      	; 0x7f2 <spawn+0xa>
 7f2:	cd b7       	in	r28, 0x3d	; 61
 7f4:	de b7       	in	r29, 0x3e	; 62
 7f6:	9c 83       	std	Y+4, r25	; 0x04
 7f8:	8b 83       	std	Y+3, r24	; 0x03
 7fa:	7e 83       	std	Y+6, r23	; 0x06
 7fc:	6d 83       	std	Y+5, r22	; 0x05
    thread newp;

    DISABLE();
 7fe:	f8 94       	cli
    if (!initialized) initialize();
 800:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <initialized>
 804:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <initialized+0x1>
 808:	89 2b       	or	r24, r25
 80a:	11 f4       	brne	.+4      	; 0x810 <spawn+0x28>
 80c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <initialize>

    newp = dequeue(&freeQ);
 810:	8a e2       	ldi	r24, 0x2A	; 42
 812:	91 e0       	ldi	r25, 0x01	; 1
 814:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 818:	9a 83       	std	Y+2, r25	; 0x02
 81a:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	9a 81       	ldd	r25, Y+2	; 0x02
 820:	2b 81       	ldd	r18, Y+3	; 0x03
 822:	3c 81       	ldd	r19, Y+4	; 0x04
 824:	fc 01       	movw	r30, r24
 826:	31 83       	std	Z+1, r19	; 0x01
 828:	20 83       	st	Z, r18
    newp->arg = arg;
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	9a 81       	ldd	r25, Y+2	; 0x02
 82e:	2d 81       	ldd	r18, Y+5	; 0x05
 830:	3e 81       	ldd	r19, Y+6	; 0x06
 832:	fc 01       	movw	r30, r24
 834:	33 83       	std	Z+3, r19	; 0x03
 836:	22 83       	std	Z+2, r18	; 0x02
    newp->next = NULL;
 838:	89 81       	ldd	r24, Y+1	; 0x01
 83a:	9a 81       	ldd	r25, Y+2	; 0x02
 83c:	fc 01       	movw	r30, r24
 83e:	15 82       	std	Z+5, r1	; 0x05
 840:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	9a 81       	ldd	r25, Y+2	; 0x02
 846:	06 96       	adiw	r24, 0x06	; 6
 848:	0e 94 8c 05 	call	0xb18	; 0xb18 <setjmp>
 84c:	01 97       	sbiw	r24, 0x01	; 1
 84e:	01 f5       	brne	.+64     	; 0x890 <spawn+0xa8>
        ENABLE();
 850:	78 94       	sei
        current->function(current->arg);
 852:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 856:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 85a:	fc 01       	movw	r30, r24
 85c:	20 81       	ld	r18, Z
 85e:	31 81       	ldd	r19, Z+1	; 0x01
 860:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 864:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 868:	fc 01       	movw	r30, r24
 86a:	82 81       	ldd	r24, Z+2	; 0x02
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	f9 01       	movw	r30, r18
 870:	09 95       	icall
        DISABLE();
 872:	f8 94       	cli
        enqueue(current, &freeQ);
 874:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 878:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 87c:	6a e2       	ldi	r22, 0x2A	; 42
 87e:	71 e0       	ldi	r23, 0x01	; 1
 880:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
        dispatch(dequeue(&readyQ));
 884:	85 e3       	ldi	r24, 0x35	; 53
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 88c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	9a 81       	ldd	r25, Y+2	; 0x02
 894:	06 96       	adiw	r24, 0x06	; 6
 896:	40 96       	adiw	r24, 0x10	; 16
 898:	29 81       	ldd	r18, Y+1	; 0x01
 89a:	3a 81       	ldd	r19, Y+2	; 0x02
 89c:	23 5e       	subi	r18, 0xE3	; 227
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	24 5b       	subi	r18, 0xB4	; 180
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	fc 01       	movw	r30, r24
 8a6:	31 83       	std	Z+1, r19	; 0x01
 8a8:	20 83       	st	Z, r18
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	06 96       	adiw	r24, 0x06	; 6
 8b0:	42 96       	adiw	r24, 0x12	; 18
 8b2:	29 81       	ldd	r18, Y+1	; 0x01
 8b4:	3a 81       	ldd	r19, Y+2	; 0x02
 8b6:	23 5e       	subi	r18, 0xE3	; 227
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	24 5b       	subi	r18, 0xB4	; 180
 8bc:	3f 4f       	sbci	r19, 0xFF	; 255
 8be:	fc 01       	movw	r30, r24
 8c0:	31 83       	std	Z+1, r19	; 0x01
 8c2:	20 83       	st	Z, r18

    enqueue(newp, &readyQ);
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	9a 81       	ldd	r25, Y+2	; 0x02
 8c8:	65 e3       	ldi	r22, 0x35	; 53
 8ca:	71 e0       	ldi	r23, 0x01	; 1
 8cc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
    ENABLE();
 8d0:	78 94       	sei
}
 8d2:	00 00       	nop
 8d4:	26 96       	adiw	r28, 0x06	; 6
 8d6:	0f b6       	in	r0, 0x3f	; 63
 8d8:	f8 94       	cli
 8da:	de bf       	out	0x3e, r29	; 62
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	cd bf       	out	0x3d, r28	; 61
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <yield>:

// Enques current thread and starts the next thread in line
void yield(void) {
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	cd b7       	in	r28, 0x3d	; 61
 8ec:	de b7       	in	r29, 0x3e	; 62
	DISABLE();
 8ee:	f8 94       	cli
	// Pluck the first thread from the queue
	// Enqueue the thread that was plucked
	enqueue(current,&readyQ);
 8f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 8f4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 8f8:	65 e3       	ldi	r22, 0x35	; 53
 8fa:	71 e0       	ldi	r23, 0x01	; 1
 8fc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
	// Dequeue and execute next thread
	dispatch(dequeue(&readyQ));
 900:	85 e3       	ldi	r24, 0x35	; 53
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 908:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <dispatch>
	ENABLE();
 90c:	78 94       	sei
}
 90e:	00 00       	nop
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	08 95       	ret

00000916 <__vector_7>:


// Increments a timer counter and the resets the timer it self.
ISR(TIMER1_COMPA_vect){
 916:	1f 92       	push	r1
 918:	0f 92       	push	r0
 91a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 91e:	0f 92       	push	r0
 920:	11 24       	eor	r1, r1
 922:	2f 93       	push	r18
 924:	3f 93       	push	r19
 926:	4f 93       	push	r20
 928:	5f 93       	push	r21
 92a:	6f 93       	push	r22
 92c:	7f 93       	push	r23
 92e:	8f 93       	push	r24
 930:	9f 93       	push	r25
 932:	af 93       	push	r26
 934:	bf 93       	push	r27
 936:	ef 93       	push	r30
 938:	ff 93       	push	r31
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
	DISABLE();
 942:	f8 94       	cli
	timer_int_counter++;
 944:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <timer_int_counter>
 948:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <timer_int_counter+0x1>
 94c:	01 96       	adiw	r24, 0x01	; 1
 94e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <timer_int_counter+0x1>
 952:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <timer_int_counter>
	*timer = 0;
 956:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <timer>
 95a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <timer+0x1>
 95e:	fc 01       	movw	r30, r24
 960:	11 82       	std	Z+1, r1	; 0x01
 962:	10 82       	st	Z, r1
	ENABLE();
 964:	78 94       	sei
	yield();
 966:	0e 94 73 04 	call	0x8e6	; 0x8e6 <yield>
}
 96a:	00 00       	nop
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	ff 91       	pop	r31
 972:	ef 91       	pop	r30
 974:	bf 91       	pop	r27
 976:	af 91       	pop	r26
 978:	9f 91       	pop	r25
 97a:	8f 91       	pop	r24
 97c:	7f 91       	pop	r23
 97e:	6f 91       	pop	r22
 980:	5f 91       	pop	r21
 982:	4f 91       	pop	r20
 984:	3f 91       	pop	r19
 986:	2f 91       	pop	r18
 988:	0f 90       	pop	r0
 98a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <lock>:
// same as in part 1
void lock(mutex *m) {
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	00 d0       	rcall	.+0      	; 0x99a <lock+0x6>
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	9a 83       	std	Y+2, r25	; 0x02
 9a0:	89 83       	std	Y+1, r24	; 0x01
	DISABLE();
 9a2:	f8 94       	cli
	if(m->locked==0){
 9a4:	89 81       	ldd	r24, Y+1	; 0x01
 9a6:	9a 81       	ldd	r25, Y+2	; 0x02
 9a8:	fc 01       	movw	r30, r24
 9aa:	80 81       	ld	r24, Z
 9ac:	91 81       	ldd	r25, Z+1	; 0x01
 9ae:	89 2b       	or	r24, r25
 9b0:	41 f4       	brne	.+16     	; 0x9c2 <lock+0x2e>
		// Mutex is free, just lock and return
		m->locked = 1;
 9b2:	89 81       	ldd	r24, Y+1	; 0x01
 9b4:	9a 81       	ldd	r25, Y+2	; 0x02
 9b6:	21 e0       	ldi	r18, 0x01	; 1
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	fc 01       	movw	r30, r24
 9bc:	31 83       	std	Z+1, r19	; 0x01
 9be:	20 83       	st	Z, r18
 9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <lock+0x52>
	}
	else{
		// Mutex is not free, wait until it is free
		enqueue(current,&(m->waitQ));
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	9a 81       	ldd	r25, Y+2	; 0x02
 9c6:	9c 01       	movw	r18, r24
 9c8:	2e 5f       	subi	r18, 0xFE	; 254
 9ca:	3f 4f       	sbci	r19, 0xFF	; 255
 9cc:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 9d0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 9d4:	b9 01       	movw	r22, r18
 9d6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
		dispatch(dequeue(&readyQ));
 9da:	85 e3       	ldi	r24, 0x35	; 53
 9dc:	91 e0       	ldi	r25, 0x01	; 1
 9de:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 9e2:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <dispatch>
	}	
	ENABLE();
 9e6:	78 94       	sei
}
 9e8:	00 00       	nop
 9ea:	0f 90       	pop	r0
 9ec:	0f 90       	pop	r0
 9ee:	df 91       	pop	r29
 9f0:	cf 91       	pop	r28
 9f2:	08 95       	ret

000009f4 <unlock>:

// same as in part 1
void unlock(mutex *m) {
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	00 d0       	rcall	.+0      	; 0x9fa <unlock+0x6>
 9fa:	cd b7       	in	r28, 0x3d	; 61
 9fc:	de b7       	in	r29, 0x3e	; 62
 9fe:	9a 83       	std	Y+2, r25	; 0x02
 a00:	89 83       	std	Y+1, r24	; 0x01
	DISABLE();
 a02:	f8 94       	cli
	if(m->locked!=0){
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	9a 81       	ldd	r25, Y+2	; 0x02
 a08:	fc 01       	movw	r30, r24
 a0a:	80 81       	ld	r24, Z
 a0c:	91 81       	ldd	r25, Z+1	; 0x01
 a0e:	89 2b       	or	r24, r25
 a10:	11 f1       	breq	.+68     	; 0xa56 <unlock+0x62>
		enqueue(current,&readyQ);
 a12:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <current>
 a16:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <current+0x1>
 a1a:	65 e3       	ldi	r22, 0x35	; 53
 a1c:	71 e0       	ldi	r23, 0x01	; 1
 a1e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <enqueue>
		if(m->waitQ!=NULL){
 a22:	89 81       	ldd	r24, Y+1	; 0x01
 a24:	9a 81       	ldd	r25, Y+2	; 0x02
 a26:	fc 01       	movw	r30, r24
 a28:	82 81       	ldd	r24, Z+2	; 0x02
 a2a:	93 81       	ldd	r25, Z+3	; 0x03
 a2c:	89 2b       	or	r24, r25
 a2e:	41 f0       	breq	.+16     	; 0xa40 <unlock+0x4c>
			dispatch(dequeue(&(m->waitQ)));
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	9a 81       	ldd	r25, Y+2	; 0x02
 a34:	02 96       	adiw	r24, 0x02	; 2
 a36:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 a3a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <dispatch>
 a3e:	0b c0       	rjmp	.+22     	; 0xa56 <unlock+0x62>
		}
		else{
			m->locked = 0;
 a40:	89 81       	ldd	r24, Y+1	; 0x01
 a42:	9a 81       	ldd	r25, Y+2	; 0x02
 a44:	fc 01       	movw	r30, r24
 a46:	11 82       	std	Z+1, r1	; 0x01
 a48:	10 82       	st	Z, r1
			dispatch(dequeue(&readyQ));
 a4a:	85 e3       	ldi	r24, 0x35	; 53
 a4c:	91 e0       	ldi	r25, 0x01	; 1
 a4e:	0e 94 a3 03 	call	0x746	; 0x746 <dequeue>
 a52:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <dispatch>
		}
	}
	ENABLE();
 a56:	78 94       	sei
}
 a58:	00 00       	nop
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	08 95       	ret

00000a64 <get_timer_int_counter>:
// Not disabeling the interrupts since this will be inlined by any optimizing compiler
uint16_t get_timer_int_counter(){
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
	return timer_int_counter;
 a6c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <timer_int_counter>
 a70:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <timer_int_counter+0x1>
}
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	08 95       	ret

00000a7a <reset_timer_int_counter>:
// Not disabeling the interrupts since this will be inlined by any optimizing compiler
void reset_timer_int_counter(){
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	cd b7       	in	r28, 0x3d	; 61
 a80:	de b7       	in	r29, 0x3e	; 62
	DISABLE();
 a82:	f8 94       	cli
	timer_int_counter = 0;
 a84:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timer_int_counter+0x1>
 a88:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <timer_int_counter>
	ENABLE();
 a8c:	78 94       	sei
}
 a8e:	00 00       	nop
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	08 95       	ret

00000a96 <__divmodsi4>:
 a96:	05 2e       	mov	r0, r21
 a98:	97 fb       	bst	r25, 7
 a9a:	1e f4       	brtc	.+6      	; 0xaa2 <__divmodsi4+0xc>
 a9c:	00 94       	com	r0
 a9e:	0e 94 62 05 	call	0xac4	; 0xac4 <__negsi2>
 aa2:	57 fd       	sbrc	r21, 7
 aa4:	07 d0       	rcall	.+14     	; 0xab4 <__divmodsi4_neg2>
 aa6:	0e 94 6a 05 	call	0xad4	; 0xad4 <__udivmodsi4>
 aaa:	07 fc       	sbrc	r0, 7
 aac:	03 d0       	rcall	.+6      	; 0xab4 <__divmodsi4_neg2>
 aae:	4e f4       	brtc	.+18     	; 0xac2 <__divmodsi4_exit>
 ab0:	0c 94 62 05 	jmp	0xac4	; 0xac4 <__negsi2>

00000ab4 <__divmodsi4_neg2>:
 ab4:	50 95       	com	r21
 ab6:	40 95       	com	r20
 ab8:	30 95       	com	r19
 aba:	21 95       	neg	r18
 abc:	3f 4f       	sbci	r19, 0xFF	; 255
 abe:	4f 4f       	sbci	r20, 0xFF	; 255
 ac0:	5f 4f       	sbci	r21, 0xFF	; 255

00000ac2 <__divmodsi4_exit>:
 ac2:	08 95       	ret

00000ac4 <__negsi2>:
 ac4:	90 95       	com	r25
 ac6:	80 95       	com	r24
 ac8:	70 95       	com	r23
 aca:	61 95       	neg	r22
 acc:	7f 4f       	sbci	r23, 0xFF	; 255
 ace:	8f 4f       	sbci	r24, 0xFF	; 255
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	08 95       	ret

00000ad4 <__udivmodsi4>:
 ad4:	a1 e2       	ldi	r26, 0x21	; 33
 ad6:	1a 2e       	mov	r1, r26
 ad8:	aa 1b       	sub	r26, r26
 ada:	bb 1b       	sub	r27, r27
 adc:	fd 01       	movw	r30, r26
 ade:	0d c0       	rjmp	.+26     	; 0xafa <__udivmodsi4_ep>

00000ae0 <__udivmodsi4_loop>:
 ae0:	aa 1f       	adc	r26, r26
 ae2:	bb 1f       	adc	r27, r27
 ae4:	ee 1f       	adc	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	a2 17       	cp	r26, r18
 aea:	b3 07       	cpc	r27, r19
 aec:	e4 07       	cpc	r30, r20
 aee:	f5 07       	cpc	r31, r21
 af0:	20 f0       	brcs	.+8      	; 0xafa <__udivmodsi4_ep>
 af2:	a2 1b       	sub	r26, r18
 af4:	b3 0b       	sbc	r27, r19
 af6:	e4 0b       	sbc	r30, r20
 af8:	f5 0b       	sbc	r31, r21

00000afa <__udivmodsi4_ep>:
 afa:	66 1f       	adc	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	99 1f       	adc	r25, r25
 b02:	1a 94       	dec	r1
 b04:	69 f7       	brne	.-38     	; 0xae0 <__udivmodsi4_loop>
 b06:	60 95       	com	r22
 b08:	70 95       	com	r23
 b0a:	80 95       	com	r24
 b0c:	90 95       	com	r25
 b0e:	9b 01       	movw	r18, r22
 b10:	ac 01       	movw	r20, r24
 b12:	bd 01       	movw	r22, r26
 b14:	cf 01       	movw	r24, r30
 b16:	08 95       	ret

00000b18 <setjmp>:
 b18:	dc 01       	movw	r26, r24
 b1a:	2d 92       	st	X+, r2
 b1c:	3d 92       	st	X+, r3
 b1e:	4d 92       	st	X+, r4
 b20:	5d 92       	st	X+, r5
 b22:	6d 92       	st	X+, r6
 b24:	7d 92       	st	X+, r7
 b26:	8d 92       	st	X+, r8
 b28:	9d 92       	st	X+, r9
 b2a:	ad 92       	st	X+, r10
 b2c:	bd 92       	st	X+, r11
 b2e:	cd 92       	st	X+, r12
 b30:	dd 92       	st	X+, r13
 b32:	ed 92       	st	X+, r14
 b34:	fd 92       	st	X+, r15
 b36:	0d 93       	st	X+, r16
 b38:	1d 93       	st	X+, r17
 b3a:	cd 93       	st	X+, r28
 b3c:	dd 93       	st	X+, r29
 b3e:	ff 91       	pop	r31
 b40:	ef 91       	pop	r30
 b42:	8d b7       	in	r24, 0x3d	; 61
 b44:	8d 93       	st	X+, r24
 b46:	8e b7       	in	r24, 0x3e	; 62
 b48:	8d 93       	st	X+, r24
 b4a:	8f b7       	in	r24, 0x3f	; 63
 b4c:	8d 93       	st	X+, r24
 b4e:	ed 93       	st	X+, r30
 b50:	fd 93       	st	X+, r31
 b52:	88 27       	eor	r24, r24
 b54:	99 27       	eor	r25, r25
 b56:	09 94       	ijmp

00000b58 <longjmp>:
 b58:	dc 01       	movw	r26, r24
 b5a:	cb 01       	movw	r24, r22
 b5c:	81 30       	cpi	r24, 0x01	; 1
 b5e:	91 05       	cpc	r25, r1
 b60:	81 1d       	adc	r24, r1
 b62:	2d 90       	ld	r2, X+
 b64:	3d 90       	ld	r3, X+
 b66:	4d 90       	ld	r4, X+
 b68:	5d 90       	ld	r5, X+
 b6a:	6d 90       	ld	r6, X+
 b6c:	7d 90       	ld	r7, X+
 b6e:	8d 90       	ld	r8, X+
 b70:	9d 90       	ld	r9, X+
 b72:	ad 90       	ld	r10, X+
 b74:	bd 90       	ld	r11, X+
 b76:	cd 90       	ld	r12, X+
 b78:	dd 90       	ld	r13, X+
 b7a:	ed 90       	ld	r14, X+
 b7c:	fd 90       	ld	r15, X+
 b7e:	0d 91       	ld	r16, X+
 b80:	1d 91       	ld	r17, X+
 b82:	cd 91       	ld	r28, X+
 b84:	dd 91       	ld	r29, X+
 b86:	ed 91       	ld	r30, X+
 b88:	fd 91       	ld	r31, X+
 b8a:	0d 90       	ld	r0, X+
 b8c:	f8 94       	cli
 b8e:	fe bf       	out	0x3e, r31	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	ed bf       	out	0x3d, r30	; 61
 b94:	ed 91       	ld	r30, X+
 b96:	fd 91       	ld	r31, X+
 b98:	09 94       	ijmp

00000b9a <_exit>:
 b9a:	f8 94       	cli

00000b9c <__stop_program>:
 b9c:	ff cf       	rjmp	.-2      	; 0xb9c <__stop_program>
