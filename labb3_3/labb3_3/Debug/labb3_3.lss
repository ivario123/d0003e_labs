
labb3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  0080012e  0080012e  00000748  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001437  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f2  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e8  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004531  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e8       	ldi	r30, 0x86	; 134
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 32       	cpi	r26, 0x2E	; 46
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	ae e2       	ldi	r26, 0x2E	; 46
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a4 35       	cpi	r26, 0x54	; 84
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 be 01 	call	0x37c	; 0x37c <main>
  92:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <init_lcd>:
/************************************************************************/

void swap_segment(void){
	
	LCDDR13 = LCDDR13^1;
	LCDDR18 = LCDDR18^1;
  9a:	e4 ee       	ldi	r30, 0xE4	; 228
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	80 83       	st	Z, r24
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	80 83       	st	Z, r24
  b0:	80 81       	ld	r24, Z
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	80 83       	st	Z, r24
  b6:	e5 ee       	ldi	r30, 0xE5	; 229
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	80 81       	ld	r24, Z
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	80 63       	ori	r24, 0x30	; 48
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	80 83       	st	Z, r24
  d2:	e6 ee       	ldi	r30, 0xE6	; 230
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 78       	andi	r24, 0x8F	; 143
  da:	80 83       	st	Z, r24
  dc:	80 81       	ld	r24, Z
  de:	87 60       	ori	r24, 0x07	; 7
  e0:	80 83       	st	Z, r24
  e2:	e7 ee       	ldi	r30, 0xE7	; 231
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 71       	andi	r24, 0x1F	; 31
  ea:	80 83       	st	Z, r24
  ec:	80 81       	ld	r24, Z
  ee:	8f 60       	ori	r24, 0x0F	; 15
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <write_char>:
  f4:	cf 93       	push	r28
  f6:	c6 2f       	mov	r28, r22
  f8:	66 30       	cpi	r22, 0x06	; 6
  fa:	71 05       	cpc	r23, r1
  fc:	c0 f5       	brcc	.+112    	; 0x16e <write_char+0x7a>
  fe:	75 95       	asr	r23
 100:	67 95       	ror	r22
 102:	fb 01       	movw	r30, r22
 104:	e4 51       	subi	r30, 0x14	; 20
 106:	ff 4f       	sbci	r31, 0xFF	; 255
 108:	90 ed       	ldi	r25, 0xD0	; 208
 10a:	98 0f       	add	r25, r24
 10c:	9a 30       	cpi	r25, 0x0A	; 10
 10e:	60 f4       	brcc	.+24     	; 0x128 <write_char+0x34>
 110:	a8 2f       	mov	r26, r24
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	d0 97       	sbiw	r26, 0x30	; 48
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	aa 0f       	add	r26, r26
 11c:	bb 1f       	adc	r27, r27
 11e:	a0 50       	subi	r26, 0x00	; 0
 120:	bf 4f       	sbci	r27, 0xFF	; 255
 122:	4d 91       	ld	r20, X+
 124:	5c 91       	ld	r21, X
 126:	02 c0       	rjmp	.+4      	; 0x12c <write_char+0x38>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	1b c0       	rjmp	.+54     	; 0x168 <write_char+0x74>
 132:	94 2f       	mov	r25, r20
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	c0 fd       	sbrc	r28, 0
 144:	05 c0       	rjmp	.+10     	; 0x150 <write_char+0x5c>
 146:	80 81       	ld	r24, Z
 148:	80 7f       	andi	r24, 0xF0	; 240
 14a:	89 2b       	or	r24, r25
 14c:	80 83       	st	Z, r24
 14e:	09 c0       	rjmp	.+18     	; 0x162 <write_char+0x6e>
 150:	80 81       	ld	r24, Z
 152:	68 2f       	mov	r22, r24
 154:	6f 70       	andi	r22, 0x0F	; 15
 156:	70 e1       	ldi	r23, 0x10	; 16
 158:	97 9f       	mul	r25, r23
 15a:	c0 01       	movw	r24, r0
 15c:	11 24       	eor	r1, r1
 15e:	86 2b       	or	r24, r22
 160:	80 83       	st	Z, r24
 162:	35 96       	adiw	r30, 0x05	; 5
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 30       	cpi	r18, 0x04	; 4
 16a:	31 05       	cpc	r19, r1
 16c:	14 f3       	brlt	.-60     	; 0x132 <write_char+0x3e>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <is_prime>:
}

int is_prime(long num){
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
	
	if (num <= 3)
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	88 16       	cp	r8, r24
 18a:	91 04       	cpc	r9, r1
 18c:	a1 04       	cpc	r10, r1
 18e:	b1 04       	cpc	r11, r1
 190:	0c f1       	brlt	.+66     	; 0x1d4 <is_prime+0x62>
	return 1;
	
	if(num%2 == 0)
 192:	80 fe       	sbrs	r8, 0
 194:	22 c0       	rjmp	.+68     	; 0x1da <is_prime+0x68>
 196:	0f 2e       	mov	r0, r31
 198:	f3 e0       	ldi	r31, 0x03	; 3
 19a:	cf 2e       	mov	r12, r31
 19c:	d1 2c       	mov	r13, r1
 19e:	e1 2c       	mov	r14, r1
 1a0:	f1 2c       	mov	r15, r1
 1a2:	f0 2d       	mov	r31, r0
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <is_prime+0x52>
	return 0;
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 bf 02 	call	0x57e	; 0x57e <__divmodsi4>
 1b2:	67 2b       	or	r22, r23
 1b4:	68 2b       	or	r22, r24
 1b6:	69 2b       	or	r22, r25
 1b8:	99 f0       	breq	.+38     	; 0x1e0 <is_prime+0x6e>
		return 0;
		counter++;
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	c8 1a       	sub	r12, r24
 1be:	d8 0a       	sbc	r13, r24
 1c0:	e8 0a       	sbc	r14, r24
 1c2:	f8 0a       	sbc	r15, r24
	if(num%2 == 0)
	return 0;
	
	long counter = 3;
	
	while(counter <num){
 1c4:	c8 14       	cp	r12, r8
 1c6:	d9 04       	cpc	r13, r9
 1c8:	ea 04       	cpc	r14, r10
 1ca:	fb 04       	cpc	r15, r11
 1cc:	64 f3       	brlt	.-40     	; 0x1a6 <is_prime+0x34>
		if(num%counter == 0)
		return 0;
		counter++;
	}
	return 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <is_prime+0x72>
}

int is_prime(long num){
	
	if (num <= 3)
	return 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <is_prime+0x72>
	
	if(num%2 == 0)
	return 0;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <is_prime+0x72>
	
	long counter = 3;
	
	while(counter <num){
		if(num%counter == 0)
		return 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
		counter++;
	}
	return 1;
}
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <toggle_led>:

void toggle_led(void){
	LCDDR8= LCDDR8^1;
 1f6:	e4 ef       	ldi	r30, 0xF4	; 244
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	89 27       	eor	r24, r25
 200:	80 83       	st	Z, r24
 202:	08 95       	ret

00000204 <bussy_task>:
	reset_timer();
	spawn(blink,0);
}
// Sollution to the last question
// A better one would be to set the cpu in to sleepmode and trigger wakeup on interrupt
void bussy_task(){
 204:	ff cf       	rjmp	.-2      	; 0x204 <bussy_task>

00000206 <blink>:
		printAt(button_counter,4);
		//unlock(&button_print_mutex);
}
// Blink thread just toggles the led, rest is handled by interrupt
void blink(void){
	toggle_led();
 206:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <toggle_led>
 20a:	08 95       	ret

0000020c <reset_timer>:
mutex button_print_mutex = MUTEX_INIT;
uint16_t * timer = (uint16_t *)0x84;
uint8_t button_counter;
// Just sets the Clock reg to zerio
void reset_timer(){
	*timer = 0;
 20c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <timer>
 210:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <timer+0x1>
 214:	11 82       	std	Z+1, r1	; 0x01
 216:	10 82       	st	Z, r1
 218:	08 95       	ret

0000021a <printAt>:
			printAt(n, pos);
		}
	}
}
// from lab2
void printAt(long num, int pos) {
 21a:	8f 92       	push	r8
 21c:	9f 92       	push	r9
 21e:	af 92       	push	r10
 220:	bf 92       	push	r11
 222:	cf 92       	push	r12
 224:	df 92       	push	r13
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	4b 01       	movw	r8, r22
 230:	5c 01       	movw	r10, r24
 232:	ea 01       	movw	r28, r20
	
    write_char((num % 100) / 10 + '0', pos);
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	0e 94 bf 02 	call	0x57e	; 0x57e <__divmodsi4>
 240:	0f 2e       	mov	r0, r31
 242:	fa e0       	ldi	r31, 0x0A	; 10
 244:	cf 2e       	mov	r12, r31
 246:	d1 2c       	mov	r13, r1
 248:	e1 2c       	mov	r14, r1
 24a:	f1 2c       	mov	r15, r1
 24c:	f0 2d       	mov	r31, r0
 24e:	a7 01       	movw	r20, r14
 250:	96 01       	movw	r18, r12
 252:	0e 94 bf 02 	call	0x57e	; 0x57e <__divmodsi4>
 256:	be 01       	movw	r22, r28
 258:	80 e3       	ldi	r24, 0x30	; 48
 25a:	82 0f       	add	r24, r18
 25c:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
	pos++;
 260:	21 96       	adiw	r28, 0x01	; 1
    write_char( num % 10 + '0', pos);
 262:	c5 01       	movw	r24, r10
 264:	b4 01       	movw	r22, r8
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	0e 94 bf 02 	call	0x57e	; 0x57e <__divmodsi4>
 26e:	86 2f       	mov	r24, r22
 270:	be 01       	movw	r22, r28
 272:	80 5d       	subi	r24, 0xD0	; 208
 274:	0e 94 7a 00 	call	0xf4	; 0xf4 <write_char>
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	af 90       	pop	r10
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	08 95       	ret

0000028e <computePrimes>:
void reset_timer(){
	*timer = 0;
}

// from lab2
void computePrimes(int pos) {
 28e:	ec 01       	movw	r28, r24
	long n;
	
	for(n = 1; ; n++) {
 290:	c1 2c       	mov	r12, r1
 292:	d1 2c       	mov	r13, r1
 294:	76 01       	movw	r14, r12
 296:	c3 94       	inc	r12
		if (is_prime((long)n)) {
 298:	c7 01       	movw	r24, r14
 29a:	b6 01       	movw	r22, r12
 29c:	0e 94 b9 00 	call	0x172	; 0x172 <is_prime>
 2a0:	89 2b       	or	r24, r25
 2a2:	29 f0       	breq	.+10     	; 0x2ae <computePrimes+0x20>
			printAt(n, pos);
 2a4:	ae 01       	movw	r20, r28
 2a6:	c7 01       	movw	r24, r14
 2a8:	b6 01       	movw	r22, r12
 2aa:	0e 94 0d 01 	call	0x21a	; 0x21a <printAt>

// from lab2
void computePrimes(int pos) {
	long n;
	
	for(n = 1; ; n++) {
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	c8 1a       	sub	r12, r24
 2b2:	d8 0a       	sbc	r13, r24
 2b4:	e8 0a       	sbc	r14, r24
 2b6:	f8 0a       	sbc	r15, r24
		if (is_prime((long)n)) {
			printAt(n, pos);
		}
	}
 2b8:	ef cf       	rjmp	.-34     	; 0x298 <computePrimes+0xa>

000002ba <button>:
}
// This also uses a global counter and it works just fine
void button(void){
		// Using the mutexes would be a good safeguard in case that it spawns 2 buttons
		//lock(&button_print_mutex);
		button_counter++;
 2ba:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <button_counter>
 2be:	6f 5f       	subi	r22, 0xFF	; 255
 2c0:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <button_counter>
		printAt(button_counter,4);
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	44 e0       	ldi	r20, 0x04	; 4
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	0e 94 0d 01 	call	0x21a	; 0x21a <printAt>
 2d2:	08 95       	ret

000002d4 <__vector_3>:
// Blink thread just toggles the led, rest is handled by interrupt
void blink(void){
	toggle_led();
}
// Button int that spawns a new button thread
ISR(PCINT1_vect) {
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	2f 93       	push	r18
 2e0:	3f 93       	push	r19
 2e2:	4f 93       	push	r20
 2e4:	5f 93       	push	r21
 2e6:	6f 93       	push	r22
 2e8:	7f 93       	push	r23
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	af 93       	push	r26
 2f0:	bf 93       	push	r27
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	// Yield only on press, not release
	if(0!=(PINB&(1<<7))>>7)
 2f6:	1f 9b       	sbis	0x03, 7	; 3
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <__vector_3+0x32>
	spawn(button,0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8d e5       	ldi	r24, 0x5D	; 93
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <spawn>
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_7>:
// Timer int, that spawns a new blink thread
ISR(TIMER1_COMPA_vect){
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	reset_timer();
 34a:	0e 94 06 01 	call	0x20c	; 0x20c <reset_timer>
	spawn(blink,0);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <spawn>
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <main>:
// A better one would be to set the cpu in to sleepmode and trigger wakeup on interrupt
void bussy_task(){
	while(1);
}
int main() {
	init_lcd();
 37c:	0e 94 4d 00 	call	0x9a	; 0x9a <init_lcd>
	uint16_t * target_time = (uint16_t *)0x88;
	
	*target_time = 3906;												// Approximate form of .5s in clock cycles * 
 380:	82 e4       	ldi	r24, 0x42	; 66
 382:	9f e0       	ldi	r25, 0x0F	; 15
 384:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 388:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	// reseting timer
	*timer = 0;
 38c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <timer>
 390:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <timer+0x1>
 394:	11 82       	std	Z+1, r1	; 0x01
 396:	10 82       	st	Z, r1
	spawn(computePrimes,0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	87 e4       	ldi	r24, 0x47	; 71
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <spawn>
	spawn(bussy_task,0);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <spawn>
	
}
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	08 95       	ret

000003b6 <initialize>:
int initialized = 0;
// same as part 2 just no timer reg manipulation
static void initialize(void) {
	
	// Setting power options
	CLKPR = 0x80;
 3b6:	e1 e6       	ldi	r30, 0x61	; 97
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	80 83       	st	Z, r24
	CLKPR = 0X00;
 3be:	10 82       	st	Z, r1
	
	// Setting the pre-scaling factor to 1024
	TCCR1B = TCCR1B | TIMER_SCALING_1024;
 3c0:	e1 e8       	ldi	r30, 0x81	; 129
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	85 60       	ori	r24, 0x05	; 5
 3c8:	80 83       	st	Z, r24
	
	// Setting the pull up
	PORTB = PORTB   | (1<<7);
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	80 68       	ori	r24, 0x80	; 128
 3ce:	85 b9       	out	0x05, r24	; 5
	
	// Enabling interrupts
	MCUSR = MCUSR   | 1<<7;
 3d0:	84 b7       	in	r24, 0x34	; 52
 3d2:	80 68       	ori	r24, 0x80	; 128
 3d4:	84 bf       	out	0x34, r24	; 52
	EICRA = EICRA   | 3;
 3d6:	e9 e6       	ldi	r30, 0x69	; 105
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	83 60       	ori	r24, 0x03	; 3
 3de:	80 83       	st	Z, r24
	
	EIMSK = EIMSK   | 1<<7 | 1;
 3e0:	8d b3       	in	r24, 0x1d	; 29
 3e2:	81 68       	ori	r24, 0x81	; 129
 3e4:	8d bb       	out	0x1d, r24	; 29
	PCMSK1 = PCMSK1 | 1<<7;
 3e6:	ec e6       	ldi	r30, 0x6C	; 108
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 68       	ori	r24, 0x80	; 128
 3ee:	80 83       	st	Z, r24
	
	// Setting timer int enabled
	TIMSK1 = TIMSK1|2;
 3f0:	ef e6       	ldi	r30, 0x6F	; 111
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	80 83       	st	Z, r24
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	15 c0       	rjmp	.+42     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
        threads[i].next = &threads[i+1];
 400:	ac 01       	movw	r20, r24
 402:	4f 5f       	subi	r20, 0xFF	; 255
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	6d e6       	ldi	r22, 0x6D	; 109
 408:	64 9f       	mul	r22, r20
 40a:	90 01       	movw	r18, r0
 40c:	65 9f       	mul	r22, r21
 40e:	30 0d       	add	r19, r0
 410:	11 24       	eor	r1, r1
 412:	20 56       	subi	r18, 0x60	; 96
 414:	3e 4f       	sbci	r19, 0xFE	; 254
 416:	68 9f       	mul	r22, r24
 418:	f0 01       	movw	r30, r0
 41a:	69 9f       	mul	r22, r25
 41c:	f0 0d       	add	r31, r0
 41e:	11 24       	eor	r1, r1
 420:	e0 56       	subi	r30, 0x60	; 96
 422:	fe 4f       	sbci	r31, 0xFE	; 254
 424:	35 83       	std	Z+5, r19	; 0x05
 426:	24 83       	std	Z+4, r18	; 0x04
	
	// Setting timer int enabled
	TIMSK1 = TIMSK1|2;
	
    int i;
    for (i=0; i<NTHREADS-1; i++)
 428:	ca 01       	movw	r24, r20
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	91 05       	cpc	r25, r1
 42e:	44 f3       	brlt	.-48     	; 0x400 <__DATA_REGION_LENGTH__>
        threads[i].next = &threads[i+1];
    threads[NTHREADS-1].next = NULL;
 430:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <threads+0x14c>
 434:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <threads+0x14b>
    initialized = 1;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
 440:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	ENABLE();
 444:	78 94       	sei
 446:	08 95       	ret

00000448 <enqueue>:
}
// modified from part 2
static void enqueue(thread p, thread *queue) {
	thread q = *queue;
 448:	fb 01       	movw	r30, r22
 44a:	20 81       	ld	r18, Z
 44c:	31 81       	ldd	r19, Z+1	; 0x01
	*queue = p;
 44e:	91 83       	std	Z+1, r25	; 0x01
 450:	80 83       	st	Z, r24
	
	(*queue)->next = q;
 452:	fc 01       	movw	r30, r24
 454:	35 83       	std	Z+5, r19	; 0x05
 456:	24 83       	std	Z+4, r18	; 0x04
 458:	08 95       	ret

0000045a <dequeue>:
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 45a:	dc 01       	movw	r26, r24
 45c:	ed 91       	ld	r30, X+
 45e:	fc 91       	ld	r31, X
 460:	11 97       	sbiw	r26, 0x01	; 1
	if (*queue) {
 462:	30 97       	sbiw	r30, 0x00	; 0
 464:	09 f4       	brne	.+2      	; 0x468 <dequeue+0xe>
 466:	ff cf       	rjmp	.-2      	; 0x466 <dequeue+0xc>
		*queue = (*queue)->next;
 468:	24 81       	ldd	r18, Z+4	; 0x04
 46a:	35 81       	ldd	r19, Z+5	; 0x05
 46c:	2d 93       	st	X+, r18
 46e:	3c 93       	st	X, r19
	} else {
		// Empty queue, kernel panic!!!
		while (1) ;  // not much else to do...
	}
	return p;
}
 470:	cf 01       	movw	r24, r30
 472:	08 95       	ret

00000474 <dispatch>:

static void dispatch(thread next) {
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <dispatch+0x6>
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	9a 83       	std	Y+2, r25	; 0x02
 480:	89 83       	std	Y+1, r24	; 0x01
	if (setjmp(current->context) == 0) {
 482:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 486:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 48a:	06 96       	adiw	r24, 0x06	; 6
 48c:	0e 94 00 03 	call	0x600	; 0x600 <setjmp>
 490:	89 2b       	or	r24, r25
 492:	59 f4       	brne	.+22     	; 0x4aa <dispatch+0x36>
		current = next;
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <current+0x1>
 49c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <current>
		longjmp(next->context,1);
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	06 96       	adiw	r24, 0x06	; 6
 4a6:	0e 94 20 03 	call	0x640	; 0x640 <longjmp>
	}
}
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	08 95       	ret

000004b4 <spawn>:

void spawn(void (* function)(int), int arg) {
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <spawn+0xe>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	7c 01       	movw	r14, r24
 4c8:	8b 01       	movw	r16, r22
	
	thread newp;

	DISABLE();
 4ca:	f8 94       	cli
	if (!initialized) initialize();
 4cc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 4d0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 4d4:	89 2b       	or	r24, r25
 4d6:	11 f4       	brne	.+4      	; 0x4dc <spawn+0x28>
 4d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <initialize>
	// modification from part 2
	enqueue(current,&readyQ);
 4dc:	60 e3       	ldi	r22, 0x30	; 48
 4de:	71 e0       	ldi	r23, 0x01	; 1
 4e0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 4e4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 4e8:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
	newp = dequeue(&freeQ);
 4ec:	8c e2       	ldi	r24, 0x2C	; 44
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	0e 94 2d 02 	call	0x45a	; 0x45a <dequeue>
 4f4:	9a 83       	std	Y+2, r25	; 0x02
 4f6:	89 83       	std	Y+1, r24	; 0x01
	newp->function = function;
 4f8:	fc 01       	movw	r30, r24
 4fa:	f1 82       	std	Z+1, r15	; 0x01
 4fc:	e0 82       	st	Z, r14
	newp->arg = arg;
 4fe:	13 83       	std	Z+3, r17	; 0x03
 500:	02 83       	std	Z+2, r16	; 0x02
	newp->next = NULL;
 502:	15 82       	std	Z+5, r1	; 0x05
 504:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 506:	06 96       	adiw	r24, 0x06	; 6
 508:	0e 94 00 03 	call	0x600	; 0x600 <setjmp>
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	e1 f4       	brne	.+56     	; 0x548 <__stack+0x49>
		ENABLE();
 510:	78 94       	sei
		current->function(current->arg);
 512:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <current>
 516:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <current+0x1>
 51a:	ed 91       	ld	r30, X+
 51c:	fc 91       	ld	r31, X
 51e:	11 97       	sbiw	r26, 0x01	; 1
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	8d 91       	ld	r24, X+
 524:	9c 91       	ld	r25, X
 526:	13 97       	sbiw	r26, 0x03	; 3
 528:	09 95       	icall
		DISABLE();
 52a:	f8 94       	cli
		enqueue(current, &freeQ);
 52c:	6c e2       	ldi	r22, 0x2C	; 44
 52e:	71 e0       	ldi	r23, 0x01	; 1
 530:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <current>
 534:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <current+0x1>
 538:	0e 94 24 02 	call	0x448	; 0x448 <enqueue>
		dispatch(dequeue(&readyQ));
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 2d 02 	call	0x45a	; 0x45a <dequeue>
 544:	0e 94 3a 02 	call	0x474	; 0x474 <dispatch>
	}
	SETSTACK(&newp->context, &newp->stack);
 548:	e9 81       	ldd	r30, Y+1	; 0x01
 54a:	fa 81       	ldd	r31, Y+2	; 0x02
 54c:	36 96       	adiw	r30, 0x06	; 6
 54e:	89 81       	ldd	r24, Y+1	; 0x01
 550:	9a 81       	ldd	r25, Y+2	; 0x02
 552:	87 59       	subi	r24, 0x97	; 151
 554:	9f 4f       	sbci	r25, 0xFF	; 255
 556:	91 8b       	std	Z+17, r25	; 0x11
 558:	80 8b       	std	Z+16, r24	; 0x10
 55a:	e9 81       	ldd	r30, Y+1	; 0x01
 55c:	fa 81       	ldd	r31, Y+2	; 0x02
 55e:	91 8f       	std	Z+25, r25	; 0x19
 560:	80 8f       	std	Z+24, r24	; 0x18
	//enqueue(newp, &readyQ);
	ENABLE();
 562:	78 94       	sei
	// Modification from part 2
	dispatch(newp);
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
 568:	0e 94 3a 02 	call	0x474	; 0x474 <dispatch>
}
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	ff 90       	pop	r15
 57a:	ef 90       	pop	r14
 57c:	08 95       	ret

0000057e <__divmodsi4>:
 57e:	05 2e       	mov	r0, r21
 580:	97 fb       	bst	r25, 7
 582:	1e f4       	brtc	.+6      	; 0x58a <__divmodsi4+0xc>
 584:	00 94       	com	r0
 586:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__negsi2>
 58a:	57 fd       	sbrc	r21, 7
 58c:	07 d0       	rcall	.+14     	; 0x59c <__divmodsi4_neg2>
 58e:	0e 94 de 02 	call	0x5bc	; 0x5bc <__udivmodsi4>
 592:	07 fc       	sbrc	r0, 7
 594:	03 d0       	rcall	.+6      	; 0x59c <__divmodsi4_neg2>
 596:	4e f4       	brtc	.+18     	; 0x5aa <__divmodsi4_exit>
 598:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__negsi2>

0000059c <__divmodsi4_neg2>:
 59c:	50 95       	com	r21
 59e:	40 95       	com	r20
 5a0:	30 95       	com	r19
 5a2:	21 95       	neg	r18
 5a4:	3f 4f       	sbci	r19, 0xFF	; 255
 5a6:	4f 4f       	sbci	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255

000005aa <__divmodsi4_exit>:
 5aa:	08 95       	ret

000005ac <__negsi2>:
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	08 95       	ret

000005bc <__udivmodsi4>:
 5bc:	a1 e2       	ldi	r26, 0x21	; 33
 5be:	1a 2e       	mov	r1, r26
 5c0:	aa 1b       	sub	r26, r26
 5c2:	bb 1b       	sub	r27, r27
 5c4:	fd 01       	movw	r30, r26
 5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <__udivmodsi4_ep>

000005c8 <__udivmodsi4_loop>:
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	ee 1f       	adc	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	a2 17       	cp	r26, r18
 5d2:	b3 07       	cpc	r27, r19
 5d4:	e4 07       	cpc	r30, r20
 5d6:	f5 07       	cpc	r31, r21
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <__udivmodsi4_ep>
 5da:	a2 1b       	sub	r26, r18
 5dc:	b3 0b       	sbc	r27, r19
 5de:	e4 0b       	sbc	r30, r20
 5e0:	f5 0b       	sbc	r31, r21

000005e2 <__udivmodsi4_ep>:
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	99 1f       	adc	r25, r25
 5ea:	1a 94       	dec	r1
 5ec:	69 f7       	brne	.-38     	; 0x5c8 <__udivmodsi4_loop>
 5ee:	60 95       	com	r22
 5f0:	70 95       	com	r23
 5f2:	80 95       	com	r24
 5f4:	90 95       	com	r25
 5f6:	9b 01       	movw	r18, r22
 5f8:	ac 01       	movw	r20, r24
 5fa:	bd 01       	movw	r22, r26
 5fc:	cf 01       	movw	r24, r30
 5fe:	08 95       	ret

00000600 <setjmp>:
 600:	dc 01       	movw	r26, r24
 602:	2d 92       	st	X+, r2
 604:	3d 92       	st	X+, r3
 606:	4d 92       	st	X+, r4
 608:	5d 92       	st	X+, r5
 60a:	6d 92       	st	X+, r6
 60c:	7d 92       	st	X+, r7
 60e:	8d 92       	st	X+, r8
 610:	9d 92       	st	X+, r9
 612:	ad 92       	st	X+, r10
 614:	bd 92       	st	X+, r11
 616:	cd 92       	st	X+, r12
 618:	dd 92       	st	X+, r13
 61a:	ed 92       	st	X+, r14
 61c:	fd 92       	st	X+, r15
 61e:	0d 93       	st	X+, r16
 620:	1d 93       	st	X+, r17
 622:	cd 93       	st	X+, r28
 624:	dd 93       	st	X+, r29
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	8d b7       	in	r24, 0x3d	; 61
 62c:	8d 93       	st	X+, r24
 62e:	8e b7       	in	r24, 0x3e	; 62
 630:	8d 93       	st	X+, r24
 632:	8f b7       	in	r24, 0x3f	; 63
 634:	8d 93       	st	X+, r24
 636:	ed 93       	st	X+, r30
 638:	fd 93       	st	X+, r31
 63a:	88 27       	eor	r24, r24
 63c:	99 27       	eor	r25, r25
 63e:	09 94       	ijmp

00000640 <longjmp>:
 640:	dc 01       	movw	r26, r24
 642:	cb 01       	movw	r24, r22
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	91 05       	cpc	r25, r1
 648:	81 1d       	adc	r24, r1
 64a:	2d 90       	ld	r2, X+
 64c:	3d 90       	ld	r3, X+
 64e:	4d 90       	ld	r4, X+
 650:	5d 90       	ld	r5, X+
 652:	6d 90       	ld	r6, X+
 654:	7d 90       	ld	r7, X+
 656:	8d 90       	ld	r8, X+
 658:	9d 90       	ld	r9, X+
 65a:	ad 90       	ld	r10, X+
 65c:	bd 90       	ld	r11, X+
 65e:	cd 90       	ld	r12, X+
 660:	dd 90       	ld	r13, X+
 662:	ed 90       	ld	r14, X+
 664:	fd 90       	ld	r15, X+
 666:	0d 91       	ld	r16, X+
 668:	1d 91       	ld	r17, X+
 66a:	cd 91       	ld	r28, X+
 66c:	dd 91       	ld	r29, X+
 66e:	ed 91       	ld	r30, X+
 670:	fd 91       	ld	r31, X+
 672:	0d 90       	ld	r0, X+
 674:	f8 94       	cli
 676:	fe bf       	out	0x3e, r31	; 62
 678:	0f be       	out	0x3f, r0	; 63
 67a:	ed bf       	out	0x3d, r30	; 61
 67c:	ed 91       	ld	r30, X+
 67e:	fd 91       	ld	r31, X+
 680:	09 94       	ijmp

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
